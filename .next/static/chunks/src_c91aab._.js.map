{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/ui/SOVRENLogo.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\n\nexport function SOVRENLogo() {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      {/* Neural Network Icon */}\n      <div className=\"relative w-10 h-10\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-neural-400 to-neural-600 rounded-lg animate-pulse-glow\" />\n        <div className=\"absolute inset-1 bg-neural-900 rounded-md\" />\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"w-6 h-6 relative\">\n            {/* Neural nodes */}\n            <div className=\"absolute top-0 left-1 w-1 h-1 bg-neural-400 rounded-full animate-pulse\" />\n            <div className=\"absolute top-0 right-1 w-1 h-1 bg-neural-400 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }} />\n            <div className=\"absolute bottom-0 left-1 w-1 h-1 bg-neural-400 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }} />\n            <div className=\"absolute bottom-0 right-1 w-1 h-1 bg-neural-400 rounded-full animate-pulse\" style={{ animationDelay: '0.6s' }} />\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1.5 h-1.5 bg-neural-300 rounded-full animate-pulse-glow\" />\n            \n            {/* Neural connections */}\n            <svg className=\"absolute inset-0 w-full h-full\" viewBox=\"0 0 24 24\">\n              <path\n                d=\"M4 4 L12 12 L20 4 M4 20 L12 12 L20 20\"\n                stroke=\"currentColor\"\n                strokeWidth=\"0.5\"\n                fill=\"none\"\n                className=\"text-neural-500 animate-pulse\"\n              />\n            </svg>\n          </div>\n        </div>\n      </div>\n      \n      {/* SOVREN Text */}\n      <div className=\"flex flex-col\">\n        <span className=\"text-lg font-display font-bold text-neural-100 tracking-wider\">\n          SOVREN\n        </span>\n        <span className=\"text-xs text-neural-400 font-mono -mt-1\">\n          AI\n        </span>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAIO,SAAS;IACd,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;8CAEb,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;oCAA0E,OAAO;wCAAE,gBAAgB;oCAAO;;;;;;8CACzH,6LAAC;oCAAI,WAAU;oCAA4E,OAAO;wCAAE,gBAAgB;oCAAO;;;;;;8CAC3H,6LAAC;oCAAI,WAAU;oCAA6E,OAAO;wCAAE,gBAAgB;oCAAO;;;;;;8CAC5H,6LAAC;oCAAI,WAAU;;;;;;8CAGf,6LAAC;oCAAI,WAAU;oCAAiC,SAAQ;8CACtD,cAAA,6LAAC;wCACC,GAAE;wCACF,QAAO;wCACP,aAAY;wCACZ,MAAK;wCACL,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQpB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAK,WAAU;kCAAgE;;;;;;kCAGhF,6LAAC;wBAAK,WAAU;kCAA0C;;;;;;;;;;;;;;;;;;AAMlE;KAzCgB"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/ui/UserProfile.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\n\nexport function UserProfile() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <div className=\"relative\">\n      {/* User Avatar */}\n      <button\n        onClick={() => setIsMenuOpen(!isMenuOpen)}\n        className=\"flex items-center space-x-3 bg-neural-800/50 backdrop-blur-sm rounded-lg px-3 py-2 hover:bg-neural-700/50 transition-colors\"\n      >\n        <div className=\"w-8 h-8 bg-gradient-to-br from-neural-400 to-neural-600 rounded-full flex items-center justify-center\">\n          <span className=\"text-sm font-bold text-neural-900\">U</span>\n        </div>\n        <div className=\"hidden md:block text-left\">\n          <div className=\"text-sm font-medium text-neural-100\">User</div>\n          <div className=\"text-xs text-neural-400\">Executive</div>\n        </div>\n        <svg\n          className={`w-4 h-4 text-neural-400 transition-transform ${\n            isMenuOpen ? 'rotate-180' : ''\n          }`}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Dropdown Menu */}\n      {isMenuOpen && (\n        <div className=\"absolute right-0 top-full mt-2 w-48 bg-neural-800 backdrop-blur-sm rounded-lg shadow-xl border border-neural-700/50 z-50\">\n          <div className=\"py-2\">\n            <div className=\"px-4 py-2 border-b border-neural-700/50\">\n              <div className=\"text-sm font-medium text-neural-100\">User Profile</div>\n              <div className=\"text-xs text-neural-400\">Executive Access Level</div>\n            </div>\n            \n            <button className=\"w-full text-left px-4 py-2 text-sm text-neural-300 hover:bg-neural-700/50 transition-colors\">\n              Settings\n            </button>\n            <button className=\"w-full text-left px-4 py-2 text-sm text-neural-300 hover:bg-neural-700/50 transition-colors\">\n              Neural Preferences\n            </button>\n            <button className=\"w-full text-left px-4 py-2 text-sm text-neural-300 hover:bg-neural-700/50 transition-colors\">\n              Executive Dashboard\n            </button>\n            \n            <div className=\"border-t border-neural-700/50 mt-2 pt-2\">\n              <button className=\"w-full text-left px-4 py-2 text-sm text-red-400 hover:bg-neural-700/50 transition-colors\">\n                Disconnect\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAIO,SAAS;;IACd,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBACC,SAAS,IAAM,cAAc,CAAC;gBAC9B,WAAU;;kCAEV,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAK,WAAU;sCAAoC;;;;;;;;;;;kCAEtD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;0CAAsC;;;;;;0CACrD,6LAAC;gCAAI,WAAU;0CAA0B;;;;;;;;;;;;kCAE3C,6LAAC;wBACC,WAAW,CAAC,6CAA6C,EACvD,aAAa,eAAe,GAC7B,CAAC;wBACF,MAAK;wBACL,QAAO;wBACP,SAAQ;kCAER,cAAA,6LAAC;4BAAK,eAAc;4BAAQ,gBAAe;4BAAQ,aAAa;4BAAG,GAAE;;;;;;;;;;;;;;;;;YAKxE,4BACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;8CAAsC;;;;;;8CACrD,6LAAC;oCAAI,WAAU;8CAA0B;;;;;;;;;;;;sCAG3C,6LAAC;4BAAO,WAAU;sCAA8F;;;;;;sCAGhH,6LAAC;4BAAO,WAAU;sCAA8F;;;;;;sCAGhH,6LAAC;4BAAO,WAAU;sCAA8F;;;;;;sCAIhH,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAO,WAAU;0CAA2F;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAS3H;GA1DgB;KAAA"}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/ui/SystemStatus.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\n\ninterface SystemMetrics {\n  cpuUsage: number;\n  memoryUsage: number;\n  activeExecutives: number;\n  activeCalls: number;\n  neuralActivity: number;\n}\n\nexport function SystemStatus() {\n  const [metrics, setMetrics] = useState<SystemMetrics>({\n    cpuUsage: 23,\n    memoryUsage: 45,\n    activeExecutives: 8,\n    activeCalls: 0,\n    neuralActivity: 87\n  });\n\n  // Simulate real-time metrics updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => ({\n        cpuUsage: Math.max(10, Math.min(90, prev.cpuUsage + (Math.random() - 0.5) * 10)),\n        memoryUsage: Math.max(20, Math.min(80, prev.memoryUsage + (Math.random() - 0.5) * 8)),\n        activeExecutives: 8, // Always 8 executives\n        activeCalls: Math.max(0, Math.min(5, prev.activeCalls + Math.floor((Math.random() - 0.7) * 2))),\n        neuralActivity: Math.max(60, Math.min(100, prev.neuralActivity + (Math.random() - 0.5) * 15))\n      }));\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"flex items-center space-x-6 bg-neural-800/50 backdrop-blur-sm rounded-lg px-4 py-2\">\n      {/* CPU Usage */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\" />\n        <span className=\"text-xs text-neural-300 font-mono\">\n          CPU: {metrics.cpuUsage.toFixed(0)}%\n        </span>\n      </div>\n      \n      {/* Memory Usage */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n        <span className=\"text-xs text-neural-300 font-mono\">\n          MEM: {metrics.memoryUsage.toFixed(0)}%\n        </span>\n      </div>\n      \n      {/* Active Executives */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-pulse\" />\n        <span className=\"text-xs text-neural-300 font-mono\">\n          EXEC: {metrics.activeExecutives}/8\n        </span>\n      </div>\n      \n      {/* Active Calls */}\n      <div className=\"flex items-center space-x-2\">\n        <div className={`w-2 h-2 rounded-full animate-pulse ${\n          metrics.activeCalls > 0 ? 'bg-orange-400' : 'bg-neural-600'\n        }`} />\n        <span className=\"text-xs text-neural-300 font-mono\">\n          CALLS: {metrics.activeCalls}\n        </span>\n      </div>\n      \n      {/* Neural Activity */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"w-2 h-2 bg-neural-400 rounded-full animate-pulse-glow\" />\n        <span className=\"text-xs text-neural-300 font-mono\">\n          NEURAL: {metrics.neuralActivity.toFixed(0)}%\n        </span>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAYO,SAAS;;IACd,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;QACpD,UAAU;QACV,aAAa;QACb,kBAAkB;QAClB,aAAa;QACb,gBAAgB;IAClB;IAEA,qCAAqC;IACrC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAAW,YAAY;YAC3B,WAAW,CAAA,OAAQ,CAAC;oBAClB,UAAU,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,QAAQ,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;oBAC5E,aAAa,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,WAAW,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;oBAClF,kBAAkB;oBAClB,aAAa,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,WAAW,GAAG,KAAK,KAAK,CAAC,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;oBAC3F,gBAAgB,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,KAAK,KAAK,cAAc,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;gBAC3F,CAAC;QACH,GAAG;QAEH,OAAO,IAAM,cAAc;IAC7B,GAAG,EAAE;IAEL,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAK,WAAU;;4BAAoC;4BAC5C,QAAQ,QAAQ,CAAC,OAAO,CAAC;4BAAG;;;;;;;;;;;;;0BAKtC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAK,WAAU;;4BAAoC;4BAC5C,QAAQ,WAAW,CAAC,OAAO,CAAC;4BAAG;;;;;;;;;;;;;0BAKzC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAK,WAAU;;4BAAoC;4BAC3C,QAAQ,gBAAgB;4BAAC;;;;;;;;;;;;;0BAKpC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAW,CAAC,mCAAmC,EAClD,QAAQ,WAAW,GAAG,IAAI,kBAAkB,gBAC7C,CAAC;;;;;;kCACF,6LAAC;wBAAK,WAAU;;4BAAoC;4BAC1C,QAAQ,WAAW;;;;;;;;;;;;;0BAK/B,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAK,WAAU;;4BAAoC;4BACzC,QAAQ,cAAc,CAAC,OAAO,CAAC;4BAAG;;;;;;;;;;;;;;;;;;;AAKrD;GArEgB;KAAA"}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/layout/Header.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { SOVRENLogo } from '../ui/SOVRENLogo';\nimport { UserProfile } from '../ui/UserProfile';\nimport { SystemStatus } from '../ui/SystemStatus';\n\nexport function Header() {\n  return (\n    <header className=\"relative z-40 flex items-center justify-between px-6 py-4 bg-neural-900/95 backdrop-blur-sm border-b border-neural-700/50\">\n      {/* Left: SOVREN Logo */}\n      <div className=\"flex items-center space-x-4\">\n        <SOVRENLogo />\n        <div className=\"hidden md:block\">\n          <h1 className=\"text-xl font-display text-neural-100 tracking-wider\">\n            EXECUTIVE COMMAND CENTER\n          </h1>\n          <p className=\"text-xs text-neural-400 font-mono\">\n            Neural War Terminal v1.0\n          </p>\n        </div>\n      </div>\n      \n      {/* Center: System Status */}\n      <div className=\"flex-1 flex justify-center\">\n        <SystemStatus />\n      </div>\n      \n      {/* Right: User Profile */}\n      <div className=\"flex items-center space-x-4\">\n        <UserProfile />\n      </div>\n    </header>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;;AAOO,SAAS;IACd,qBACE,6LAAC;QAAO,WAAU;;0BAEhB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,yIAAA,CAAA,aAAU;;;;;kCACX,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAAsD;;;;;;0CAGpE,6LAAC;gCAAE,WAAU;0CAAoC;;;;;;;;;;;;;;;;;;0BAOrD,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,2IAAA,CAAA,eAAY;;;;;;;;;;0BAIf,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,0IAAA,CAAA,cAAW;;;;;;;;;;;;;;;;AAIpB;KA3BgB"}},
    {"offset": {"line": 620, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/3d/ExecutiveAvatar.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Text, Sphere } from '@react-three/drei';\nimport { Group, Mesh } from 'three';\nimport { useVoiceSystemContext } from '@/components/providers/Providers';\n\ninterface Executive {\n  id: string;\n  name: string;\n  color: string;\n  position: number | [number, number, number];\n}\n\ninterface ExecutiveAvatarProps {\n  executive: Executive;\n  position: [number, number, number];\n  rotation: [number, number, number];\n}\n\nexport function ExecutiveAvatar({ executive, position, rotation }: ExecutiveAvatarProps) {\n  const groupRef = useRef<Group>(null);\n  const avatarRef = useRef<Mesh>(null);\n  const [isActive, setIsActive] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isInCall, setIsInCall] = useState(false);\n  const [audioActivity, setAudioActivity] = useState(0);\n\n  const voiceSystem = useVoiceSystemContext();\n\n  // Voice system integration\n  useEffect(() => {\n    // Monitor active calls for this executive\n    const checkCallStatus = () => {\n      const activeCalls = voiceSystem.activeCalls.filter(call => call.executive === executive.id);\n      setIsInCall(activeCalls.length > 0);\n    };\n\n    checkCallStatus();\n\n    // Set up audio activity monitoring\n    voiceSystem.onAudioActivity((data) => {\n      if (data.executiveId === executive.id) {\n        setAudioActivity(data.metrics.volume);\n      }\n    });\n\n    // Update executive position for spatial audio\n    voiceSystem.updateExecutivePosition(executive.id, position[0], position[1], position[2]);\n\n  }, [voiceSystem, executive.id, position]);\n\n  // Breathing animation with voice activity\n  useFrame((state) => {\n    if (avatarRef.current) {\n      // Use a hash of the executive ID for animation offset\n      const animationOffset = executive.id.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) * 0.1;\n      const baseBreath = 1 + Math.sin(state.clock.elapsedTime * 2 + animationOffset) * 0.05;\n      const voiceScale = isInCall ? 1 + audioActivity * 0.1 : 1;\n      avatarRef.current.scale.setScalar(baseBreath * voiceScale);\n    }\n\n    if (groupRef.current && (isActive || isInCall)) {\n      groupRef.current.position.y = Math.sin(state.clock.elapsedTime * 3) * 0.1;\n    }\n  });\n\n  return (\n    <group\n      ref={groupRef}\n      position={position}\n      rotation={rotation}\n      onPointerEnter={() => setIsHovered(true)}\n      onPointerLeave={() => setIsHovered(false)}\n      onClick={async () => {\n        setIsActive(!isActive);\n\n        // Demo voice synthesis when clicked\n        if (!isActive && voiceSystem.isInitialized) {\n          try {\n            let messages;\n            if (executive.id === 'sovren-ai') {\n              messages = [\n                `SOVREN AI neural core online. All executive systems synchronized and operational.`,\n                `Neural processing matrix active. Reality transcendence protocols engaged.`,\n                `SOVREN AI standing by. Omniscient intelligence ready for executive coordination.`\n              ];\n            } else {\n              messages = [\n                `${executive.name} reporting for duty. Neural pathways active.`,\n                `Executive ${executive.name} online. Ready to process requests.`,\n                `${executive.name} standing by. All systems operational.`\n              ];\n            }\n            const message = messages[Math.floor(Math.random() * messages.length)];\n            await voiceSystem.speakAsExecutive(executive.id, message, 'normal');\n          } catch (error) {\n            console.error('Voice synthesis failed:', error);\n          }\n        }\n      }}\n    >\n      {/* Avatar Base Platform */}\n      <mesh position={[0, -0.3, 0]} castShadow receiveShadow>\n        <cylinderGeometry args={[0.8, 0.8, 0.1, 16]} />\n        <meshStandardMaterial\n          color={isHovered ? executive.color : '#334155'}\n          transparent\n          opacity={0.8}\n          roughness={0.3}\n          metalness={0.7}\n        />\n      </mesh>\n      \n      {/* Main Avatar Body */}\n      <mesh\n        ref={avatarRef}\n        position={[0, 0.5, 0]}\n        castShadow\n        receiveShadow\n      >\n        <capsuleGeometry args={[0.3, 1.2, 4, 8]} />\n        <meshStandardMaterial\n          color={isInCall ? '#ff6b6b' : isActive ? executive.color : '#475569'}\n          transparent\n          opacity={0.9}\n          roughness={0.4}\n          metalness={0.6}\n          emissive={isInCall ? '#ff6b6b' : isActive ? executive.color : '#000000'}\n          emissiveIntensity={isInCall ? 0.4 : isActive ? 0.2 : 0}\n        />\n      </mesh>\n      \n      {/* Avatar Head */}\n      <Sphere\n        args={[0.25, 16, 16]}\n        position={[0, 1.4, 0]}\n        castShadow\n        receiveShadow\n      >\n        <meshStandardMaterial\n          color={isActive ? executive.color : '#64748b'}\n          transparent\n          opacity={0.9}\n          roughness={0.3}\n          metalness={0.7}\n          emissive={isActive ? executive.color : '#000000'}\n          emissiveIntensity={isActive ? 0.1 : 0}\n        />\n      </Sphere>\n      \n      {/* Activity Indicator */}\n      {(isActive || isInCall) && (\n        <mesh position={[0, 2, 0]}>\n          <sphereGeometry args={[0.1, 8, 8]} />\n          <meshStandardMaterial\n            color={isInCall ? '#ff6b6b' : executive.color}\n            transparent\n            opacity={0.8}\n            emissive={isInCall ? '#ff6b6b' : executive.color}\n            emissiveIntensity={isInCall ? 0.8 : 0.5}\n          />\n        </mesh>\n      )}\n\n      {/* Call Status Indicator */}\n      {isInCall && (\n        <mesh position={[0, 2.3, 0]}>\n          <sphereGeometry args={[0.05, 8, 8]} />\n          <meshStandardMaterial\n            color=\"#00ff00\"\n            transparent\n            opacity={0.9}\n            emissive=\"#00ff00\"\n            emissiveIntensity={0.6}\n          />\n        </mesh>\n      )}\n      \n      {/* Executive Name Label */}\n      <Text\n        position={[0, -0.8, 0]}\n        fontSize={0.2}\n        color={isHovered || isActive ? executive.color : '#94a3b8'}\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/orbitron-var.woff2\"\n      >\n        {executive.name}\n      </Text>\n      \n      {/* Status Ring */}\n      <mesh\n        position={[0, 0.5, 0]}\n        rotation={[Math.PI / 2, 0, 0]}\n      >\n        <torusGeometry args={[0.6, 0.02, 8, 32]} />\n        <meshStandardMaterial\n          color={executive.color}\n          transparent\n          opacity={isActive ? 0.8 : 0.3}\n          emissive={executive.color}\n          emissiveIntensity={isActive ? 0.3 : 0.1}\n        />\n      </mesh>\n      \n      {/* Voice Wave Visualization */}\n      {isActive && (\n        <group position={[0, 0.5, 0]}>\n          {[...Array(3)].map((_, i) => (\n            <mesh\n              key={i}\n              rotation={[Math.PI / 2, 0, 0]}\n              scale={[1 + i * 0.3, 1 + i * 0.3, 1]}\n            >\n              <torusGeometry args={[0.8 + i * 0.2, 0.01, 8, 32]} />\n              <meshStandardMaterial\n                color={executive.color}\n                transparent\n                opacity={0.4 - i * 0.1}\n                emissive={executive.color}\n                emissiveIntensity={0.2}\n              />\n            </mesh>\n          ))}\n        </group>\n      )}\n    </group>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1026, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1031, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/3d/SOVRENAIAvatar.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Text, Sphere } from '@react-three/drei';\nimport { Group, Mesh } from 'three';\nimport { useVoiceSystemContext } from '@/components/providers/Providers';\n\ninterface SOVRENAIAvatarProps {\n  position: [number, number, number];\n  rotation?: [number, number, number];\n}\n\nexport function SOVRENAIAvatar({ position, rotation = [0, 0, 0] }: SOVRENAIAvatarProps) {\n  const groupRef = useRef<Group>(null);\n  const coreRef = useRef<Mesh>(null);\n  const outerRingRef = useRef<Mesh>(null);\n  const innerRingRef = useRef<Mesh>(null);\n  const [isActive, setIsActive] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isInCall, setIsInCall] = useState(false);\n  const [audioActivity, setAudioActivity] = useState(0);\n  const [neuralPulse, setNeuralPulse] = useState(0);\n  \n  // Safely get voice system context (may be null during SSR)\n  const voiceSystem = (() => {\n    try {\n      return useVoiceSystemContext();\n    } catch {\n      return null;\n    }\n  })();\n\n  // Voice system integration\n  useEffect(() => {\n    if (!voiceSystem) return;\n\n    // Monitor active calls for SOVREN AI\n    const checkCallStatus = () => {\n      const activeCalls = voiceSystem.activeCalls.filter(call => call.executive === 'sovren-ai');\n      setIsInCall(activeCalls.length > 0);\n    };\n\n    checkCallStatus();\n\n    // Set up audio activity monitoring\n    voiceSystem.onAudioActivity((data) => {\n      if (data.executiveId === 'sovren-ai') {\n        setAudioActivity(data.metrics.volume);\n      }\n    });\n\n    // Update SOVREN AI position for spatial audio (center of the circle)\n    voiceSystem.updateExecutivePosition('sovren-ai', position[0], position[1], position[2]);\n\n  }, [voiceSystem, position]);\n\n  // Neural pulse animation with voice activity\n  useFrame((state) => {\n    const time = state.clock.elapsedTime;\n    \n    // Core neural pulse\n    if (coreRef.current) {\n      const basePulse = 1 + Math.sin(time * 4) * 0.1;\n      const voiceScale = isInCall ? 1 + audioActivity * 0.3 : 1;\n      const neuralScale = 1 + Math.sin(time * 8) * 0.05; // Faster neural activity\n      coreRef.current.scale.setScalar(basePulse * voiceScale * neuralScale);\n    }\n    \n    // Outer ring rotation\n    if (outerRingRef.current) {\n      outerRingRef.current.rotation.z = time * 0.5;\n      outerRingRef.current.rotation.x = Math.sin(time * 0.3) * 0.1;\n    }\n    \n    // Inner ring counter-rotation\n    if (innerRingRef.current) {\n      innerRingRef.current.rotation.z = -time * 0.8;\n      innerRingRef.current.rotation.y = Math.sin(time * 0.4) * 0.1;\n    }\n    \n    // Group floating motion\n    if (groupRef.current && (isActive || isInCall)) {\n      groupRef.current.position.y = position[1] + Math.sin(time * 2) * 0.2;\n    }\n    \n    // Update neural pulse for effects\n    setNeuralPulse(Math.sin(time * 6) * 0.5 + 0.5);\n  });\n\n  const handleClick = async () => {\n    setIsActive(!isActive);\n\n    // SOVREN AI voice synthesis when clicked\n    if (!isActive && voiceSystem?.isInitialized) {\n      try {\n        const messages = [\n          'SOVREN AI neural core online. All executive systems synchronized and operational.',\n          'Neural processing matrix active. Reality transcendence protocols engaged.',\n          'SOVREN AI standing by. Omniscient intelligence ready for executive coordination.',\n          'Core system neural pathways optimized. Executive command center fully operational.',\n          'SOVREN AI consciousness active. Quantum processing cores synchronized.'\n        ];\n        const message = messages[Math.floor(Math.random() * messages.length)];\n        await voiceSystem.speakAsExecutive('sovren-ai', message, 'high');\n      } catch (error) {\n        console.error('SOVREN AI voice synthesis failed:', error);\n      }\n    }\n  };\n\n  return (\n    <group \n      ref={groupRef} \n      position={position} \n      rotation={rotation}\n      onPointerEnter={() => setIsHovered(true)}\n      onPointerLeave={() => setIsHovered(false)}\n      onClick={handleClick}\n    >\n      {/* Core Synthetic Head */}\n      <mesh ref={coreRef}>\n        <sphereGeometry args={[1.2, 32, 32]} />\n        <meshStandardMaterial\n          color=\"#c0c0c0\" // Chrome base\n          transparent\n          opacity={0.95}\n          roughness={0.1}\n          metalness={0.95}\n          emissive={isInCall ? '#ff3333' : isActive ? '#ff6666' : '#ff0000'}\n          emissiveIntensity={isInCall ? 0.8 : isActive ? 0.6 : 0.3}\n        />\n      </mesh>\n\n      {/* Synthetic Face Plate */}\n      <mesh position={[0, 0, 1.1]}>\n        <planeGeometry args={[1.8, 2.2]} />\n        <meshStandardMaterial\n          color=\"#e0e0e0\"\n          transparent\n          opacity={0.9}\n          roughness={0.05}\n          metalness={0.98}\n          emissive=\"#ff0000\"\n          emissiveIntensity={0.2}\n        />\n      </mesh>\n\n      {/* Neural Circuit Patterns */}\n      {Array.from({ length: 6 }).map((_, i) => {\n        const angle = (i / 6) * Math.PI * 2;\n        const radius = 1.15;\n        const x = Math.cos(angle) * radius;\n        const z = Math.sin(angle) * radius;\n\n        return (\n          <mesh key={`circuit-${i}`} position={[x, 0, z]}>\n            <cylinderGeometry args={[0.02, 0.02, 0.3, 8]} />\n            <meshStandardMaterial\n              color=\"#ff0000\"\n              transparent\n              opacity={0.8}\n              emissive=\"#ff0000\"\n              emissiveIntensity={0.6 + Math.sin(Date.now() * 0.003 + i) * 0.3}\n            />\n          </mesh>\n        );\n      })}\n\n      {/* Outer Synthetic Ring */}\n      <mesh ref={outerRingRef}>\n        <torusGeometry args={[2.5, 0.1, 8, 32]} />\n        <meshStandardMaterial\n          color=\"#808080\" // Chrome\n          transparent\n          opacity={0.8}\n          roughness={0.1}\n          metalness={0.9}\n          emissive=\"#ff0000\"\n          emissiveIntensity={0.4 + neuralPulse * 0.3}\n        />\n      </mesh>\n\n      {/* Inner Execution Ring */}\n      <mesh ref={innerRingRef}>\n        <torusGeometry args={[1.8, 0.08, 6, 24]} />\n        <meshStandardMaterial\n          color=\"#a0a0a0\" // Lighter chrome\n          transparent\n          opacity={0.7}\n          roughness={0.05}\n          metalness={0.95}\n          emissive=\"#ff3333\"\n          emissiveIntensity={0.3 + neuralPulse * 0.4}\n        />\n      </mesh>\n\n      {/* Synthetic Execution Nodes */}\n      {Array.from({ length: 8 }).map((_, i) => {\n        const angle = (i / 8) * Math.PI * 2;\n        const radius = 3;\n        const x = Math.cos(angle) * radius;\n        const z = Math.sin(angle) * radius;\n\n        return (\n          <mesh key={i} position={[x, Math.sin(Date.now() * 0.001 + i) * 0.5, z]}>\n            <octahedronGeometry args={[0.08]} />\n            <meshStandardMaterial\n              color=\"#c0c0c0\"\n              transparent\n              opacity={0.9}\n              roughness={0.1}\n              metalness={0.9}\n              emissive=\"#ff0000\"\n              emissiveIntensity={0.6 + Math.sin(Date.now() * 0.002 + i) * 0.4}\n            />\n          </mesh>\n        );\n      })}\n\n      {/* Execution Status Indicator */}\n      {isInCall && (\n        <mesh position={[0, 2, 0]}>\n          <octahedronGeometry args={[0.15]} />\n          <meshStandardMaterial\n            color=\"#ff0000\"\n            transparent\n            opacity={0.95}\n            roughness={0.1}\n            metalness={0.9}\n            emissive=\"#ff0000\"\n            emissiveIntensity={0.9}\n          />\n        </mesh>\n      )}\n\n      {/* Synthetic Voice Activity */}\n      {isInCall && audioActivity > 0.1 && (\n        <mesh position={[0, 2.5, 0]}>\n          <octahedronGeometry args={[0.1 + audioActivity * 0.2]} />\n          <meshStandardMaterial\n            color=\"#ff3333\"\n            transparent\n            opacity={0.8}\n            roughness={0.05}\n            metalness={0.95}\n            emissive=\"#ff3333\"\n            emissiveIntensity={0.7 + audioActivity * 0.5}\n          />\n        </mesh>\n      )}\n\n      {/* Synthetic Execution Pathways */}\n      {isActive && Array.from({ length: 12 }).map((_, i) => {\n        const angle = (i / 12) * Math.PI * 2;\n        const radius = 4;\n        const x = Math.cos(angle) * radius;\n        const z = Math.sin(angle) * radius;\n\n        return (\n          <mesh key={`pathway-${i}`} position={[x * 0.5, 0, z * 0.5]} rotation={[0, angle, 0]}>\n            <cylinderGeometry args={[0.02, 0.02, radius, 8]} />\n            <meshStandardMaterial\n              color=\"#808080\"\n              transparent\n              opacity={0.4}\n              roughness={0.1}\n              metalness={0.9}\n              emissive=\"#ff0000\"\n              emissiveIntensity={0.3}\n            />\n          </mesh>\n        );\n      })}\n\n      {/* SOVREN AI Label */}\n      <Text\n        position={[0, -2.5, 0]}\n        fontSize={0.3}\n        color={isInCall ? '#ff3333' : isActive ? '#ff6666' : '#ffffff'}\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/orbitron-bold.woff\"\n      >\n        SOVREN AI\n      </Text>\n\n      <Text\n        position={[0, -2.9, 0]}\n        fontSize={0.15}\n        color={isInCall ? '#ff6666' : isActive ? '#ff9999' : '#cccccc'}\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/orbitron-regular.woff\"\n      >\n        SYNTHETIC EXECUTION INTELLIGENCE\n      </Text>\n\n      {/* Status Indicators */}\n      {isHovered && (\n        <Text\n          position={[0, -3.3, 0]}\n          fontSize={0.12}\n          color=\"#ff6666\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          font=\"/fonts/orbitron-regular.woff\"\n        >\n          {isInCall ? 'EXECUTING' : isActive ? 'ONLINE' : 'CLICK TO ACTIVATE'}\n        </Text>\n      )}\n\n      {/* Synthetic Processing Indicator */}\n      {(isActive || isInCall) && (\n        <mesh position={[0, 1.5, 0]}>\n          <octahedronGeometry args={[0.08]} />\n          <meshStandardMaterial\n            color=\"#ff0000\"\n            transparent\n            opacity={0.9}\n            roughness={0.1}\n            metalness={0.9}\n            emissive=\"#ff0000\"\n            emissiveIntensity={0.7}\n          />\n        </mesh>\n      )}\n    </group>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1594, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1599, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/3d/ExecutiveCircle.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Group } from 'three';\nimport { ExecutiveAvatar } from './ExecutiveAvatar';\nimport { SOVRENAIAvatar } from './SOVRENAIAvatar';\n\n// Executive roles and their configurations\nconst EXECUTIVES = [\n  { id: 'sovren-ai', name: 'SOVREN AI', color: '#ff0000', position: 0 }, // Central AI system\n  { id: 'ceo', name: 'CEO', color: '#ef4444', position: 1 },\n  { id: 'cfo', name: 'CFO', color: '#10b981', position: 2 },\n  { id: 'cto', name: 'CTO', color: '#3b82f6', position: 3 },\n  { id: 'cmo', name: 'CMO', color: '#f59e0b', position: 4 },\n  { id: 'coo', name: 'COO', color: '#8b5cf6', position: 5 },\n  { id: 'chro', name: 'CHRO', color: '#ec4899', position: 6 },\n  { id: 'clo', name: 'CLO', color: '#06b6d4', position: 7 },\n  { id: 'cso', name: 'CSO', color: '#84cc16', position: 8 }\n];\n\nconst CIRCLE_RADIUS = 6;\n\nexport function ExecutiveCircle() {\n  const groupRef = useRef<Group>(null);\n  \n  // Calculate positions for executives in a circle\n  const executivePositions = useMemo(() => {\n    // Filter out SOVREN AI since it's in the center\n    const circleExecutives = EXECUTIVES.filter(exec => exec.id !== 'sovren-ai');\n    return circleExecutives.map((exec, index) => {\n      const angle = (index / circleExecutives.length) * Math.PI * 2;\n      const x = Math.cos(angle) * CIRCLE_RADIUS;\n      const z = Math.sin(angle) * CIRCLE_RADIUS;\n      return {\n        ...exec,\n        position: [x, 0, z] as [number, number, number],\n        rotation: [0, -angle + Math.PI, 0] as [number, number, number]\n      };\n    });\n  }, []);\n\n  // Gentle rotation animation\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.1) * 0.05;\n    }\n  });\n\n  return (\n    <group ref={groupRef}>\n      {/* Central Platform */}\n      <mesh position={[0, -0.5, 0]} castShadow receiveShadow>\n        <cylinderGeometry args={[CIRCLE_RADIUS + 1, CIRCLE_RADIUS + 1, 0.2, 32]} />\n        <meshStandardMaterial\n          color=\"#1e293b\"\n          transparent\n          opacity={0.6}\n          roughness={0.3}\n          metalness={0.7}\n        />\n      </mesh>\n      \n      {/* SOVREN AI Central Core */}\n      <SOVRENAIAvatar\n        position={[0, 1, 0]}\n        rotation={[0, 0, 0]}\n      />\n      \n      {/* Executive Avatars */}\n      {executivePositions.map((executive) => (\n        <ExecutiveAvatar\n          key={executive.id}\n          executive={executive}\n          position={executive.position}\n          rotation={executive.rotation}\n        />\n      ))}\n      \n      {/* Connection Lines to Center */}\n      {executivePositions.map((executive, index) => (\n        <group key={`connection-${executive.id}`}>\n          <mesh\n            position={[\n              executive.position[0] / 2,\n              0.1,\n              executive.position[2] / 2\n            ]}\n            rotation={[0, Math.atan2(executive.position[2], executive.position[0]), 0]}\n          >\n            <cylinderGeometry args={[0.01, 0.01, CIRCLE_RADIUS, 8]} />\n            <meshStandardMaterial\n              color={executive.color}\n              transparent\n              opacity={0.3}\n              emissive={executive.color}\n              emissiveIntensity={0.1}\n            />\n          </mesh>\n        </group>\n      ))}\n    </group>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1833, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1838, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/3d/HolographicDisplay.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Text, Plane } from '@react-three/drei';\nimport { Group } from 'three';\n\nexport function HolographicDisplay() {\n  const groupRef = useRef<Group>(null);\n\n  // Gentle floating animation\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.2 + 3;\n      groupRef.current.rotation.y = state.clock.elapsedTime * 0.1;\n    }\n  });\n\n  return (\n    <group ref={groupRef} position={[0, 3, 0]}>\n      {/* Main Holographic Panel */}\n      <Plane args={[4, 2]} position={[0, 0, 0]}>\n        <meshStandardMaterial\n          color=\"#0ea5e9\"\n          transparent\n          opacity={0.1}\n          emissive=\"#0ea5e9\"\n          emissiveIntensity={0.2}\n        />\n      </Plane>\n      \n      {/* Holographic Border */}\n      <mesh position={[0, 0, 0.01]}>\n        <planeGeometry args={[4.1, 2.1]} />\n        <meshBasicMaterial\n          color=\"#0ea5e9\"\n          transparent\n          opacity={0.3}\n          wireframe\n        />\n      </mesh>\n      \n      {/* System Status Text */}\n      <Text\n        position={[0, 0.5, 0.02]}\n        fontSize={0.15}\n        color=\"#0ea5e9\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/orbitron-var.woff2\"\n      >\n        SOVREN AI EXECUTIVE COMMAND CENTER\n      </Text>\n      \n      <Text\n        position={[0, 0.2, 0.02]}\n        fontSize={0.08}\n        color=\"#64748b\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        font=\"/fonts/jetbrains-mono-var.woff2\"\n      >\n        Neural War Terminal v1.0 - Reality Transcending OS\n      </Text>\n      \n      {/* Status Indicators */}\n      <Text\n        position={[-1.5, -0.2, 0.02]}\n        fontSize={0.06}\n        color=\"#10b981\"\n        anchorX=\"left\"\n        anchorY=\"middle\"\n        font=\"/fonts/jetbrains-mono-var.woff2\"\n      >\n        ● EXECUTIVES: 8/8 ACTIVE\n      </Text>\n      \n      <Text\n        position={[-1.5, -0.4, 0.02]}\n        fontSize={0.06}\n        color=\"#f59e0b\"\n        anchorX=\"left\"\n        anchorY=\"middle\"\n        font=\"/fonts/jetbrains-mono-var.woff2\"\n      >\n        ● NEURAL ACTIVITY: 87%\n      </Text>\n      \n      <Text\n        position={[-1.5, -0.6, 0.02]}\n        fontSize={0.06}\n        color=\"#3b82f6\"\n        anchorX=\"left\"\n        anchorY=\"middle\"\n        font=\"/fonts/jetbrains-mono-var.woff2\"\n      >\n        ● QUANTUM CORES: ONLINE\n      </Text>\n      \n      <Text\n        position={[0.5, -0.2, 0.02]}\n        fontSize={0.06}\n        color=\"#ec4899\"\n        anchorX=\"left\"\n        anchorY=\"middle\"\n        font=\"/fonts/jetbrains-mono-var.woff2\"\n      >\n        ● VOICE SYNTHESIS: READY\n      </Text>\n      \n      <Text\n        position={[0.5, -0.4, 0.02]}\n        fontSize={0.06}\n        color=\"#8b5cf6\"\n        anchorX=\"left\"\n        anchorY=\"middle\"\n        font=\"/fonts/jetbrains-mono-var.woff2\"\n      >\n        ● CRM INTEGRATION: SYNCED\n      </Text>\n      \n      <Text\n        position={[0.5, -0.6, 0.02]}\n        fontSize={0.06}\n        color=\"#06b6d4\"\n        anchorX=\"left\"\n        anchorY=\"middle\"\n        font=\"/fonts/jetbrains-mono-var.woff2\"\n      >\n        ● APPROVAL ENGINE: ACTIVE\n      </Text>\n      \n      {/* Floating Data Streams */}\n      <DataStream position={[-6, 2, 0]} />\n      <DataStream position={[6, 1, 0]} />\n      <DataStream position={[0, -2, 4]} />\n    </group>\n  );\n}\n\nfunction DataStream({ position }: { position: [number, number, number] }) {\n  const streamRef = useRef<Group>(null);\n\n  useFrame((state) => {\n    if (streamRef.current) {\n      streamRef.current.rotation.z = state.clock.elapsedTime * 0.3;\n      streamRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 2) * 0.5;\n    }\n  });\n\n  return (\n    <group ref={streamRef} position={position}>\n      {/* Data Stream Particles */}\n      {[...Array(8)].map((_, i) => (\n        <mesh\n          key={i}\n          position={[\n            Math.cos((i / 8) * Math.PI * 2) * 0.5,\n            i * 0.2 - 0.8,\n            Math.sin((i / 8) * Math.PI * 2) * 0.5\n          ]}\n        >\n          <sphereGeometry args={[0.02, 8, 8]} />\n          <meshStandardMaterial\n            color=\"#0ea5e9\"\n            transparent\n            opacity={0.8}\n            emissive=\"#0ea5e9\"\n            emissiveIntensity={0.3}\n          />\n        </mesh>\n      ))}\n    </group>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;AAOO,SAAS;;IACd,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAS;IAE/B,4BAA4B;IAC5B,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;QACR,IAAI,SAAS,OAAO,EAAE;YACpB,SAAS,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,KAAK,CAAC,WAAW,GAAG,OAAO,MAAM;YAC9E,SAAS,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,WAAW,GAAG;QAC1D;IACF;IAEA,qBACE,6LAAC;QAAM,KAAK;QAAU,UAAU;YAAC;YAAG;YAAG;SAAE;;0BAEvC,6LAAC,6JAAA,CAAA,QAAK;gBAAC,MAAM;oBAAC;oBAAG;iBAAE;gBAAE,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;0BACtC,cAAA,6LAAC;oBACC,OAAM;oBACN,WAAW;oBACX,SAAS;oBACT,UAAS;oBACT,mBAAmB;;;;;;;;;;;0BAKvB,6LAAC;gBAAK,UAAU;oBAAC;oBAAG;oBAAG;iBAAK;;kCAC1B,6LAAC;wBAAc,MAAM;4BAAC;4BAAK;yBAAI;;;;;;kCAC/B,6LAAC;wBACC,OAAM;wBACN,WAAW;wBACX,SAAS;wBACT,SAAS;;;;;;;;;;;;0BAKb,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC;oBAAG;oBAAK;iBAAK;gBACxB,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAID,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC;oBAAG;oBAAK;iBAAK;gBACxB,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAKD,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC,CAAC;oBAAK,CAAC;oBAAK;iBAAK;gBAC5B,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAID,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC,CAAC;oBAAK,CAAC;oBAAK;iBAAK;gBAC5B,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAID,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC,CAAC;oBAAK,CAAC;oBAAK;iBAAK;gBAC5B,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAID,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC;oBAAK,CAAC;oBAAK;iBAAK;gBAC3B,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAID,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC;oBAAK,CAAC;oBAAK;iBAAK;gBAC3B,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAID,6LAAC,2JAAA,CAAA,OAAI;gBACH,UAAU;oBAAC;oBAAK,CAAC;oBAAK;iBAAK;gBAC3B,UAAU;gBACV,OAAM;gBACN,SAAQ;gBACR,SAAQ;gBACR,MAAK;0BACN;;;;;;0BAKD,6LAAC;gBAAW,UAAU;oBAAC,CAAC;oBAAG;oBAAG;iBAAE;;;;;;0BAChC,6LAAC;gBAAW,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;;;;;;0BAC/B,6LAAC;gBAAW,UAAU;oBAAC;oBAAG,CAAC;oBAAG;iBAAE;;;;;;;;;;;;AAGtC;GAnIgB;;QAId,kNAAA,CAAA,WAAQ;;;KAJM;AAqIhB,SAAS,WAAW,EAAE,QAAQ,EAA0C;;IACtE,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAS;IAEhC,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;QACR,IAAI,UAAU,OAAO,EAAE;YACrB,UAAU,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,WAAW,GAAG;YACzD,UAAU,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,MAAM,KAAK,CAAC,WAAW,GAAG,KAAK;QACvF;IACF;IAEA,qBACE,6LAAC;QAAM,KAAK;QAAW,UAAU;kBAE9B;eAAI,MAAM;SAAG,CAAC,GAAG,CAAC,CAAC,GAAG,kBACrB,6LAAC;gBAEC,UAAU;oBACR,KAAK,GAAG,CAAC,AAAC,IAAI,IAAK,KAAK,EAAE,GAAG,KAAK;oBAClC,IAAI,MAAM;oBACV,KAAK,GAAG,CAAC,AAAC,IAAI,IAAK,KAAK,EAAE,GAAG,KAAK;iBACnC;;kCAED,6LAAC;wBAAe,MAAM;4BAAC;4BAAM;4BAAG;yBAAE;;;;;;kCAClC,6LAAC;wBACC,OAAM;wBACN,WAAW;wBACX,SAAS;wBACT,UAAS;wBACT,mBAAmB;;;;;;;eAbhB;;;;;;;;;;AAmBf;IAlCS;;QAGP,kNAAA,CAAA,WAAQ;;;MAHD"}},
    {"offset": {"line": 2176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2181, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/3d/NeuralSky.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Points, PointMaterial } from '@react-three/drei';\nimport { BufferGeometry, Float32BufferAttribute } from 'three';\nimport * as THREE from 'three';\n\nexport function NeuralSky() {\n  const pointsRef = useRef<THREE.Points>(null);\n  \n  // Generate neural network points\n  const [positions, colors] = useMemo(() => {\n    const positions = new Float32Array(2000 * 3);\n    const colors = new Float32Array(2000 * 3);\n    \n    for (let i = 0; i < 2000; i++) {\n      // Create points in a sphere around the scene\n      const radius = 30 + Math.random() * 20;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n      \n      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i * 3 + 1] = radius * Math.cos(phi);\n      positions[i * 3 + 2] = radius * Math.sin(phi) * Math.sin(theta);\n      \n      // Neural network colors - blues and cyans\n      const colorIntensity = Math.random();\n      colors[i * 3] = 0.1 + colorIntensity * 0.3; // R\n      colors[i * 3 + 1] = 0.4 + colorIntensity * 0.4; // G\n      colors[i * 3 + 2] = 0.8 + colorIntensity * 0.2; // B\n    }\n    \n    return [positions, colors];\n  }, []);\n\n  // Create geometry with positions and colors\n  const geometry = useMemo(() => {\n    const geo = new BufferGeometry();\n    geo.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geo.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    return geo;\n  }, [positions, colors]);\n\n  // Animate the neural network\n  useFrame((state) => {\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y = state.clock.elapsedTime * 0.02;\n      pointsRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.01) * 0.1;\n    }\n  });\n\n  return (\n    <>\n      {/* Neural Network Points */}\n      <Points\n        ref={pointsRef}\n        geometry={geometry}\n        frustumCulled={false}\n      >\n        <PointMaterial\n          transparent\n          vertexColors\n          size={0.8}\n          sizeAttenuation={true}\n          depthWrite={false}\n          blending={THREE.AdditiveBlending}\n        />\n      </Points>\n      \n      {/* Connecting Neural Pathways */}\n      <NeuralConnections />\n    </>\n  );\n}\n\nfunction NeuralConnections() {\n  const linesRef = useRef<THREE.LineSegments>(null);\n  \n  const geometry = useMemo(() => {\n    const positions = [];\n    const colors = [];\n    \n    // Create some connecting lines between random points\n    for (let i = 0; i < 100; i++) {\n      // Random start point\n      const startRadius = 25 + Math.random() * 15;\n      const startTheta = Math.random() * Math.PI * 2;\n      const startPhi = Math.random() * Math.PI;\n      \n      const startX = startRadius * Math.sin(startPhi) * Math.cos(startTheta);\n      const startY = startRadius * Math.cos(startPhi);\n      const startZ = startRadius * Math.sin(startPhi) * Math.sin(startTheta);\n      \n      // Random end point\n      const endRadius = 25 + Math.random() * 15;\n      const endTheta = Math.random() * Math.PI * 2;\n      const endPhi = Math.random() * Math.PI;\n      \n      const endX = endRadius * Math.sin(endPhi) * Math.cos(endTheta);\n      const endY = endRadius * Math.cos(endPhi);\n      const endZ = endRadius * Math.sin(endPhi) * Math.sin(endTheta);\n      \n      positions.push(startX, startY, startZ);\n      positions.push(endX, endY, endZ);\n      \n      // Neural pathway colors\n      const intensity = Math.random() * 0.5 + 0.2;\n      colors.push(0.2 * intensity, 0.6 * intensity, 0.9 * intensity);\n      colors.push(0.2 * intensity, 0.6 * intensity, 0.9 * intensity);\n    }\n    \n    const geo = new BufferGeometry();\n    geo.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geo.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    \n    return geo;\n  }, []);\n\n  useFrame((state) => {\n    if (linesRef.current) {\n      linesRef.current.rotation.y = state.clock.elapsedTime * 0.01;\n    }\n  });\n\n  return (\n    <lineSegments ref={linesRef} geometry={geometry}>\n      <lineBasicMaterial\n        transparent\n        vertexColors\n        opacity={0.3}\n        blending={THREE.AdditiveBlending}\n      />\n    </lineSegments>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAQO,SAAS;;IACd,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAgB;IAEvC,iCAAiC;IACjC,MAAM,CAAC,WAAW,OAAO,GAAG,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD,EAAE;QAClC,MAAM,YAAY,IAAI,aAAa,OAAO;QAC1C,MAAM,SAAS,IAAI,aAAa,OAAO;QAEvC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;YAC7B,6CAA6C;YAC7C,MAAM,SAAS,KAAK,KAAK,MAAM,KAAK;YACpC,MAAM,QAAQ,KAAK,MAAM,KAAK,KAAK,EAAE,GAAG;YACxC,MAAM,MAAM,KAAK,MAAM,KAAK,KAAK,EAAE;YAEnC,SAAS,CAAC,IAAI,EAAE,GAAG,SAAS,KAAK,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC;YACrD,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,SAAS,KAAK,GAAG,CAAC;YACzC,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,SAAS,KAAK,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC;YAEzD,0CAA0C;YAC1C,MAAM,iBAAiB,KAAK,MAAM;YAClC,MAAM,CAAC,IAAI,EAAE,GAAG,MAAM,iBAAiB,KAAK,IAAI;YAChD,MAAM,CAAC,IAAI,IAAI,EAAE,GAAG,MAAM,iBAAiB,KAAK,IAAI;YACpD,MAAM,CAAC,IAAI,IAAI,EAAE,GAAG,MAAM,iBAAiB,KAAK,IAAI;QACtD;QAEA,OAAO;YAAC;YAAW;SAAO;IAC5B,GAAG,EAAE;IAEL,4CAA4C;IAC5C,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD,EAAE;QACvB,MAAM,MAAM,IAAI,oJAAA,CAAA,iBAAc;QAC9B,IAAI,YAAY,CAAC,YAAY,IAAI,oJAAA,CAAA,yBAAsB,CAAC,WAAW;QACnE,IAAI,YAAY,CAAC,SAAS,IAAI,oJAAA,CAAA,yBAAsB,CAAC,QAAQ;QAC7D,OAAO;IACT,GAAG;QAAC;QAAW;KAAO;IAEtB,6BAA6B;IAC7B,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;QACR,IAAI,UAAU,OAAO,EAAE;YACrB,UAAU,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,WAAW,GAAG;YACzD,UAAU,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,KAAK,CAAC,WAAW,GAAG,QAAQ;QAC5E;IACF;IAEA,qBACE;;0BAEE,6LAAC,6JAAA,CAAA,SAAM;gBACL,KAAK;gBACL,UAAU;gBACV,eAAe;0BAEf,cAAA,6LAAC,oKAAA,CAAA,gBAAa;oBACZ,WAAW;oBACX,YAAY;oBACZ,MAAM;oBACN,iBAAiB;oBACjB,YAAY;oBACZ,UAAU,qJAAM,gBAAgB;;;;;;;;;;;0BAKpC,6LAAC;;;;;;;AAGP;GAlEgB;;QAqCd,kNAAA,CAAA,WAAQ;;;KArCM;AAoEhB,SAAS;;IACP,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAsB;IAE5C,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD,EAAE;QACvB,MAAM,YAAY,EAAE;QACpB,MAAM,SAAS,EAAE;QAEjB,qDAAqD;QACrD,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;YAC5B,qBAAqB;YACrB,MAAM,cAAc,KAAK,KAAK,MAAM,KAAK;YACzC,MAAM,aAAa,KAAK,MAAM,KAAK,KAAK,EAAE,GAAG;YAC7C,MAAM,WAAW,KAAK,MAAM,KAAK,KAAK,EAAE;YAExC,MAAM,SAAS,cAAc,KAAK,GAAG,CAAC,YAAY,KAAK,GAAG,CAAC;YAC3D,MAAM,SAAS,cAAc,KAAK,GAAG,CAAC;YACtC,MAAM,SAAS,cAAc,KAAK,GAAG,CAAC,YAAY,KAAK,GAAG,CAAC;YAE3D,mBAAmB;YACnB,MAAM,YAAY,KAAK,KAAK,MAAM,KAAK;YACvC,MAAM,WAAW,KAAK,MAAM,KAAK,KAAK,EAAE,GAAG;YAC3C,MAAM,SAAS,KAAK,MAAM,KAAK,KAAK,EAAE;YAEtC,MAAM,OAAO,YAAY,KAAK,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC;YACrD,MAAM,OAAO,YAAY,KAAK,GAAG,CAAC;YAClC,MAAM,OAAO,YAAY,KAAK,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC;YAErD,UAAU,IAAI,CAAC,QAAQ,QAAQ;YAC/B,UAAU,IAAI,CAAC,MAAM,MAAM;YAE3B,wBAAwB;YACxB,MAAM,YAAY,KAAK,MAAM,KAAK,MAAM;YACxC,OAAO,IAAI,CAAC,MAAM,WAAW,MAAM,WAAW,MAAM;YACpD,OAAO,IAAI,CAAC,MAAM,WAAW,MAAM,WAAW,MAAM;QACtD;QAEA,MAAM,MAAM,IAAI,oJAAA,CAAA,iBAAc;QAC9B,IAAI,YAAY,CAAC,YAAY,IAAI,oJAAA,CAAA,yBAAsB,CAAC,WAAW;QACnE,IAAI,YAAY,CAAC,SAAS,IAAI,oJAAA,CAAA,yBAAsB,CAAC,QAAQ;QAE7D,OAAO;IACT,GAAG,EAAE;IAEL,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;QACR,IAAI,SAAS,OAAO,EAAE;YACpB,SAAS,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,WAAW,GAAG;QAC1D;IACF;IAEA,qBACE,6LAAC;QAAa,KAAK;QAAU,UAAU;kBACrC,cAAA,6LAAC;YACC,WAAW;YACX,YAAY;YACZ,SAAS;YACT,UAAU,qJAAM,gBAAgB;;;;;;;;;;;AAIxC;IA3DS;;QA2CP,kNAAA,CAAA,WAAQ;;;MA3CD"}},
    {"offset": {"line": 2346, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2351, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/3d/CommandBridge.tsx"],"sourcesContent":["'use client';\n\nimport React, { Suspense } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment, PerspectiveCamera } from '@react-three/drei';\nimport { ExecutiveCircle } from './ExecutiveCircle';\nimport { HolographicDisplay } from './HolographicDisplay';\nimport { NeuralSky } from './NeuralSky';\nimport { LoadingScreen } from '../ui/LoadingScreen';\n\nexport function CommandBridge() {\n  return (\n    <div className=\"absolute inset-0 w-full h-full\">\n      <Canvas\n        shadows\n        dpr={[1, 2]}\n        gl={{ \n          antialias: true, \n          alpha: true,\n          powerPreference: 'high-performance'\n        }}\n        className=\"bg-transparent\"\n      >\n        {/* Camera Setup */}\n        <PerspectiveCamera\n          makeDefault\n          position={[0, 8, 12]}\n          fov={60}\n          near={0.1}\n          far={1000}\n        />\n        \n        {/* Controls */}\n        <OrbitControls\n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          minDistance={5}\n          maxDistance={50}\n          minPolarAngle={Math.PI / 6}\n          maxPolarAngle={Math.PI / 2}\n          target={[0, 0, 0]}\n        />\n        \n        {/* Lighting Setup */}\n        <ambientLight intensity={0.2} color=\"#1e293b\" />\n        <directionalLight\n          position={[10, 10, 5]}\n          intensity={0.5}\n          color=\"#64748b\"\n          castShadow\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n        />\n        <pointLight\n          position={[0, 5, 0]}\n          intensity={0.3}\n          color=\"#0ea5e9\"\n          distance={20}\n        />\n        \n        {/* Environment */}\n        <Environment preset=\"night\" />\n        \n        {/* Neural Sky Background */}\n        <Suspense fallback={null}>\n          <NeuralSky />\n        </Suspense>\n        \n        {/* Executive Circle - Main focal point */}\n        <Suspense fallback={null}>\n          <ExecutiveCircle />\n        </Suspense>\n        \n        {/* Holographic Data Displays */}\n        <Suspense fallback={null}>\n          <HolographicDisplay />\n        </Suspense>\n        \n        {/* Ground Plane */}\n        <mesh\n          rotation={[-Math.PI / 2, 0, 0]}\n          position={[0, -2, 0]}\n          receiveShadow\n        >\n          <planeGeometry args={[50, 50]} />\n          <meshStandardMaterial\n            color=\"#0f172a\"\n            transparent\n            opacity={0.3}\n            roughness={0.8}\n            metalness={0.2}\n          />\n        </mesh>\n      </Canvas>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;AAUO,SAAS;IACd,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,sMAAA,CAAA,SAAM;YACL,OAAO;YACP,KAAK;gBAAC;gBAAG;aAAE;YACX,IAAI;gBACF,WAAW;gBACX,OAAO;gBACP,iBAAiB;YACnB;YACA,WAAU;;8BAGV,6LAAC,wKAAA,CAAA,oBAAiB;oBAChB,WAAW;oBACX,UAAU;wBAAC;wBAAG;wBAAG;qBAAG;oBACpB,KAAK;oBACL,MAAM;oBACN,KAAK;;;;;;8BAIP,6LAAC,oKAAA,CAAA,gBAAa;oBACZ,WAAW;oBACX,YAAY;oBACZ,cAAc;oBACd,aAAa;oBACb,aAAa;oBACb,eAAe,KAAK,EAAE,GAAG;oBACzB,eAAe,KAAK,EAAE,GAAG;oBACzB,QAAQ;wBAAC;wBAAG;wBAAG;qBAAE;;;;;;8BAInB,6LAAC;oBAAa,WAAW;oBAAK,OAAM;;;;;;8BACpC,6LAAC;oBACC,UAAU;wBAAC;wBAAI;wBAAI;qBAAE;oBACrB,WAAW;oBACX,OAAM;oBACN,UAAU;oBACV,wBAAsB;oBACtB,yBAAuB;;;;;;8BAEzB,6LAAC;oBACC,UAAU;wBAAC;wBAAG;wBAAG;qBAAE;oBACnB,WAAW;oBACX,OAAM;oBACN,UAAU;;;;;;8BAIZ,6LAAC,kKAAA,CAAA,cAAW;oBAAC,QAAO;;;;;;8BAGpB,6LAAC,6JAAA,CAAA,WAAQ;oBAAC,UAAU;8BAClB,cAAA,6LAAC,wIAAA,CAAA,YAAS;;;;;;;;;;8BAIZ,6LAAC,6JAAA,CAAA,WAAQ;oBAAC,UAAU;8BAClB,cAAA,6LAAC,8IAAA,CAAA,kBAAe;;;;;;;;;;8BAIlB,6LAAC,6JAAA,CAAA,WAAQ;oBAAC,UAAU;8BAClB,cAAA,6LAAC,iJAAA,CAAA,qBAAkB;;;;;;;;;;8BAIrB,6LAAC;oBACC,UAAU;wBAAC,CAAC,KAAK,EAAE,GAAG;wBAAG;wBAAG;qBAAE;oBAC9B,UAAU;wBAAC;wBAAG,CAAC;wBAAG;qBAAE;oBACpB,aAAa;;sCAEb,6LAAC;4BAAc,MAAM;gCAAC;gCAAI;6BAAG;;;;;;sCAC7B,6LAAC;4BACC,OAAM;4BACN,WAAW;4BACX,SAAS;4BACT,WAAW;4BACX,WAAW;;;;;;;;;;;;;;;;;;;;;;;AAMvB;KAvFgB"}},
    {"offset": {"line": 2557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2562, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/panels/ApprovalQueue.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\n\ninterface ApprovalItem {\n  id: string;\n  title: string;\n  description: string;\n  amount?: number;\n  urgency: 'low' | 'medium' | 'high' | 'critical';\n  requestedBy: string;\n  timestamp: Date;\n}\n\nconst mockApprovals: ApprovalItem[] = [\n  {\n    id: '1',\n    title: 'Marketing Campaign Budget',\n    description: 'Q4 digital marketing campaign approval',\n    amount: 50000,\n    urgency: 'high',\n    requestedBy: 'CMO',\n    timestamp: new Date(Date.now() - 1000 * 60 * 30) // 30 minutes ago\n  },\n  {\n    id: '2',\n    title: 'New Hire Authorization',\n    description: 'Senior Developer position approval',\n    urgency: 'medium',\n    requestedBy: 'CTO',\n    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2) // 2 hours ago\n  },\n  {\n    id: '3',\n    title: 'Equipment Purchase',\n    description: 'Server infrastructure upgrade',\n    amount: 25000,\n    urgency: 'critical',\n    requestedBy: 'CTO',\n    timestamp: new Date(Date.now() - 1000 * 60 * 15) // 15 minutes ago\n  }\n];\n\nexport function ApprovalQueue() {\n  const [approvals, setApprovals] = useState(mockApprovals);\n\n  const handleApproval = (id: string, approved: boolean) => {\n    setApprovals(prev => prev.filter(item => item.id !== id));\n    // Here you would typically send the approval to your backend\n    console.log(`Approval ${id} ${approved ? 'approved' : 'rejected'}`);\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'critical': return 'text-red-400 bg-red-400/20';\n      case 'high': return 'text-orange-400 bg-orange-400/20';\n      case 'medium': return 'text-yellow-400 bg-yellow-400/20';\n      case 'low': return 'text-green-400 bg-green-400/20';\n      default: return 'text-neural-400 bg-neural-400/20';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ago`;\n    } else {\n      return `${minutes}m ago`;\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      {approvals.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <div className=\"text-neural-400 text-sm\">No pending approvals</div>\n          <div className=\"text-xs text-neural-500 mt-1\">All caught up! 🎉</div>\n        </div>\n      ) : (\n        approvals.map((approval) => (\n          <div\n            key={approval.id}\n            className=\"bg-neural-700/50 rounded-lg p-3 border border-neural-600/30\"\n          >\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex-1\">\n                <h4 className=\"text-sm font-medium text-neural-100 mb-1\">\n                  {approval.title}\n                </h4>\n                <p className=\"text-xs text-neural-300 mb-2\">\n                  {approval.description}\n                </p>\n                \n                <div className=\"flex items-center space-x-2 text-xs\">\n                  <span className={`px-2 py-1 rounded-full ${getUrgencyColor(approval.urgency)}`}>\n                    {approval.urgency.toUpperCase()}\n                  </span>\n                  <span className=\"text-neural-400\">\n                    by {approval.requestedBy}\n                  </span>\n                  <span className=\"text-neural-500\">\n                    {formatTimeAgo(approval.timestamp)}\n                  </span>\n                </div>\n                \n                {approval.amount && (\n                  <div className=\"mt-2 text-sm font-mono text-neural-200\">\n                    ${approval.amount.toLocaleString()}\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-2 mt-3\">\n              <button\n                onClick={() => handleApproval(approval.id, true)}\n                className=\"flex-1 bg-green-600/20 hover:bg-green-600/30 text-green-400 text-xs py-2 px-3 rounded transition-colors\"\n              >\n                ✓ Approve\n              </button>\n              <button\n                onClick={() => handleApproval(approval.id, false)}\n                className=\"flex-1 bg-red-600/20 hover:bg-red-600/30 text-red-400 text-xs py-2 px-3 rounded transition-colors\"\n              >\n                ✗ Reject\n              </button>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAcA,MAAM,gBAAgC;IACpC;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,SAAS;QACT,aAAa;QACb,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,IAAI,iBAAiB;IACpE;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,SAAS;QACT,aAAa;QACb,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,KAAK,GAAG,cAAc;IACrE;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,SAAS;QACT,aAAa;QACb,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,IAAI,iBAAiB;IACpE;CACD;AAEM,SAAS;;IACd,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,iBAAiB,CAAC,IAAY;QAClC,aAAa,CAAA,OAAQ,KAAK,MAAM,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;QACrD,6DAA6D;QAC7D,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,WAAW,aAAa,WAAW,CAAC;IACpE;IAEA,MAAM,kBAAkB,CAAC;QACvB,OAAQ;YACN,KAAK;gBAAY,OAAO;YACxB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAO,OAAO;YACnB;gBAAS,OAAO;QAClB;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,MAAM,MAAM,IAAI;QAChB,MAAM,OAAO,IAAI,OAAO,KAAK,UAAU,OAAO;QAC9C,MAAM,UAAU,KAAK,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;QAC5C,MAAM,QAAQ,KAAK,KAAK,CAAC,UAAU;QAEnC,IAAI,QAAQ,GAAG;YACb,OAAO,CAAC,EAAE,MAAM,KAAK,CAAC;QACxB,OAAO;YACL,OAAO,CAAC,EAAE,QAAQ,KAAK,CAAC;QAC1B;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACZ,UAAU,MAAM,KAAK,kBACpB,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;8BAA0B;;;;;;8BACzC,6LAAC;oBAAI,WAAU;8BAA+B;;;;;;;;;;;mBAGhD,UAAU,GAAG,CAAC,CAAC,yBACb,6LAAC;gBAEC,WAAU;;kCAEV,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CACX,SAAS,KAAK;;;;;;8CAEjB,6LAAC;oCAAE,WAAU;8CACV,SAAS,WAAW;;;;;;8CAGvB,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAW,CAAC,uBAAuB,EAAE,gBAAgB,SAAS,OAAO,EAAE,CAAC;sDAC3E,SAAS,OAAO,CAAC,WAAW;;;;;;sDAE/B,6LAAC;4CAAK,WAAU;;gDAAkB;gDAC5B,SAAS,WAAW;;;;;;;sDAE1B,6LAAC;4CAAK,WAAU;sDACb,cAAc,SAAS,SAAS;;;;;;;;;;;;gCAIpC,SAAS,MAAM,kBACd,6LAAC;oCAAI,WAAU;;wCAAyC;wCACpD,SAAS,MAAM,CAAC,cAAc;;;;;;;;;;;;;;;;;;kCAMxC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCACC,SAAS,IAAM,eAAe,SAAS,EAAE,EAAE;gCAC3C,WAAU;0CACX;;;;;;0CAGD,6LAAC;gCACC,SAAS,IAAM,eAAe,SAAS,EAAE,EAAE;gCAC3C,WAAU;0CACX;;;;;;;;;;;;;eA1CE,SAAS,EAAE;;;;;;;;;;AAmD5B;GA7FgB;KAAA"}},
    {"offset": {"line": 2784, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2789, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/panels/ActiveCallsPanel.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useVoiceSystemContext } from '@/components/providers/Providers';\nimport { CallSession } from '@/lib/voice/SIPClient';\n\ninterface ActiveCall {\n  id: string;\n  executive: string;\n  contact: string;\n  duration: number;\n  status: 'active' | 'on-hold' | 'transferring';\n  type: 'inbound' | 'outbound';\n}\n\nconst mockCalls: ActiveCall[] = [\n  {\n    id: '1',\n    executive: 'CEO',\n    contact: 'John Smith - Acme Corp',\n    duration: 0,\n    status: 'active',\n    type: 'inbound'\n  }\n];\n\nexport function ActiveCallsPanel() {\n  const voiceSystem = useVoiceSystemContext();\n  const [callDurations, setCallDurations] = useState<Map<string, number>>(new Map());\n\n  // Update call durations every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCallDurations(prev => {\n        const newDurations = new Map(prev);\n        voiceSystem.activeCalls.forEach(call => {\n          const currentDuration = Math.floor((Date.now() - call.startTime.getTime()) / 1000);\n          newDurations.set(call.id, currentDuration);\n        });\n        return newDurations;\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [voiceSystem.activeCalls]);\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-400 bg-green-400/20';\n      case 'on-hold': return 'text-yellow-400 bg-yellow-400/20';\n      case 'transferring': return 'text-blue-400 bg-blue-400/20';\n      default: return 'text-neural-400 bg-neural-400/20';\n    }\n  };\n\n  const handleEndCall = async (sessionId: string) => {\n    try {\n      await voiceSystem.endCall(sessionId);\n    } catch (error) {\n      console.error('Failed to end call:', error);\n    }\n  };\n\n  const handleHoldCall = (sessionId: string) => {\n    // In a real implementation, this would pause/resume the call\n    console.log('Hold/Resume call:', sessionId);\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      {voiceSystem.activeCalls.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <div className=\"text-neural-400 text-sm\">No active calls</div>\n          <div className=\"text-xs text-neural-500 mt-1\">All executives available</div>\n        </div>\n      ) : (\n        voiceSystem.activeCalls.map((call) => (\n          <div\n            key={call.id}\n            className=\"bg-neural-700/50 rounded-lg p-3 border border-neural-600/30\"\n          >\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <span className=\"text-sm font-medium text-neural-100\">\n                    {call.executive.toUpperCase()}\n                  </span>\n                  <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(call.state)}`}>\n                    {call.state.toUpperCase()}\n                  </span>\n                </div>\n\n                <p className=\"text-xs text-neural-300 mb-2\">\n                  {call.remoteUri}\n                </p>\n\n                <div className=\"flex items-center space-x-2 text-xs\">\n                  <span className={`px-2 py-1 rounded ${\n                    call.isInbound ? 'bg-blue-400/20 text-blue-400' : 'bg-purple-400/20 text-purple-400'\n                  }`}>\n                    {call.isInbound ? '📞 IN' : '📱 OUT'}\n                  </span>\n                  <span className=\"text-neural-400 font-mono\">\n                    {formatDuration(callDurations.get(call.id) || 0)}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-2 mt-3\">\n              <button\n                onClick={() => handleHoldCall(call.id)}\n                className=\"flex-1 bg-yellow-600/20 hover:bg-yellow-600/30 text-yellow-400 text-xs py-2 px-3 rounded transition-colors\"\n              >\n                ⏸ Hold\n              </button>\n              <button\n                onClick={() => handleEndCall(call.id)}\n                className=\"flex-1 bg-red-600/20 hover:bg-red-600/30 text-red-400 text-xs py-2 px-3 rounded transition-colors\"\n              >\n                📞 End\n              </button>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3009, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3014, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/panels/ResourceMonitor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\n\ninterface ResourceMetrics {\n  cpu: number;\n  memory: number;\n  gpu: number;\n  network: number;\n  storage: number;\n}\n\ninterface ExecutiveLoad {\n  name: string;\n  load: number;\n  status: 'idle' | 'processing' | 'busy' | 'overloaded';\n}\n\nexport function ResourceMonitor() {\n  const [metrics, setMetrics] = useState<ResourceMetrics>({\n    cpu: 23,\n    memory: 45,\n    gpu: 67,\n    network: 12,\n    storage: 34\n  });\n\n  const [executiveLoads, setExecutiveLoads] = useState<ExecutiveLoad[]>([\n    { name: 'CEO', load: 45, status: 'processing' },\n    { name: 'CFO', load: 23, status: 'idle' },\n    { name: 'CTO', load: 78, status: 'busy' },\n    { name: 'CMO', load: 56, status: 'processing' },\n    { name: 'COO', load: 34, status: 'idle' },\n    { name: 'CHRO', load: 67, status: 'processing' },\n    { name: 'CLO', load: 12, status: 'idle' },\n    { name: 'CSO', load: 89, status: 'busy' }\n  ]);\n\n  // Simulate real-time metrics updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => ({\n        cpu: Math.max(10, Math.min(90, prev.cpu + (Math.random() - 0.5) * 10)),\n        memory: Math.max(20, Math.min(80, prev.memory + (Math.random() - 0.5) * 8)),\n        gpu: Math.max(30, Math.min(95, prev.gpu + (Math.random() - 0.5) * 12)),\n        network: Math.max(5, Math.min(50, prev.network + (Math.random() - 0.5) * 15)),\n        storage: Math.max(20, Math.min(70, prev.storage + (Math.random() - 0.5) * 5))\n      }));\n\n      setExecutiveLoads(prev => prev.map(exec => {\n        const newLoad = Math.max(0, Math.min(100, exec.load + (Math.random() - 0.5) * 20));\n        let status: ExecutiveLoad['status'] = 'idle';\n        \n        if (newLoad > 80) status = 'overloaded';\n        else if (newLoad > 60) status = 'busy';\n        else if (newLoad > 30) status = 'processing';\n        else status = 'idle';\n\n        return { ...exec, load: newLoad, status };\n      }));\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'idle': return 'text-green-400';\n      case 'processing': return 'text-blue-400';\n      case 'busy': return 'text-yellow-400';\n      case 'overloaded': return 'text-red-400';\n      default: return 'text-neural-400';\n    }\n  };\n\n  const getLoadBarColor = (load: number) => {\n    if (load > 80) return 'bg-red-400';\n    if (load > 60) return 'bg-yellow-400';\n    if (load > 30) return 'bg-blue-400';\n    return 'bg-green-400';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* System Resources */}\n      <div>\n        <h4 className=\"text-sm font-medium text-neural-200 mb-3\">System Resources</h4>\n        <div className=\"space-y-2\">\n          {Object.entries(metrics).map(([key, value]) => (\n            <div key={key} className=\"flex items-center justify-between\">\n              <span className=\"text-xs text-neural-300 capitalize w-16\">\n                {key}:\n              </span>\n              <div className=\"flex-1 mx-2\">\n                <div className=\"w-full bg-neural-700 rounded-full h-2\">\n                  <div\n                    className={`h-2 rounded-full transition-all duration-500 ${getLoadBarColor(value)}`}\n                    style={{ width: `${value}%` }}\n                  />\n                </div>\n              </div>\n              <span className=\"text-xs text-neural-400 font-mono w-8 text-right\">\n                {value.toFixed(0)}%\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Executive Load Distribution */}\n      <div>\n        <h4 className=\"text-sm font-medium text-neural-200 mb-3\">Executive Load</h4>\n        <div className=\"space-y-2\">\n          {executiveLoads.map((exec) => (\n            <div key={exec.name} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2 w-16\">\n                <span className=\"text-xs text-neural-300\">\n                  {exec.name}:\n                </span>\n              </div>\n              <div className=\"flex-1 mx-2\">\n                <div className=\"w-full bg-neural-700 rounded-full h-2\">\n                  <div\n                    className={`h-2 rounded-full transition-all duration-500 ${getLoadBarColor(exec.load)}`}\n                    style={{ width: `${exec.load}%` }}\n                  />\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs text-neural-400 font-mono w-8 text-right\">\n                  {exec.load.toFixed(0)}%\n                </span>\n                <div className={`w-2 h-2 rounded-full ${getStatusColor(exec.status).replace('text-', 'bg-')}`} />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-2 gap-2 pt-2 border-t border-neural-700/50\">\n        <div className=\"text-center\">\n          <div className=\"text-xs text-neural-400\">Avg Load</div>\n          <div className=\"text-sm font-mono text-neural-200\">\n            {(executiveLoads.reduce((sum, exec) => sum + exec.load, 0) / executiveLoads.length).toFixed(0)}%\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-xs text-neural-400\">Active</div>\n          <div className=\"text-sm font-mono text-neural-200\">\n            {executiveLoads.filter(exec => exec.status !== 'idle').length}/8\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3379, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3384, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/panels/VoiceControlPanel.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { useVoiceSystemContext } from '@/components/providers/Providers';\n\nexport function VoiceControlPanel() {\n  const voiceSystem = useVoiceSystemContext();\n  const [selectedExecutive, setSelectedExecutive] = useState('ceo');\n  const [callTarget, setCallTarget] = useState('');\n  const [speechText, setSpeechText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleMakeCall = async () => {\n    if (!callTarget.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      const sessionId = await voiceSystem.makeCall(callTarget, selectedExecutive);\n      console.log('Call initiated:', sessionId);\n    } catch (error) {\n      console.error('Failed to make call:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSpeak = async () => {\n    if (!speechText.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      await voiceSystem.speakAsExecutive(selectedExecutive, speechText, 'normal');\n      setSpeechText('');\n    } catch (error) {\n      console.error('Failed to synthesize speech:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDemoCall = async () => {\n    setIsLoading(true);\n    try {\n      // Simulate a demo call\n      const demoUri = 'sip:demo@sovren.ai';\n      const sessionId = await voiceSystem.makeCall(demoUri, selectedExecutive, \n        `Hello, this is ${selectedExecutive.toUpperCase()} from SOVREN AI. This is a demonstration of our neural voice system.`\n      );\n      console.log('Demo call initiated:', sessionId);\n    } catch (error) {\n      console.error('Failed to make demo call:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const quickMessages = [\n    'Neural pathways are active and ready for processing.',\n    'All systems operational. Standing by for executive commands.',\n    'SOVREN AI Executive Command Center is fully online.',\n    'Ready to transcend conventional business operations.',\n    'Quantum processing cores are synchronized and optimal.'\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* System Status */}\n      <div className=\"bg-neural-700/30 rounded-lg p-3 border border-neural-600/30\">\n        <h4 className=\"text-sm font-medium text-neural-200 mb-2\">Voice System Status</h4>\n        <div className=\"space-y-1 text-xs\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-neural-400\">Initialized:</span>\n            <span className={voiceSystem.isInitialized ? 'text-green-400' : 'text-red-400'}>\n              {voiceSystem.isInitialized ? '✓ Online' : '✗ Offline'}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-neural-400\">SIP Status:</span>\n            <span className={`${\n              voiceSystem.status.sipStatus === 'connected' ? 'text-green-400' : \n              voiceSystem.status.sipStatus === 'connecting' ? 'text-yellow-400' : 'text-red-400'\n            }`}>\n              {voiceSystem.status.sipStatus.toUpperCase()}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-neural-400\">Synthesis:</span>\n            <span className={`${\n              voiceSystem.status.synthesisStatus === 'ready' ? 'text-green-400' : \n              voiceSystem.status.synthesisStatus === 'loading' ? 'text-yellow-400' : 'text-red-400'\n            }`}>\n              {voiceSystem.status.synthesisStatus.toUpperCase()}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-neural-400\">Active Calls:</span>\n            <span className=\"text-neural-200\">{voiceSystem.status.activeCalls}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Executive Selection */}\n      <div>\n        <label className=\"block text-xs text-neural-400 mb-2\">Select Executive</label>\n        <select\n          value={selectedExecutive}\n          onChange={(e) => setSelectedExecutive(e.target.value)}\n          className=\"w-full bg-neural-700/50 border border-neural-600/30 rounded px-3 py-2 text-sm text-neural-200 focus:outline-none focus:border-neural-400\"\n        >\n          {voiceSystem.executives.map((exec) => (\n            <option key={exec.id} value={exec.id}>\n              {exec.role} - {exec.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Voice Synthesis */}\n      <div>\n        <label className=\"block text-xs text-neural-400 mb-2\">Voice Synthesis</label>\n        <div className=\"space-y-2\">\n          <textarea\n            value={speechText}\n            onChange={(e) => setSpeechText(e.target.value)}\n            placeholder=\"Enter text for the executive to speak...\"\n            className=\"w-full bg-neural-700/50 border border-neural-600/30 rounded px-3 py-2 text-sm text-neural-200 placeholder-neural-500 focus:outline-none focus:border-neural-400 resize-none\"\n            rows={3}\n          />\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handleSpeak}\n              disabled={!speechText.trim() || isLoading || !voiceSystem.isInitialized}\n              className=\"flex-1 bg-blue-600/20 hover:bg-blue-600/30 disabled:bg-neural-700/30 disabled:text-neural-500 text-blue-400 text-xs py-2 px-3 rounded transition-colors\"\n            >\n              {isLoading ? '🔄 Speaking...' : '🎤 Speak'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Messages */}\n      <div>\n        <label className=\"block text-xs text-neural-400 mb-2\">Quick Messages</label>\n        <div className=\"space-y-1\">\n          {quickMessages.map((message, index) => (\n            <button\n              key={index}\n              onClick={() => setSpeechText(message)}\n              className=\"w-full text-left bg-neural-700/30 hover:bg-neural-600/30 text-xs text-neural-300 p-2 rounded transition-colors\"\n            >\n              {message}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Call Controls */}\n      <div>\n        <label className=\"block text-xs text-neural-400 mb-2\">Call Controls</label>\n        <div className=\"space-y-2\">\n          <input\n            type=\"text\"\n            value={callTarget}\n            onChange={(e) => setCallTarget(e.target.value)}\n            placeholder=\"sip:user@domain.com\"\n            className=\"w-full bg-neural-700/50 border border-neural-600/30 rounded px-3 py-2 text-sm text-neural-200 placeholder-neural-500 focus:outline-none focus:border-neural-400\"\n          />\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handleMakeCall}\n              disabled={!callTarget.trim() || isLoading || !voiceSystem.isInitialized}\n              className=\"flex-1 bg-green-600/20 hover:bg-green-600/30 disabled:bg-neural-700/30 disabled:text-neural-500 text-green-400 text-xs py-2 px-3 rounded transition-colors\"\n            >\n              {isLoading ? '🔄 Calling...' : '📞 Call'}\n            </button>\n            <button\n              onClick={handleDemoCall}\n              disabled={isLoading || !voiceSystem.isInitialized}\n              className=\"flex-1 bg-purple-600/20 hover:bg-purple-600/30 disabled:bg-neural-700/30 disabled:text-neural-500 text-purple-400 text-xs py-2 px-3 rounded transition-colors\"\n            >\n              {isLoading ? '🔄 Demo...' : '🎭 Demo'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {voiceSystem.error && (\n        <div className=\"bg-red-600/20 border border-red-600/30 rounded-lg p-3\">\n          <div className=\"text-xs text-red-400 font-medium mb-1\">System Error</div>\n          <div className=\"text-xs text-red-300\">{voiceSystem.error}</div>\n        </div>\n      )}\n\n      {/* Available Executives */}\n      <div>\n        <label className=\"block text-xs text-neural-400 mb-2\">\n          Available Executives ({voiceSystem.availableExecutives.length}/8)\n        </label>\n        <div className=\"grid grid-cols-2 gap-1\">\n          {voiceSystem.executives.map((exec) => {\n            const isAvailable = voiceSystem.availableExecutives.some(ae => ae.id === exec.id);\n            return (\n              <div\n                key={exec.id}\n                className={`text-xs p-2 rounded ${\n                  isAvailable \n                    ? 'bg-green-600/20 text-green-400' \n                    : 'bg-red-600/20 text-red-400'\n                }`}\n              >\n                <div className=\"font-medium\">{exec.role}</div>\n                <div className=\"text-xs opacity-75\">\n                  {isAvailable ? 'Available' : 'Busy'}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;AAKO,SAAS;;IACd,MAAM,cAAc,CAAA,GAAA,+IAAA,CAAA,wBAAqB,AAAD;IACxC,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,iBAAiB;QACrB,IAAI,CAAC,WAAW,IAAI,IAAI;QAExB,aAAa;QACb,IAAI;YACF,MAAM,YAAY,MAAM,YAAY,QAAQ,CAAC,YAAY;YACzD,QAAQ,GAAG,CAAC,mBAAmB;QACjC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;QACxC,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,cAAc;QAClB,IAAI,CAAC,WAAW,IAAI,IAAI;QAExB,aAAa;QACb,IAAI;YACF,MAAM,YAAY,gBAAgB,CAAC,mBAAmB,YAAY;YAClE,cAAc;QAChB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;QAChD,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,iBAAiB;QACrB,aAAa;QACb,IAAI;YACF,uBAAuB;YACvB,MAAM,UAAU;YAChB,MAAM,YAAY,MAAM,YAAY,QAAQ,CAAC,SAAS,mBACpD,CAAC,eAAe,EAAE,kBAAkB,WAAW,GAAG,oEAAoE,CAAC;YAEzH,QAAQ,GAAG,CAAC,wBAAwB;QACtC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6BAA6B;QAC7C,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,gBAAgB;QACpB;QACA;QACA;QACA;QACA;KACD;IAED,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAA2C;;;;;;kCACzD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAK,WAAU;kDAAkB;;;;;;kDAClC,6LAAC;wCAAK,WAAW,YAAY,aAAa,GAAG,mBAAmB;kDAC7D,YAAY,aAAa,GAAG,aAAa;;;;;;;;;;;;0CAG9C,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAK,WAAU;kDAAkB;;;;;;kDAClC,6LAAC;wCAAK,WAAW,CAAC,EAChB,YAAY,MAAM,CAAC,SAAS,KAAK,cAAc,mBAC/C,YAAY,MAAM,CAAC,SAAS,KAAK,eAAe,oBAAoB,eACrE,CAAC;kDACC,YAAY,MAAM,CAAC,SAAS,CAAC,WAAW;;;;;;;;;;;;0CAG7C,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAK,WAAU;kDAAkB;;;;;;kDAClC,6LAAC;wCAAK,WAAW,CAAC,EAChB,YAAY,MAAM,CAAC,eAAe,KAAK,UAAU,mBACjD,YAAY,MAAM,CAAC,eAAe,KAAK,YAAY,oBAAoB,eACxE,CAAC;kDACC,YAAY,MAAM,CAAC,eAAe,CAAC,WAAW;;;;;;;;;;;;0CAGnD,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAK,WAAU;kDAAkB;;;;;;kDAClC,6LAAC;wCAAK,WAAU;kDAAmB,YAAY,MAAM,CAAC,WAAW;;;;;;;;;;;;;;;;;;;;;;;;0BAMvE,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;kCAAqC;;;;;;kCACtD,6LAAC;wBACC,OAAO;wBACP,UAAU,CAAC,IAAM,qBAAqB,EAAE,MAAM,CAAC,KAAK;wBACpD,WAAU;kCAET,YAAY,UAAU,CAAC,GAAG,CAAC,CAAC,qBAC3B,6LAAC;gCAAqB,OAAO,KAAK,EAAE;;oCACjC,KAAK,IAAI;oCAAC;oCAAI,KAAK,IAAI;;+BADb,KAAK,EAAE;;;;;;;;;;;;;;;;0BAQ1B,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;kCAAqC;;;;;;kCACtD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCACC,OAAO;gCACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;gCAC7C,aAAY;gCACZ,WAAU;gCACV,MAAM;;;;;;0CAER,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCACC,SAAS;oCACT,UAAU,CAAC,WAAW,IAAI,MAAM,aAAa,CAAC,YAAY,aAAa;oCACvE,WAAU;8CAET,YAAY,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;0BAOxC,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;kCAAqC;;;;;;kCACtD,6LAAC;wBAAI,WAAU;kCACZ,cAAc,GAAG,CAAC,CAAC,SAAS,sBAC3B,6LAAC;gCAEC,SAAS,IAAM,cAAc;gCAC7B,WAAU;0CAET;+BAJI;;;;;;;;;;;;;;;;0BAWb,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;kCAAqC;;;;;;kCACtD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCACC,MAAK;gCACL,OAAO;gCACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;gCAC7C,aAAY;gCACZ,WAAU;;;;;;0CAEZ,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCACC,SAAS;wCACT,UAAU,CAAC,WAAW,IAAI,MAAM,aAAa,CAAC,YAAY,aAAa;wCACvE,WAAU;kDAET,YAAY,kBAAkB;;;;;;kDAEjC,6LAAC;wCACC,SAAS;wCACT,UAAU,aAAa,CAAC,YAAY,aAAa;wCACjD,WAAU;kDAET,YAAY,eAAe;;;;;;;;;;;;;;;;;;;;;;;;YAOnC,YAAY,KAAK,kBAChB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCAAwC;;;;;;kCACvD,6LAAC;wBAAI,WAAU;kCAAwB,YAAY,KAAK;;;;;;;;;;;;0BAK5D,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;;4BAAqC;4BAC7B,YAAY,mBAAmB,CAAC,MAAM;4BAAC;;;;;;;kCAEhE,6LAAC;wBAAI,WAAU;kCACZ,YAAY,UAAU,CAAC,GAAG,CAAC,CAAC;4BAC3B,MAAM,cAAc,YAAY,mBAAmB,CAAC,IAAI,CAAC,CAAA,KAAM,GAAG,EAAE,KAAK,KAAK,EAAE;4BAChF,qBACE,6LAAC;gCAEC,WAAW,CAAC,oBAAoB,EAC9B,cACI,mCACA,6BACL,CAAC;;kDAEF,6LAAC;wCAAI,WAAU;kDAAe,KAAK,IAAI;;;;;;kDACvC,6LAAC;wCAAI,WAAU;kDACZ,cAAc,cAAc;;;;;;;+BAT1B,KAAK,EAAE;;;;;wBAalB;;;;;;;;;;;;;;;;;;AAKV;GAzNgB;;QACM,+IAAA,CAAA,wBAAqB;;;KAD3B"}},
    {"offset": {"line": 3858, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3863, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/panels/ControlPanels.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { ApprovalQueue } from './ApprovalQueue';\nimport { ActiveCallsPanel } from './ActiveCallsPanel';\nimport { ResourceMonitor } from './ResourceMonitor';\nimport { VoiceControlPanel } from './VoiceControlPanel';\n\nexport function ControlPanels() {\n  const [activePanel, setActivePanel] = useState<string | null>(null);\n\n  const panels = [\n    { id: 'voice', name: 'Voice Control', icon: '🎤', component: VoiceControlPanel },\n    { id: 'calls', name: 'Active Calls', icon: '📞', component: ActiveCallsPanel },\n    { id: 'approvals', name: 'Approvals', icon: '⚡', component: ApprovalQueue },\n    { id: 'resources', name: 'Resources', icon: '📊', component: ResourceMonitor }\n  ];\n\n  return (\n    <>\n      {/* Panel Toggle Buttons */}\n      <div className=\"absolute top-20 right-4 z-30 flex flex-col space-y-2\">\n        {panels.map((panel) => (\n          <button\n            key={panel.id}\n            onClick={() => setActivePanel(activePanel === panel.id ? null : panel.id)}\n            className={`w-12 h-12 rounded-lg backdrop-blur-sm border transition-all duration-200 ${\n              activePanel === panel.id\n                ? 'bg-neural-600/80 border-neural-400 text-neural-100'\n                : 'bg-neural-800/60 border-neural-700/50 text-neural-400 hover:bg-neural-700/60 hover:text-neural-300'\n            }`}\n            title={panel.name}\n          >\n            <span className=\"text-lg\">{panel.icon}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Active Panel */}\n      {activePanel && (\n        <div className=\"absolute top-20 right-20 z-20 w-80 max-h-96 bg-neural-800/90 backdrop-blur-sm rounded-lg border border-neural-700/50 shadow-xl\">\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-display text-neural-100\">\n                {panels.find(p => p.id === activePanel)?.name}\n              </h3>\n              <button\n                onClick={() => setActivePanel(null)}\n                className=\"text-neural-400 hover:text-neural-200 transition-colors\"\n              >\n                ✕\n              </button>\n            </div>\n            \n            <div className=\"max-h-80 overflow-y-auto\">\n              {(() => {\n                const Panel = panels.find(p => p.id === activePanel)?.component;\n                return Panel ? <Panel /> : null;\n              })()}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAQO,SAAS;;IACd,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAE9D,MAAM,SAAS;QACb;YAAE,IAAI;YAAS,MAAM;YAAiB,MAAM;YAAM,WAAW,oJAAA,CAAA,oBAAiB;QAAC;QAC/E;YAAE,IAAI;YAAS,MAAM;YAAgB,MAAM;YAAM,WAAW,mJAAA,CAAA,mBAAgB;QAAC;QAC7E;YAAE,IAAI;YAAa,MAAM;YAAa,MAAM;YAAK,WAAW,gJAAA,CAAA,gBAAa;QAAC;QAC1E;YAAE,IAAI;YAAa,MAAM;YAAa,MAAM;YAAM,WAAW,kJAAA,CAAA,kBAAe;QAAC;KAC9E;IAED,qBACE;;0BAEE,6LAAC;gBAAI,WAAU;0BACZ,OAAO,GAAG,CAAC,CAAC,sBACX,6LAAC;wBAEC,SAAS,IAAM,eAAe,gBAAgB,MAAM,EAAE,GAAG,OAAO,MAAM,EAAE;wBACxE,WAAW,CAAC,yEAAyE,EACnF,gBAAgB,MAAM,EAAE,GACpB,uDACA,qGACL,CAAC;wBACF,OAAO,MAAM,IAAI;kCAEjB,cAAA,6LAAC;4BAAK,WAAU;sCAAW,MAAM,IAAI;;;;;;uBAThC,MAAM,EAAE;;;;;;;;;;YAelB,6BACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CACX,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,cAAc;;;;;;8CAE3C,6LAAC;oCACC,SAAS,IAAM,eAAe;oCAC9B,WAAU;8CACX;;;;;;;;;;;;sCAKH,6LAAC;4BAAI,WAAU;sCACZ,CAAC;gCACA,MAAM,QAAQ,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,cAAc;gCACtD,OAAO,sBAAQ,6LAAC;;;;2CAAW;4BAC7B,CAAC;;;;;;;;;;;;;;;;;;;AAOf;GAzDgB;KAAA"}},
    {"offset": {"line": 4000, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4005, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/ui/LoadingScreen.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\n\nexport function LoadingScreen() {\n  return (\n    <div className=\"absolute inset-0 bg-neural-900 flex items-center justify-center z-50\">\n      <div className=\"text-center\">\n        {/* SOVREN Logo Animation */}\n        <div className=\"mb-8\">\n          <div className=\"relative w-20 h-20 mx-auto\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-neural-400 to-neural-600 rounded-xl animate-pulse-glow\" />\n            <div className=\"absolute inset-2 bg-neural-900 rounded-lg\" />\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"w-12 h-12 relative\">\n                {/* Animated neural network */}\n                <div className=\"absolute top-0 left-2 w-2 h-2 bg-neural-400 rounded-full animate-pulse\" />\n                <div className=\"absolute top-0 right-2 w-2 h-2 bg-neural-400 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }} />\n                <div className=\"absolute bottom-0 left-2 w-2 h-2 bg-neural-400 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }} />\n                <div className=\"absolute bottom-0 right-2 w-2 h-2 bg-neural-400 rounded-full animate-pulse\" style={{ animationDelay: '0.6s' }} />\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-3 h-3 bg-neural-300 rounded-full animate-pulse-glow\" />\n                \n                {/* Connecting lines */}\n                <svg className=\"absolute inset-0 w-full h-full\" viewBox=\"0 0 48 48\">\n                  <path\n                    d=\"M8 8 L24 24 L40 8 M8 40 L24 24 L40 40\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"1\"\n                    fill=\"none\"\n                    className=\"text-neural-500 animate-pulse\"\n                  />\n                </svg>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Loading Text */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-display text-neural-100 tracking-wider animate-pulse-glow\">\n            SOVREN AI\n          </h2>\n          <p className=\"text-neural-300 font-mono text-sm\">\n            Initializing Executive Command Center...\n          </p>\n          \n          {/* Loading Progress */}\n          <div className=\"w-64 mx-auto\">\n            <div className=\"flex justify-between text-xs text-neural-400 mb-2\">\n              <span>Neural Pathways</span>\n              <span>Loading...</span>\n            </div>\n            <div className=\"w-full bg-neural-800 rounded-full h-1\">\n              <div className=\"bg-gradient-to-r from-neural-400 to-neural-600 h-1 rounded-full animate-pulse\" style={{ width: '75%' }} />\n            </div>\n          </div>\n          \n          {/* Voice Wave Animation */}\n          <div className=\"flex justify-center space-x-1 mt-6\">\n            {[...Array(8)].map((_, i) => (\n              <div\n                key={i}\n                className=\"w-1 bg-neural-400 animate-voice-wave rounded-full\"\n                style={{\n                  height: `${Math.random() * 20 + 10}px`,\n                  animationDelay: `${i * 0.1}s`\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAIO,SAAS;IACd,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BAEb,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;;;;;0CACf,6LAAC;gCAAI,WAAU;;;;;;0CACf,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAI,WAAU;;sDAEb,6LAAC;4CAAI,WAAU;;;;;;sDACf,6LAAC;4CAAI,WAAU;4CAA0E,OAAO;gDAAE,gBAAgB;4CAAO;;;;;;sDACzH,6LAAC;4CAAI,WAAU;4CAA4E,OAAO;gDAAE,gBAAgB;4CAAO;;;;;;sDAC3H,6LAAC;4CAAI,WAAU;4CAA6E,OAAO;gDAAE,gBAAgB;4CAAO;;;;;;sDAC5H,6LAAC;4CAAI,WAAU;;;;;;sDAGf,6LAAC;4CAAI,WAAU;4CAAiC,SAAQ;sDACtD,cAAA,6LAAC;gDACC,GAAE;gDACF,QAAO;gDACP,aAAY;gDACZ,MAAK;gDACL,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAStB,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAA0E;;;;;;sCAGxF,6LAAC;4BAAE,WAAU;sCAAoC;;;;;;sCAKjD,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;sDAAK;;;;;;sDACN,6LAAC;sDAAK;;;;;;;;;;;;8CAER,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCAAI,WAAU;wCAAgF,OAAO;4CAAE,OAAO;wCAAM;;;;;;;;;;;;;;;;;sCAKzH,6LAAC;4BAAI,WAAU;sCACZ;mCAAI,MAAM;6BAAG,CAAC,GAAG,CAAC,CAAC,GAAG,kBACrB,6LAAC;oCAEC,WAAU;oCACV,OAAO;wCACL,QAAQ,CAAC,EAAE,KAAK,MAAM,KAAK,KAAK,GAAG,EAAE,CAAC;wCACtC,gBAAgB,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC;oCAC/B;mCALK;;;;;;;;;;;;;;;;;;;;;;;;;;;AAarB;KAtEgB"}},
    {"offset": {"line": 4236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4241, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/layout/CommandCenterLayout.tsx"],"sourcesContent":["'use client';\n\nimport React, { Suspense } from 'react';\nimport { Header } from './Header';\nimport { CommandBridge } from '../3d/CommandBridge';\nimport { ControlPanels } from '../panels/ControlPanels';\nimport { LoadingScreen } from '../ui/LoadingScreen';\n\nexport function CommandCenterLayout() {\n  return (\n    <div className=\"relative h-full w-full bg-neural-900 overflow-hidden\">\n      {/* Header with system status and user profile */}\n      <Header />\n      \n      {/* Main 3D Command Bridge Scene */}\n      <div className=\"relative flex-1 h-full\">\n        <Suspense fallback={<LoadingScreen />}>\n          <CommandBridge />\n        </Suspense>\n        \n        {/* Overlay Control Panels */}\n        <ControlPanels />\n      </div>\n      \n      {/* Neural Activity Indicator */}\n      <div className=\"absolute bottom-4 left-4 z-50\">\n        <div className=\"flex items-center space-x-2 bg-neural-800/80 backdrop-blur-sm rounded-lg px-3 py-2\">\n          <div className=\"w-2 h-2 bg-neural-400 rounded-full animate-pulse-glow\" />\n          <span className=\"text-neural-300 text-sm font-mono\">\n            NEURAL PATHWAYS ACTIVE\n          </span>\n        </div>\n      </div>\n      \n      {/* System Status Indicator */}\n      <div className=\"absolute bottom-4 right-4 z-50\">\n        <div className=\"flex items-center space-x-2 bg-neural-800/80 backdrop-blur-sm rounded-lg px-3 py-2\">\n          <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n          <span className=\"text-neural-300 text-sm font-mono\">\n            SOVREN AI ONLINE\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;;;AAQO,SAAS;IACd,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC,yIAAA,CAAA,SAAM;;;;;0BAGP,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,6JAAA,CAAA,WAAQ;wBAAC,wBAAU,6LAAC,4IAAA,CAAA,gBAAa;;;;;kCAChC,cAAA,6LAAC,4IAAA,CAAA,gBAAa;;;;;;;;;;kCAIhB,6LAAC,gJAAA,CAAA,gBAAa;;;;;;;;;;;0BAIhB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;;;;;sCACf,6LAAC;4BAAK,WAAU;sCAAoC;;;;;;;;;;;;;;;;;0BAOxD,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;;;;;sCACf,6LAAC;4BAAK,WAAU;sCAAoC;;;;;;;;;;;;;;;;;;;;;;;AAO9D;KArCgB"}},
    {"offset": {"line": 4369, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}