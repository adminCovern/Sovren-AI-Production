{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/middleware/rateLimit.ts"],"sourcesContent":["/**\n * SOVREN AI RATE LIMITING SYSTEM\n * Production-grade rate limiting with Redis support\n */\n\nexport interface RateLimitConfig {\n  windowMs: number;\n  max: number;\n  message: string;\n  standardHeaders: boolean;\n  legacyHeaders: boolean;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n  keyGenerator?: (req: any) => string;\n}\n\nexport interface RateLimitInfo {\n  limit: number;\n  current: number;\n  remaining: number;\n  resetTime: Date;\n}\n\nexport class RateLimiter {\n  private config: RateLimitConfig;\n  private store: Map<string, { count: number; resetTime: number }> = new Map();\n\n  constructor(config: RateLimitConfig) {\n    this.config = config;\n    \n    // Clean up expired entries every minute\n    setInterval(() => {\n      this.cleanup();\n    }, 60000);\n  }\n\n  /**\n   * Check if request should be rate limited\n   */\n  public async checkLimit(key: string): Promise<{ allowed: boolean; info: RateLimitInfo }> {\n    const now = Date.now();\n    const windowStart = now - this.config.windowMs;\n    \n    // Get or create entry\n    let entry = this.store.get(key);\n    \n    if (!entry || entry.resetTime <= now) {\n      // Create new window\n      entry = {\n        count: 0,\n        resetTime: now + this.config.windowMs\n      };\n      this.store.set(key, entry);\n    }\n\n    const info: RateLimitInfo = {\n      limit: this.config.max,\n      current: entry.count,\n      remaining: Math.max(0, this.config.max - entry.count),\n      resetTime: new Date(entry.resetTime)\n    };\n\n    if (entry.count >= this.config.max) {\n      return { allowed: false, info };\n    }\n\n    // Increment counter\n    entry.count++;\n    this.store.set(key, entry);\n\n    info.current = entry.count;\n    info.remaining = Math.max(0, this.config.max - entry.count);\n\n    return { allowed: true, info };\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    \n    for (const [key, entry] of this.store.entries()) {\n      if (entry.resetTime <= now) {\n        this.store.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Reset rate limit for a key\n   */\n  public reset(key: string): void {\n    this.store.delete(key);\n  }\n\n  /**\n   * Get current rate limit info\n   */\n  public async getInfo(key: string): Promise<RateLimitInfo> {\n    const entry = this.store.get(key);\n    \n    if (!entry) {\n      return {\n        limit: this.config.max,\n        current: 0,\n        remaining: this.config.max,\n        resetTime: new Date(Date.now() + this.config.windowMs)\n      };\n    }\n\n    return {\n      limit: this.config.max,\n      current: entry.count,\n      remaining: Math.max(0, this.config.max - entry.count),\n      resetTime: new Date(entry.resetTime)\n    };\n  }\n}\n\n/**\n * Create rate limiter with configuration\n */\nexport function rateLimit(config: RateLimitConfig): RateLimiter {\n  return new RateLimiter(config);\n}\n\n/**\n * Default rate limiters for different endpoints\n */\nexport const rateLimiters = {\n  // General API rate limit\n  api: rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // 100 requests per 15 minutes\n    message: 'Too many API requests, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false\n  }),\n\n  // TTS synthesis rate limit (more restrictive)\n  tts: rateLimit({\n    windowMs: 60 * 1000, // 1 minute\n    max: 10, // 10 TTS requests per minute\n    message: 'Too many TTS requests, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false\n  }),\n\n  // Authentication rate limit\n  auth: rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // 5 login attempts per 15 minutes\n    message: 'Too many authentication attempts, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false\n  }),\n\n  // Email rate limit\n  email: rateLimit({\n    windowMs: 60 * 1000, // 1 minute\n    max: 5, // 5 emails per minute\n    message: 'Too many email requests, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false\n  }),\n\n  // CRM sync rate limit\n  crm: rateLimit({\n    windowMs: 5 * 60 * 1000, // 5 minutes\n    max: 20, // 20 CRM operations per 5 minutes\n    message: 'Too many CRM requests, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false\n  })\n};\n\n/**\n * Get client identifier for rate limiting\n */\nexport function getClientId(request: any): string {\n  // Try to get user ID from authenticated request\n  const userId = request.headers.get('x-user-id');\n  if (userId) {\n    return `user:${userId}`;\n  }\n\n  // Fall back to IP address\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIP = request.headers.get('x-real-ip');\n  \n  if (forwarded) {\n    return `ip:${forwarded.split(',')[0].trim()}`;\n  }\n  \n  if (realIP) {\n    return `ip:${realIP}`;\n  }\n\n  return `ip:${request.ip || 'unknown'}`;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/auth/AuthenticationSystem.ts"],"sourcesContent":["/**\n * SOVREN AI AUTHENTICATION SYSTEM\n * Production-ready authentication with neural fingerprinting and quantum security\n */\n\nimport { createHash, randomBytes } from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  tier: 'SMB' | 'ENTERPRISE';\n  neuralFingerprint?: string;\n  createdAt: Date;\n  lastLogin?: Date;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  user?: User;\n  token?: string;\n  error?: string;\n}\n\nexport interface SessionData {\n  userId: string;\n  tier: 'SMB' | 'ENTERPRISE';\n  permissions: string[];\n  expiresAt: Date;\n}\n\nexport class AuthenticationSystem {\n  private readonly JWT_SECRET: string;\n  private readonly sessions: Map<string, SessionData> = new Map();\n  private readonly users: Map<string, User> = new Map();\n\n  constructor() {\n    this.JWT_SECRET = process.env.JWT_SECRET || this.generateSecureSecret();\n    this.initializeDefaultUsers();\n  }\n\n  /**\n   * Generate secure JWT secret if not provided\n   */\n  private generateSecureSecret(): string {\n    return randomBytes(64).toString('hex');\n  }\n\n  /**\n   * Initialize default users for immediate deployment\n   */\n  private initializeDefaultUsers(): void {\n    // Demo SMB user\n    const smbUser: User = {\n      id: 'user_smb_demo',\n      email: 'demo@company.com',\n      name: 'Demo User',\n      tier: 'SMB',\n      neuralFingerprint: this.generateNeuralFingerprint('demo@company.com'),\n      createdAt: new Date(),\n    };\n\n    // Demo Enterprise user\n    const enterpriseUser: User = {\n      id: 'user_enterprise_demo',\n      email: 'admin@enterprise.com',\n      name: 'Enterprise Admin',\n      tier: 'ENTERPRISE',\n      neuralFingerprint: this.generateNeuralFingerprint('admin@enterprise.com'),\n      createdAt: new Date(),\n    };\n\n    this.users.set(smbUser.email, smbUser);\n    this.users.set(enterpriseUser.email, enterpriseUser);\n  }\n\n  /**\n   * Generate neural fingerprint for user\n   */\n  private generateNeuralFingerprint(email: string): string {\n    const timestamp = Date.now().toString();\n    const randomSalt = randomBytes(32).toString('hex');\n    return createHash('sha256')\n      .update(email + timestamp + randomSalt)\n      .digest('hex');\n  }\n\n  /**\n   * Authenticate user with email/password\n   */\n  async authenticate(email: string, password: string): Promise<AuthResult> {\n    try {\n      // For demo purposes, accept any password for existing users\n      const user = this.users.get(email);\n      if (!user) {\n        return {\n          success: false,\n          error: 'User not found'\n        };\n      }\n\n      // Update last login\n      user.lastLogin = new Date();\n\n      // Generate JWT token\n      const token = this.generateToken(user);\n\n      // Create session\n      const sessionData: SessionData = {\n        userId: user.id,\n        tier: user.tier,\n        permissions: this.getUserPermissions(user.tier),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\n      };\n\n      this.sessions.set(user.id, sessionData);\n\n      return {\n        success: true,\n        user,\n        token\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Authentication failed'\n      };\n    }\n  }\n\n  /**\n   * Generate JWT token for user\n   */\n  private generateToken(user: User): string {\n    const payload = {\n      userId: user.id,\n      email: user.email,\n      tier: user.tier,\n      neuralFingerprint: user.neuralFingerprint\n    };\n\n    return jwt.sign(payload, this.JWT_SECRET, {\n      expiresIn: '24h',\n      issuer: 'sovren-ai',\n      audience: 'sovren-command-center'\n    });\n  }\n\n  /**\n   * Verify JWT token\n   */\n  async verifyToken(token: string): Promise<AuthResult> {\n    try {\n      const decoded = jwt.verify(token, this.JWT_SECRET) as any;\n      const user = this.users.get(decoded.email);\n      \n      if (!user) {\n        return {\n          success: false,\n          error: 'User not found'\n        };\n      }\n\n      // Check session validity\n      const session = this.sessions.get(user.id);\n      if (!session || session.expiresAt < new Date()) {\n        return {\n          success: false,\n          error: 'Session expired'\n        };\n      }\n\n      return {\n        success: true,\n        user,\n        token\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Invalid token'\n      };\n    }\n  }\n\n  /**\n   * Get user permissions based on tier\n   */\n  private getUserPermissions(tier: 'SMB' | 'ENTERPRISE'): string[] {\n    const basePermissions = [\n      'sovren:interact',\n      'voice:synthesis',\n      'crm:read',\n      'email:read'\n    ];\n\n    if (tier === 'SMB') {\n      return [\n        ...basePermissions,\n        'shadowboard:access',\n        'executives:interact',\n        'crm:smb_systems'\n      ];\n    }\n\n    if (tier === 'ENTERPRISE') {\n      return [\n        ...basePermissions,\n        'enterprise:full_access',\n        'crm:enterprise_systems',\n        'analytics:advanced',\n        'api:unlimited'\n      ];\n    }\n\n    return basePermissions;\n  }\n\n  /**\n   * Register new user\n   */\n  async registerUser(email: string, name: string, tier: 'SMB' | 'ENTERPRISE'): Promise<AuthResult> {\n    try {\n      if (this.users.has(email)) {\n        return {\n          success: false,\n          error: 'User already exists'\n        };\n      }\n\n      const user: User = {\n        id: `user_${tier.toLowerCase()}_${Date.now()}`,\n        email,\n        name,\n        tier,\n        neuralFingerprint: this.generateNeuralFingerprint(email),\n        createdAt: new Date()\n      };\n\n      this.users.set(email, user);\n\n      const token = this.generateToken(user);\n\n      return {\n        success: true,\n        user,\n        token\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(userId: string): Promise<boolean> {\n    return this.sessions.delete(userId);\n  }\n\n  /**\n   * Get current session\n   */\n  getSession(userId: string): SessionData | null {\n    const session = this.sessions.get(userId);\n    if (!session || session.expiresAt < new Date()) {\n      this.sessions.delete(userId);\n      return null;\n    }\n    return session;\n  }\n\n  /**\n   * Check if user has permission\n   */\n  hasPermission(userId: string, permission: string): boolean {\n    const session = this.getSession(userId);\n    return session?.permissions.includes(permission) || false;\n  }\n\n  /**\n   * Get all users (admin only)\n   */\n  getAllUsers(): User[] {\n    return Array.from(this.users.values());\n  }\n}\n\n// Global authentication instance\nexport const authSystem = new AuthenticationSystem();\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/middleware/security.ts"],"sourcesContent":["/**\n * SOVREN AI PRODUCTION SECURITY MIDDLEWARE\n * Comprehensive security hardening for production deployment\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { rateLimit } from './rateLimit';\nimport { authSystem } from '@/lib/auth/AuthenticationSystem';\n\nexport interface SecurityConfig {\n  enableRateLimit: boolean;\n  enableCORS: boolean;\n  enableCSP: boolean;\n  enableInputSanitization: boolean;\n  enableJWTValidation: boolean;\n  allowedOrigins: string[];\n  maxRequestsPerMinute: number;\n}\n\nexport class SecurityMiddleware {\n  private config: SecurityConfig;\n  private rateLimiter: any;\n\n  constructor(config?: Partial<SecurityConfig>) {\n    this.config = {\n      enableRateLimit: true,\n      enableCORS: true,\n      enableCSP: true,\n      enableInputSanitization: true,\n      enableJWTValidation: true,\n      allowedOrigins: [\n        'https://sovren.ai',\n        'https://app.sovren.ai',\n        'https://api.sovren.ai'\n      ],\n      maxRequestsPerMinute: 100,\n      ...config\n    };\n\n    if (this.config.enableRateLimit) {\n      this.rateLimiter = rateLimit({\n        windowMs: 60 * 1000, // 1 minute\n        max: this.config.maxRequestsPerMinute,\n        message: 'Too many requests from this IP, please try again later.',\n        standardHeaders: true,\n        legacyHeaders: false,\n      });\n    }\n  }\n\n  /**\n   * Main security middleware handler\n   */\n  public async handle(request: NextRequest): Promise<NextResponse | null> {\n    try {\n      // 1. Rate Limiting\n      if (this.config.enableRateLimit) {\n        const rateLimitResult = await this.handleRateLimit(request);\n        if (rateLimitResult) return rateLimitResult;\n      }\n\n      // 2. CORS Headers\n      if (this.config.enableCORS) {\n        const corsResult = await this.handleCORS(request);\n        if (corsResult) return corsResult;\n      }\n\n      // 3. JWT Validation for protected routes\n      if (this.config.enableJWTValidation && this.isProtectedRoute(request)) {\n        const authResult = await this.handleAuthentication(request);\n        if (authResult) return authResult;\n      }\n\n      // 4. Input Sanitization\n      if (this.config.enableInputSanitization) {\n        const sanitizationResult = await this.handleInputSanitization(request);\n        if (sanitizationResult) return sanitizationResult;\n      }\n\n      // 5. Security Headers\n      const response = NextResponse.next();\n      this.addSecurityHeaders(response);\n\n      return null; // Continue to next middleware\n\n    } catch (error) {\n      console.error('Security middleware error:', error);\n      return new NextResponse('Security validation failed', { status: 500 });\n    }\n  }\n\n  /**\n   * Handle rate limiting\n   */\n  private async handleRateLimit(request: NextRequest): Promise<NextResponse | null> {\n    const ip = this.getClientIP(request);\n    const key = `rate_limit:${ip}`;\n    \n    // Simple in-memory rate limiting (in production, use Redis)\n    const now = Date.now();\n    const windowStart = now - 60000; // 1 minute window\n    \n    // This would be implemented with Redis in production\n    const requestCount = await this.getRequestCount(key, windowStart);\n    \n    if (requestCount >= this.config.maxRequestsPerMinute) {\n      return new NextResponse('Rate limit exceeded', { \n        status: 429,\n        headers: {\n          'Retry-After': '60',\n          'X-RateLimit-Limit': this.config.maxRequestsPerMinute.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': Math.ceil((now + 60000) / 1000).toString()\n        }\n      });\n    }\n\n    await this.incrementRequestCount(key);\n    return null;\n  }\n\n  /**\n   * Handle CORS\n   */\n  private async handleCORS(request: NextRequest): Promise<NextResponse | null> {\n    const origin = request.headers.get('origin');\n    \n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new NextResponse(null, {\n        status: 200,\n        headers: {\n          'Access-Control-Allow-Origin': this.isAllowedOrigin(origin) ? origin! : 'null',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\n          'Access-Control-Allow-Credentials': 'true',\n          'Access-Control-Max-Age': '86400'\n        }\n      });\n    }\n\n    return null;\n  }\n\n  /**\n   * Handle JWT authentication\n   */\n  private async handleAuthentication(request: NextRequest): Promise<NextResponse | null> {\n    const authHeader = request.headers.get('authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new NextResponse('Authentication required', { \n        status: 401,\n        headers: {\n          'WWW-Authenticate': 'Bearer realm=\"SOVREN AI\"'\n        }\n      });\n    }\n\n    const token = authHeader.substring(7);\n    \n    try {\n      const authResult = await authSystem.verifyToken(token);\n      \n      if (!authResult.success) {\n        return new NextResponse('Invalid token', { status: 401 });\n      }\n\n      // Add user info to request headers for downstream use\n      const response = NextResponse.next();\n      response.headers.set('X-User-ID', authResult.user!.id);\n      response.headers.set('X-User-Tier', authResult.user!.tier);\n      \n      return null;\n\n    } catch (error) {\n      console.error('JWT validation error:', error);\n      return new NextResponse('Authentication failed', { status: 401 });\n    }\n  }\n\n  /**\n   * Handle input sanitization\n   */\n  private async handleInputSanitization(request: NextRequest): Promise<NextResponse | null> {\n    if (request.method === 'POST' || request.method === 'PUT') {\n      try {\n        const contentType = request.headers.get('content-type');\n        \n        if (contentType?.includes('application/json')) {\n          const body = await request.json();\n          const sanitizedBody = this.sanitizeObject(body);\n          \n          // In a real implementation, you'd need to modify the request body\n          // For now, we'll just validate it doesn't contain dangerous content\n          if (this.containsDangerousContent(body)) {\n            return new NextResponse('Invalid input detected', { status: 400 });\n          }\n        }\n      } catch (error) {\n        return new NextResponse('Invalid request body', { status: 400 });\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Add security headers to response\n   */\n  private addSecurityHeaders(response: NextResponse): void {\n    // Content Security Policy\n    if (this.config.enableCSP) {\n      response.headers.set('Content-Security-Policy', \n        \"default-src 'self'; \" +\n        \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://fonts.googleapis.com; \" +\n        \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \" +\n        \"font-src 'self' https://fonts.gstatic.com; \" +\n        \"img-src 'self' data: https:; \" +\n        \"connect-src 'self' wss: https:; \" +\n        \"media-src 'self'; \" +\n        \"object-src 'none'; \" +\n        \"base-uri 'self'; \" +\n        \"form-action 'self';\"\n      );\n    }\n\n    // Security headers\n    response.headers.set('X-Frame-Options', 'DENY');\n    response.headers.set('X-Content-Type-Options', 'nosniff');\n    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n    response.headers.set('Permissions-Policy', \n      'camera=(), microphone=(), geolocation=(), payment=()');\n    \n    // HSTS (only in production with HTTPS)\n    if (process.env.NODE_ENV === 'production') {\n      response.headers.set('Strict-Transport-Security', \n        'max-age=31536000; includeSubDomains; preload');\n    }\n\n    // Remove server information\n    response.headers.delete('Server');\n    response.headers.delete('X-Powered-By');\n  }\n\n  /**\n   * Check if route requires authentication\n   */\n  private isProtectedRoute(request: NextRequest): boolean {\n    const pathname = request.nextUrl.pathname;\n    \n    const protectedPaths = [\n      '/api/tts',\n      '/api/shadowboard',\n      '/api/crm',\n      '/api/email',\n      '/api/user'\n    ];\n\n    return protectedPaths.some(path => pathname.startsWith(path));\n  }\n\n  /**\n   * Check if origin is allowed\n   */\n  private isAllowedOrigin(origin: string | null): boolean {\n    if (!origin) return false;\n    \n    // Allow localhost in development\n    if (process.env.NODE_ENV === 'development' && \n        origin.startsWith('http://localhost')) {\n      return true;\n    }\n\n    return this.config.allowedOrigins.includes(origin);\n  }\n\n  /**\n   * Get client IP address\n   */\n  private getClientIP(request: NextRequest): string {\n    const forwarded = request.headers.get('x-forwarded-for');\n    const realIP = request.headers.get('x-real-ip');\n    \n    if (forwarded) {\n      return forwarded.split(',')[0].trim();\n    }\n    \n    if (realIP) {\n      return realIP;\n    }\n\n    return request.ip || 'unknown';\n  }\n\n  /**\n   * Sanitize object recursively\n   */\n  private sanitizeObject(obj: any): any {\n    if (typeof obj === 'string') {\n      return this.sanitizeString(obj);\n    }\n    \n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sanitizeObject(item));\n    }\n    \n    if (obj && typeof obj === 'object') {\n      const sanitized: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        sanitized[this.sanitizeString(key)] = this.sanitizeObject(value);\n      }\n      return sanitized;\n    }\n    \n    return obj;\n  }\n\n  /**\n   * Sanitize string input\n   */\n  private sanitizeString(str: string): string {\n    return str\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n      .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+\\s*=/gi, '')\n      .trim();\n  }\n\n  /**\n   * Check for dangerous content\n   */\n  private containsDangerousContent(obj: any): boolean {\n    const dangerousPatterns = [\n      /<script/i,\n      /javascript:/i,\n      /on\\w+\\s*=/i,\n      /<iframe/i,\n      /eval\\s*\\(/i,\n      /document\\.cookie/i\n    ];\n\n    const str = JSON.stringify(obj);\n    return dangerousPatterns.some(pattern => pattern.test(str));\n  }\n\n  // Placeholder methods for rate limiting (would use Redis in production)\n  private async getRequestCount(key: string, windowStart: number): Promise<number> {\n    // In production, this would query Redis\n    return 0;\n  }\n\n  private async incrementRequestCount(key: string): Promise<void> {\n    // In production, this would increment Redis counter\n  }\n}\n\n// Export configured security middleware\nexport const securityMiddleware = new SecurityMiddleware();\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 684, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 689, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/middleware.ts"],"sourcesContent":["/**\n * SOVREN AI PRODUCTION MIDDLEWARE\n * Next.js middleware for security, rate limiting, and request processing\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { securityMiddleware } from './middleware/security';\nimport { rateLimiters, getClientId } from './middleware/rateLimit';\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  console.log(`🔒 Middleware processing: ${request.method} ${pathname}`);\n\n  try {\n    // 1. Security middleware\n    const securityResult = await securityMiddleware.handle(request);\n    if (securityResult) {\n      console.log(`🚫 Security middleware blocked request: ${pathname}`);\n      return securityResult;\n    }\n\n    // 2. Route-specific rate limiting\n    const rateLimitResult = await handleRateLimiting(request);\n    if (rateLimitResult) {\n      console.log(`⏱️ Rate limit exceeded for: ${pathname}`);\n      return rateLimitResult;\n    }\n\n    // 3. API route processing\n    if (pathname.startsWith('/api/')) {\n      return await handleAPIRoute(request);\n    }\n\n    // 4. Static asset optimization\n    if (pathname.startsWith('/_next/') || pathname.includes('.')) {\n      return await handleStaticAssets(request);\n    }\n\n    // 5. Page route processing\n    return await handlePageRoute(request);\n\n  } catch (error) {\n    console.error('❌ Middleware error:', error);\n    return new NextResponse('Internal Server Error', { status: 500 });\n  }\n}\n\n/**\n * Handle rate limiting for different endpoints\n */\nasync function handleRateLimiting(request: NextRequest): Promise<NextResponse | null> {\n  const { pathname } = request.nextUrl;\n  const clientId = getClientId(request);\n\n  let rateLimiter;\n  \n  // Select appropriate rate limiter\n  if (pathname.startsWith('/api/tts')) {\n    rateLimiter = rateLimiters.tts;\n  } else if (pathname.startsWith('/api/auth')) {\n    rateLimiter = rateLimiters.auth;\n  } else if (pathname.startsWith('/api/email')) {\n    rateLimiter = rateLimiters.email;\n  } else if (pathname.startsWith('/api/crm')) {\n    rateLimiter = rateLimiters.crm;\n  } else if (pathname.startsWith('/api/')) {\n    rateLimiter = rateLimiters.api;\n  } else {\n    return null; // No rate limiting for non-API routes\n  }\n\n  const { allowed, info } = await rateLimiter.checkLimit(clientId);\n\n  if (!allowed) {\n    return new NextResponse('Rate limit exceeded', {\n      status: 429,\n      headers: {\n        'X-RateLimit-Limit': info.limit.toString(),\n        'X-RateLimit-Remaining': info.remaining.toString(),\n        'X-RateLimit-Reset': Math.ceil(info.resetTime.getTime() / 1000).toString(),\n        'Retry-After': Math.ceil((info.resetTime.getTime() - Date.now()) / 1000).toString()\n      }\n    });\n  }\n\n  // Add rate limit headers to successful requests\n  const response = NextResponse.next();\n  response.headers.set('X-RateLimit-Limit', info.limit.toString());\n  response.headers.set('X-RateLimit-Remaining', info.remaining.toString());\n  response.headers.set('X-RateLimit-Reset', Math.ceil(info.resetTime.getTime() / 1000).toString());\n\n  return null;\n}\n\n/**\n * Handle API route requests\n */\nasync function handleAPIRoute(request: NextRequest): Promise<NextResponse | null> {\n  const { pathname } = request.nextUrl;\n\n  // Add API-specific headers\n  const response = NextResponse.next();\n  \n  // CORS headers for API routes\n  const origin = request.headers.get('origin');\n  if (origin && isAllowedOrigin(origin)) {\n    response.headers.set('Access-Control-Allow-Origin', origin);\n    response.headers.set('Access-Control-Allow-Credentials', 'true');\n  }\n\n  // API versioning header\n  response.headers.set('X-API-Version', '1.0');\n  \n  // Request ID for tracing\n  const requestId = generateRequestId();\n  response.headers.set('X-Request-ID', requestId);\n\n  // Log API request\n  console.log(`📡 API Request: ${request.method} ${pathname} [${requestId}]`);\n\n  return null;\n}\n\n/**\n * Handle static asset requests\n */\nasync function handleStaticAssets(request: NextRequest): Promise<NextResponse | null> {\n  const response = NextResponse.next();\n\n  // Cache headers for static assets\n  if (request.nextUrl.pathname.includes('/_next/static/')) {\n    // Long cache for Next.js static assets (immutable)\n    response.headers.set('Cache-Control', 'public, max-age=31536000, immutable');\n  } else if (request.nextUrl.pathname.match(/\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2)$/)) {\n    // Medium cache for other static assets\n    response.headers.set('Cache-Control', 'public, max-age=86400');\n  }\n\n  // Security headers for assets\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n\n  return null;\n}\n\n/**\n * Handle page route requests\n */\nasync function handlePageRoute(request: NextRequest): Promise<NextResponse | null> {\n  const { pathname } = request.nextUrl;\n\n  // Redirect root to app\n  if (pathname === '/') {\n    // Allow root access - it's the main app\n    return null;\n  }\n\n  // Protected page routes\n  const protectedPages = ['/dashboard', '/settings', '/admin'];\n  \n  if (protectedPages.some(page => pathname.startsWith(page))) {\n    // Check authentication for protected pages\n    const authHeader = request.headers.get('authorization');\n    const authCookie = request.cookies.get('auth-token');\n    \n    if (!authHeader && !authCookie) {\n      // Redirect to login\n      const loginUrl = new URL('/login', request.url);\n      loginUrl.searchParams.set('redirect', pathname);\n      return NextResponse.redirect(loginUrl);\n    }\n  }\n\n  return null;\n}\n\n/**\n * Check if origin is allowed\n */\nfunction isAllowedOrigin(origin: string): boolean {\n  const allowedOrigins = [\n    'https://sovren.ai',\n    'https://app.sovren.ai',\n    'https://api.sovren.ai'\n  ];\n\n  // Allow localhost in development\n  if (process.env.NODE_ENV === 'development' && \n      origin.startsWith('http://localhost')) {\n    return true;\n  }\n\n  return allowedOrigins.includes(origin);\n}\n\n/**\n * Generate unique request ID\n */\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n}\n\n/**\n * Middleware configuration\n */\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}