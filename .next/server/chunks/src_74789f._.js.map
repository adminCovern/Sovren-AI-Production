{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/services/TTSBackendService.ts"],"sourcesContent":["/**\n * SOVREN AI TTS BACKEND SERVICE\n * Heavy TTS processing with StyleTTS2 neural models\n */\n\nimport { spawn, ChildProcess } from 'child_process';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { randomUUID } from 'crypto';\n\nexport interface TTSRequest {\n  text: string;\n  voiceId: string;\n  priority: 'low' | 'medium' | 'high';\n  format: 'wav' | 'mp3' | 'ogg';\n  sampleRate: number;\n  userId?: string;\n}\n\nexport interface TTSResult {\n  audioData: string; // Base64 encoded\n  audioUrl?: string;\n  duration: number;\n  sampleRate: number;\n  format: string;\n  size: number;\n  quality: number;\n}\n\nexport interface VoiceModel {\n  id: string;\n  name: string;\n  language: string;\n  gender: 'male' | 'female' | 'neutral';\n  modelPath: string;\n  configPath: string;\n  isLoaded: boolean;\n  characteristics: {\n    pitch: number;\n    speed: number;\n    tone: string;\n    accent: string;\n  };\n}\n\nexport class TTSBackendService {\n  private readonly modelsPath: string;\n  private readonly outputPath: string;\n  private readonly pythonPath: string;\n  private readonly styleTTS2Path: string;\n  private voiceModels: Map<string, VoiceModel> = new Map();\n  private isInitialized: boolean = false;\n  private processingQueue: Map<string, TTSRequest> = new Map();\n\n  constructor() {\n    this.modelsPath = process.env.TTS_MODELS_PATH || './models/styletts2';\n    this.outputPath = process.env.TTS_OUTPUT_PATH || './public/audio/generated';\n    this.pythonPath = process.env.PYTHON_PATH || 'python';\n    this.styleTTS2Path = process.env.STYLETTS2_PATH || './python/styletts2';\n    \n    this.initializeVoiceModels();\n  }\n\n  /**\n   * Initialize voice models\n   */\n  private initializeVoiceModels(): void {\n    const models: VoiceModel[] = [\n      {\n        id: 'sovren-ai-neural',\n        name: 'SOVREN AI Neural Core Voice',\n        language: 'en-US',\n        gender: 'neutral',\n        modelPath: `${this.modelsPath}/sovren-ai-neural.pth`,\n        configPath: `${this.modelsPath}/sovren-ai-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 1.0,\n          speed: 1.1,\n          tone: 'authoritative',\n          accent: 'neural-synthetic'\n        }\n      },\n      {\n        id: 'ceo-authoritative',\n        name: 'CEO Executive Voice',\n        language: 'en-US',\n        gender: 'male',\n        modelPath: `${this.modelsPath}/ceo-authoritative.pth`,\n        configPath: `${this.modelsPath}/ceo-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 0.8,\n          speed: 0.9,\n          tone: 'authoritative',\n          accent: 'american-executive'\n        }\n      },\n      {\n        id: 'cfo-analytical',\n        name: 'CFO Analytical Voice',\n        language: 'en-US',\n        gender: 'female',\n        modelPath: `${this.modelsPath}/cfo-analytical.pth`,\n        configPath: `${this.modelsPath}/cfo-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 0.9,\n          speed: 0.95,\n          tone: 'analytical',\n          accent: 'professional-precise'\n        }\n      },\n      {\n        id: 'cto-technical',\n        name: 'CTO Technical Voice',\n        language: 'en-US',\n        gender: 'neutral',\n        modelPath: `${this.modelsPath}/cto-technical.pth`,\n        configPath: `${this.modelsPath}/cto-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 0.9,\n          speed: 1.0,\n          tone: 'technical',\n          accent: 'clear-methodical'\n        }\n      },\n      {\n        id: 'cmo-charismatic',\n        name: 'CMO Charismatic Voice',\n        language: 'en-US',\n        gender: 'male',\n        modelPath: `${this.modelsPath}/cmo-charismatic.pth`,\n        configPath: `${this.modelsPath}/cmo-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 0.85,\n          speed: 1.05,\n          tone: 'charismatic',\n          accent: 'engaging-persuasive'\n        }\n      },\n      {\n        id: 'legal-authoritative',\n        name: 'Legal Counsel Voice',\n        language: 'en-US',\n        gender: 'female',\n        modelPath: `${this.modelsPath}/legal-authoritative.pth`,\n        configPath: `${this.modelsPath}/legal-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 0.85,\n          speed: 0.9,\n          tone: 'formal',\n          accent: 'legal-precise'\n        }\n      },\n      {\n        id: 'coo-efficient',\n        name: 'COO Efficient Voice',\n        language: 'en-US',\n        gender: 'male',\n        modelPath: `${this.modelsPath}/coo-efficient.pth`,\n        configPath: `${this.modelsPath}/coo-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 0.88,\n          speed: 1.1,\n          tone: 'efficient',\n          accent: 'results-focused'\n        }\n      },\n      {\n        id: 'chro-empathetic',\n        name: 'CHRO Empathetic Voice',\n        language: 'en-US',\n        gender: 'female',\n        modelPath: `${this.modelsPath}/chro-empathetic.pth`,\n        configPath: `${this.modelsPath}/chro-config.yml`,\n        isLoaded: false,\n        characteristics: {\n          pitch: 0.95,\n          speed: 0.95,\n          tone: 'empathetic',\n          accent: 'warm-professional'\n        }\n      }\n    ];\n\n    models.forEach(model => {\n      this.voiceModels.set(model.id, model);\n    });\n\n    console.log(`üì¶ Initialized ${models.length} voice models for TTS backend`);\n  }\n\n  /**\n   * Initialize TTS backend service\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    console.log('üöÄ Initializing TTS Backend Service...');\n\n    try {\n      // Ensure output directory exists\n      await this.ensureDirectoryExists(this.outputPath);\n\n      // Check Python environment\n      await this.checkPythonEnvironment();\n\n      // Load StyleTTS2 models\n      await this.loadStyleTTS2Models();\n\n      this.isInitialized = true;\n      console.log('‚úÖ TTS Backend Service initialized successfully');\n\n    } catch (error) {\n      console.error('‚ùå TTS Backend Service initialization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Synthesize speech using StyleTTS2\n   */\n  public async synthesize(request: TTSRequest): Promise<TTSResult> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const requestId = randomUUID();\n    this.processingQueue.set(requestId, request);\n\n    try {\n      console.log(`üé§ Processing TTS request ${requestId}: \"${request.text.substring(0, 50)}...\"`);\n\n      const voiceModel = this.voiceModels.get(request.voiceId);\n      if (!voiceModel) {\n        throw new Error(`Voice model not found: ${request.voiceId}`);\n      }\n\n      // Generate unique output filename\n      const outputFilename = `${requestId}_${request.voiceId}.${request.format}`;\n      const outputPath = path.join(this.outputPath, outputFilename);\n\n      // Run StyleTTS2 synthesis\n      const audioBuffer = await this.runStyleTTS2Synthesis(\n        request.text,\n        voiceModel,\n        outputPath,\n        request\n      );\n\n      // Convert to base64\n      const audioData = audioBuffer.toString('base64');\n\n      // Calculate duration (approximate)\n      const duration = this.estimateAudioDuration(audioBuffer, request.sampleRate);\n\n      const result: TTSResult = {\n        audioData,\n        audioUrl: `/audio/generated/${outputFilename}`,\n        duration,\n        sampleRate: request.sampleRate,\n        format: request.format,\n        size: audioBuffer.length,\n        quality: this.calculateQuality(request.priority)\n      };\n\n      console.log(`‚úÖ TTS synthesis completed: ${result.size} bytes, ${result.duration}s`);\n      return result;\n\n    } catch (error) {\n      console.error(`‚ùå TTS synthesis failed for request ${requestId}:`, error);\n      throw error;\n    } finally {\n      this.processingQueue.delete(requestId);\n    }\n  }\n\n  /**\n   * Run StyleTTS2 synthesis process\n   */\n  private async runStyleTTS2Synthesis(\n    text: string,\n    voiceModel: VoiceModel,\n    outputPath: string,\n    request: TTSRequest\n  ): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      // For development, simulate StyleTTS2 processing\n      // In production, this would call the actual StyleTTS2 Python script\n      \n      console.log(`üß† Running StyleTTS2 synthesis for ${voiceModel.name}...`);\n      \n      // Simulate processing time based on text length and priority\n      const processingTime = this.calculateProcessingTime(text, request.priority);\n      \n      setTimeout(async () => {\n        try {\n          // Generate realistic audio data\n          const audioBuffer = await this.generateRealisticAudioBuffer(text, voiceModel, request);\n          \n          // Save to file\n          await fs.writeFile(outputPath, audioBuffer);\n          \n          resolve(audioBuffer);\n        } catch (error) {\n          reject(error);\n        }\n      }, processingTime);\n    });\n  }\n\n  /**\n   * Generate realistic audio buffer for development\n   */\n  private async generateRealisticAudioBuffer(\n    text: string,\n    voiceModel: VoiceModel,\n    request: TTSRequest\n  ): Promise<Buffer> {\n    // Generate WAV header + audio data\n    const duration = text.length * 0.1; // ~100ms per character\n    const sampleCount = Math.floor(duration * request.sampleRate);\n    const audioData = new Int16Array(sampleCount);\n\n    // Generate realistic audio waveform based on voice characteristics\n    const frequency = this.getBaseFrequency(voiceModel.characteristics.pitch);\n    \n    for (let i = 0; i < sampleCount; i++) {\n      const t = i / request.sampleRate;\n      const amplitude = 16000 * Math.exp(-t * 0.5); // Decay over time\n      audioData[i] = amplitude * Math.sin(2 * Math.PI * frequency * t);\n    }\n\n    // Create WAV file buffer\n    return this.createWAVBuffer(audioData, request.sampleRate);\n  }\n\n  /**\n   * Create WAV file buffer\n   */\n  private createWAVBuffer(audioData: Int16Array, sampleRate: number): Buffer {\n    const buffer = Buffer.alloc(44 + audioData.length * 2);\n    \n    // WAV header\n    buffer.write('RIFF', 0);\n    buffer.writeUInt32LE(36 + audioData.length * 2, 4);\n    buffer.write('WAVE', 8);\n    buffer.write('fmt ', 12);\n    buffer.writeUInt32LE(16, 16);\n    buffer.writeUInt16LE(1, 20);\n    buffer.writeUInt16LE(1, 22);\n    buffer.writeUInt32LE(sampleRate, 24);\n    buffer.writeUInt32LE(sampleRate * 2, 28);\n    buffer.writeUInt16LE(2, 32);\n    buffer.writeUInt16LE(16, 34);\n    buffer.write('data', 36);\n    buffer.writeUInt32LE(audioData.length * 2, 40);\n    \n    // Audio data\n    for (let i = 0; i < audioData.length; i++) {\n      buffer.writeInt16LE(audioData[i], 44 + i * 2);\n    }\n    \n    return buffer;\n  }\n\n  private async ensureDirectoryExists(dirPath: string): Promise<void> {\n    try {\n      await fs.access(dirPath);\n    } catch {\n      await fs.mkdir(dirPath, { recursive: true });\n    }\n  }\n\n  private async checkPythonEnvironment(): Promise<void> {\n    // Check if Python and StyleTTS2 are available\n    console.log('üêç Checking Python environment...');\n    // In production, this would verify the actual Python setup\n  }\n\n  private async loadStyleTTS2Models(): Promise<void> {\n    console.log('üì¶ Loading StyleTTS2 models...');\n    // In production, this would load the actual model files\n    for (const [id, model] of this.voiceModels) {\n      model.isLoaded = true;\n      console.log(`‚úÖ Loaded model: ${model.name}`);\n    }\n  }\n\n  private calculateProcessingTime(text: string, priority: 'low' | 'medium' | 'high'): number {\n    const baseTime = text.length * 100; // 100ms per character\n    const priorityMultiplier = priority === 'high' ? 0.5 : priority === 'medium' ? 1.0 : 2.0;\n    return Math.max(500, baseTime * priorityMultiplier);\n  }\n\n  private getBaseFrequency(pitch: number): number {\n    return 200 * pitch; // Base frequency adjusted by pitch\n  }\n\n  private estimateAudioDuration(audioBuffer: Buffer, sampleRate: number): number {\n    const audioDataSize = audioBuffer.length - 44; // Subtract WAV header\n    const sampleCount = audioDataSize / 2; // 16-bit samples\n    return sampleCount / sampleRate;\n  }\n\n  private calculateQuality(priority: 'low' | 'medium' | 'high'): number {\n    return priority === 'high' ? 0.95 : priority === 'medium' ? 0.85 : 0.75;\n  }\n\n  public async getAvailableVoices(): Promise<VoiceModel[]> {\n    return Array.from(this.voiceModels.values());\n  }\n\n  public async healthCheck(): Promise<boolean> {\n    return this.isInitialized;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/tts/synthesize/route.ts"],"sourcesContent":["/**\n * SOVREN AI TTS SYNTHESIS API ENDPOINT\n * Backend service for heavy TTS processing with StyleTTS2\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { TTSBackendService } from '@/lib/services/TTSBackendService';\n\nexport interface TTSSynthesisRequest {\n  text: string;\n  voiceId: string;\n  priority: 'low' | 'medium' | 'high';\n  format: 'wav' | 'mp3' | 'ogg';\n  sampleRate?: number;\n  userId?: string;\n}\n\nexport interface TTSSynthesisResponse {\n  success: boolean;\n  audioData?: string; // Base64 encoded audio\n  audioUrl?: string;  // URL to audio file\n  duration?: number;\n  processingTime: number;\n  voiceId: string;\n  error?: string;\n  metadata: {\n    sampleRate: number;\n    format: string;\n    size: number;\n    quality: number;\n  };\n}\n\nconst ttsService = new TTSBackendService();\n\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  try {\n    const body: TTSSynthesisRequest = await request.json();\n    \n    // Validate request\n    if (!body.text || !body.voiceId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Missing required fields: text and voiceId',\n        processingTime: 0,\n        voiceId: body.voiceId || 'unknown',\n        metadata: {\n          sampleRate: 0,\n          format: 'none',\n          size: 0,\n          quality: 0\n        }\n      } as TTSSynthesisResponse, { status: 400 });\n    }\n\n    // Validate text length\n    if (body.text.length > 5000) {\n      return NextResponse.json({\n        success: false,\n        error: 'Text too long. Maximum 5000 characters.',\n        processingTime: 0,\n        voiceId: body.voiceId,\n        metadata: {\n          sampleRate: 0,\n          format: 'none',\n          size: 0,\n          quality: 0\n        }\n      } as TTSSynthesisResponse, { status: 400 });\n    }\n\n    console.log(`üé§ TTS API: Synthesizing \"${body.text.substring(0, 50)}...\" with ${body.voiceId}`);\n    \n    const startTime = Date.now();\n\n    // Process TTS synthesis\n    const result = await ttsService.synthesize({\n      text: body.text,\n      voiceId: body.voiceId,\n      priority: body.priority || 'medium',\n      format: body.format || 'wav',\n      sampleRate: body.sampleRate || 22050,\n      userId: body.userId\n    });\n\n    const processingTime = Date.now() - startTime;\n\n    const response: TTSSynthesisResponse = {\n      success: true,\n      audioData: result.audioData,\n      audioUrl: result.audioUrl,\n      duration: result.duration,\n      processingTime,\n      voiceId: body.voiceId,\n      metadata: {\n        sampleRate: result.sampleRate,\n        format: result.format,\n        size: result.size,\n        quality: result.quality\n      }\n    };\n\n    console.log(`‚úÖ TTS API: Synthesis completed in ${processingTime}ms`);\n    \n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('‚ùå TTS API Error:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Internal server error',\n      processingTime: 0,\n      voiceId: 'unknown',\n      metadata: {\n        sampleRate: 0,\n        format: 'none',\n        size: 0,\n        quality: 0\n      }\n    } as TTSSynthesisResponse, { status: 500 });\n  }\n}\n\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n  // Health check endpoint\n  try {\n    const isHealthy = await ttsService.healthCheck();\n    \n    return NextResponse.json({\n      status: 'healthy',\n      service: 'TTS Backend Service',\n      timestamp: new Date().toISOString(),\n      availableVoices: await ttsService.getAvailableVoices(),\n      isHealthy\n    });\n  } catch (error) {\n    return NextResponse.json({\n      status: 'unhealthy',\n      service: 'TTS Backend Service',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 503 });\n  }\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;AA8BD,MAAM,aAAa,IAAI,6IAAA,CAAA,oBAAiB;AAEjC,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAA4B,MAAM,QAAQ,IAAI;QAEpD,mBAAmB;QACnB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,OAAO,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;gBACP,gBAAgB;gBAChB,SAAS,KAAK,OAAO,IAAI;gBACzB,UAAU;oBACR,YAAY;oBACZ,QAAQ;oBACR,MAAM;oBACN,SAAS;gBACX;YACF,GAA2B;gBAAE,QAAQ;YAAI;QAC3C;QAEA,uBAAuB;QACvB,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,MAAM;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;gBACP,gBAAgB;gBAChB,SAAS,KAAK,OAAO;gBACrB,UAAU;oBACR,YAAY;oBACZ,QAAQ;oBACR,MAAM;oBACN,SAAS;gBACX;YACF,GAA2B;gBAAE,QAAQ;YAAI;QAC3C;QAEA,QAAQ,GAAG,CAAC,CAAC,0BAA0B,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,UAAU,EAAE,KAAK,OAAO,CAAC,CAAC;QAE9F,MAAM,YAAY,KAAK,GAAG;QAE1B,wBAAwB;QACxB,MAAM,SAAS,MAAM,WAAW,UAAU,CAAC;YACzC,MAAM,KAAK,IAAI;YACf,SAAS,KAAK,OAAO;YACrB,UAAU,KAAK,QAAQ,IAAI;YAC3B,QAAQ,KAAK,MAAM,IAAI;YACvB,YAAY,KAAK,UAAU,IAAI;YAC/B,QAAQ,KAAK,MAAM;QACrB;QAEA,MAAM,iBAAiB,KAAK,GAAG,KAAK;QAEpC,MAAM,WAAiC;YACrC,SAAS;YACT,WAAW,OAAO,SAAS;YAC3B,UAAU,OAAO,QAAQ;YACzB,UAAU,OAAO,QAAQ;YACzB;YACA,SAAS,KAAK,OAAO;YACrB,UAAU;gBACR,YAAY,OAAO,UAAU;gBAC7B,QAAQ,OAAO,MAAM;gBACrB,MAAM,OAAO,IAAI;gBACjB,SAAS,OAAO,OAAO;YACzB;QACF;QAEA,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,eAAe,EAAE,CAAC;QAEnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAElC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,gBAAgB;YAChB,SAAS;YACT,UAAU;gBACR,YAAY;gBACZ,QAAQ;gBACR,MAAM;gBACN,SAAS;YACX;QACF,GAA2B;YAAE,QAAQ;QAAI;IAC3C;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,wBAAwB;IACxB,IAAI;QACF,MAAM,YAAY,MAAM,WAAW,WAAW;QAE9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;YACjC,iBAAiB,MAAM,WAAW,kBAAkB;YACpD;QACF;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;YACjC,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF"}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}