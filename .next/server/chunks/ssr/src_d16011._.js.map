{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/voice/AudioProcessor.ts"],"sourcesContent":["export interface AudioProcessingConfig {\n  sampleRate: number;\n  bufferSize: number;\n  enableNoiseReduction: boolean;\n  enableEchoCancellation: boolean;\n  enableAutoGainControl: boolean;\n  spatialAudioEnabled: boolean;\n}\n\nexport interface AudioMetrics {\n  volume: number;\n  frequency: number[];\n  isActive: boolean;\n  noiseLevel: number;\n  clarity: number;\n}\n\nexport class AudioProcessor {\n  private audioContext: AudioContext | null = null;\n  private activeStreams: Map<string, MediaStream> = new Map();\n  private processors: Map<string, AudioWorkletNode> = new Map();\n  private analyzers: Map<string, AnalyserNode> = new Map();\n  private spatialNodes: Map<string, PannerNode> = new Map();\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  constructor(private config: AudioProcessingConfig = {\n    sampleRate: 48000,\n    bufferSize: 4096,\n    enableNoiseReduction: true,\n    enableEchoCancellation: true,\n    enableAutoGainControl: true,\n    spatialAudioEnabled: true\n  }) {\n    this.initializeEventListeners();\n  }\n\n  private initializeEventListeners(): void {\n    this.eventListeners.set('audioActivity', []);\n    this.eventListeners.set('volumeChange', []);\n    this.eventListeners.set('qualityChange', []);\n    this.eventListeners.set('spatialUpdate', []);\n  }\n\n  public async initialize(): Promise<void> {\n    try {\n      // Create AudioContext with optimal settings\n      this.audioContext = new AudioContext({\n        sampleRate: this.config.sampleRate,\n        latencyHint: 'interactive'\n      });\n\n      // Load audio worklet for advanced processing\n      await this.loadAudioWorklets();\n      \n      console.log('Audio Processor initialized successfully');\n      \n    } catch (error) {\n      console.error('Failed to initialize Audio Processor:', error);\n      throw error;\n    }\n  }\n\n  private async loadAudioWorklets(): Promise<void> {\n    if (!this.audioContext) return;\n\n    try {\n      // Load noise reduction worklet\n      await this.audioContext.audioWorklet.addModule('/audio-worklets/noise-reduction.js');\n      \n      // Load voice enhancement worklet\n      await this.audioContext.audioWorklet.addModule('/audio-worklets/voice-enhancement.js');\n      \n      // Load spatial audio worklet\n      await this.audioContext.audioWorklet.addModule('/audio-worklets/spatial-processor.js');\n      \n    } catch (error) {\n      console.warn('Audio worklets not available, falling back to basic processing:', error);\n    }\n  }\n\n  public async processInboundAudio(stream: MediaStream, executiveId: string): Promise<void> {\n    if (!this.audioContext) {\n      await this.initialize();\n    }\n\n    const streamId = `inbound_${executiveId}_${Date.now()}`;\n    this.activeStreams.set(streamId, stream);\n\n    try {\n      // Create audio processing chain\n      const source = this.audioContext!.createMediaStreamSource(stream);\n      const analyzer = this.createAnalyzer();\n      const enhancer = await this.createVoiceEnhancer();\n      const spatializer = this.createSpatializer(executiveId);\n      const destination = this.audioContext!.destination;\n\n      // Connect processing chain\n      source.connect(analyzer);\n      analyzer.connect(enhancer);\n      enhancer.connect(spatializer);\n      spatializer.connect(destination);\n\n      // Store references\n      this.analyzers.set(streamId, analyzer);\n      this.processors.set(streamId, enhancer);\n      this.spatialNodes.set(streamId, spatializer);\n\n      // Start monitoring\n      this.startAudioMonitoring(streamId, analyzer, executiveId);\n\n      console.log(`Inbound audio processing started for executive ${executiveId}`);\n\n    } catch (error) {\n      console.error('Failed to process inbound audio:', error);\n      this.stopProcessing(stream);\n    }\n  }\n\n  public async processOutboundAudio(stream: MediaStream, executiveId: string): Promise<void> {\n    if (!this.audioContext) {\n      await this.initialize();\n    }\n\n    const streamId = `outbound_${executiveId}_${Date.now()}`;\n    this.activeStreams.set(streamId, stream);\n\n    try {\n      // Create outbound processing chain\n      const source = this.audioContext!.createMediaStreamSource(stream);\n      const analyzer = this.createAnalyzer();\n      const noiseReducer = await this.createNoiseReducer();\n      const enhancer = await this.createVoiceEnhancer();\n\n      // Connect processing chain\n      source.connect(analyzer);\n      analyzer.connect(noiseReducer);\n      noiseReducer.connect(enhancer);\n\n      // Store references\n      this.analyzers.set(streamId, analyzer);\n      this.processors.set(streamId, enhancer);\n\n      // Start monitoring\n      this.startAudioMonitoring(streamId, analyzer, executiveId);\n\n      console.log(`Outbound audio processing started for executive ${executiveId}`);\n\n    } catch (error) {\n      console.error('Failed to process outbound audio:', error);\n      this.stopProcessing(stream);\n    }\n  }\n\n  private createAnalyzer(): AnalyserNode {\n    const analyzer = this.audioContext!.createAnalyser();\n    analyzer.fftSize = 2048;\n    analyzer.smoothingTimeConstant = 0.8;\n    return analyzer;\n  }\n\n  private async createNoiseReducer(): Promise<AudioWorkletNode> {\n    try {\n      const processor = new AudioWorkletNode(this.audioContext!, 'noise-reduction-processor', {\n        processorOptions: {\n          threshold: -30,\n          ratio: 4,\n          attack: 0.003,\n          release: 0.1\n        }\n      });\n      return processor;\n    } catch (error) {\n      // Fallback to basic filtering\n      const filter = this.audioContext!.createBiquadFilter();\n      filter.type = 'highpass';\n      filter.frequency.value = 80;\n      return filter as any;\n    }\n  }\n\n  private async createVoiceEnhancer(): Promise<AudioWorkletNode> {\n    try {\n      const processor = new AudioWorkletNode(this.audioContext!, 'voice-enhancement-processor', {\n        processorOptions: {\n          clarity: 1.2,\n          warmth: 0.8,\n          presence: 1.1\n        }\n      });\n      return processor;\n    } catch (error) {\n      // Fallback to basic EQ\n      const filter = this.audioContext!.createBiquadFilter();\n      filter.type = 'peaking';\n      filter.frequency.value = 2000;\n      filter.Q.value = 1;\n      filter.gain.value = 3;\n      return filter as any;\n    }\n  }\n\n  private createSpatializer(executiveId: string): PannerNode {\n    const panner = this.audioContext!.createPanner();\n    \n    // Configure 3D audio settings\n    panner.panningModel = 'HRTF';\n    panner.distanceModel = 'inverse';\n    panner.refDistance = 1;\n    panner.maxDistance = 10000;\n    panner.rolloffFactor = 1;\n    panner.coneInnerAngle = 360;\n    panner.coneOuterAngle = 0;\n    panner.coneOuterGain = 0;\n\n    // Set executive position based on their circle position\n    const position = this.getExecutivePosition(executiveId);\n    panner.positionX.value = position.x;\n    panner.positionY.value = position.y;\n    panner.positionZ.value = position.z;\n\n    return panner;\n  }\n\n  private getExecutivePosition(executiveId: string): { x: number; y: number; z: number } {\n    const executives = ['ceo', 'cfo', 'cto', 'cmo', 'coo', 'chro', 'clo', 'cso'];\n    const index = executives.indexOf(executiveId.toLowerCase());\n    \n    if (index === -1) {\n      return { x: 0, y: 0, z: 0 };\n    }\n\n    const angle = (index / executives.length) * Math.PI * 2;\n    const radius = 6; // Match the visual circle radius\n    \n    return {\n      x: Math.cos(angle) * radius,\n      y: 0,\n      z: Math.sin(angle) * radius\n    };\n  }\n\n  private startAudioMonitoring(streamId: string, analyzer: AnalyserNode, executiveId: string): void {\n    const bufferLength = analyzer.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const frequencyData = new Float32Array(bufferLength);\n\n    const monitor = () => {\n      if (!this.analyzers.has(streamId)) return;\n\n      analyzer.getByteTimeDomainData(dataArray);\n      analyzer.getFloatFrequencyData(frequencyData);\n\n      // Calculate volume (RMS)\n      let sum = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        const sample = (dataArray[i] - 128) / 128;\n        sum += sample * sample;\n      }\n      const volume = Math.sqrt(sum / bufferLength);\n\n      // Calculate dominant frequency\n      let maxIndex = 0;\n      let maxValue = -Infinity;\n      for (let i = 0; i < frequencyData.length; i++) {\n        if (frequencyData[i] > maxValue) {\n          maxValue = frequencyData[i];\n          maxIndex = i;\n        }\n      }\n      const dominantFreq = (maxIndex * this.audioContext!.sampleRate) / (2 * bufferLength);\n\n      // Determine if audio is active\n      const isActive = volume > 0.01;\n\n      // Calculate noise level and clarity\n      const noiseLevel = this.calculateNoiseLevel(frequencyData);\n      const clarity = this.calculateClarity(frequencyData);\n\n      const metrics: AudioMetrics = {\n        volume,\n        frequency: Array.from(frequencyData),\n        isActive,\n        noiseLevel,\n        clarity\n      };\n\n      this.emit('audioActivity', {\n        executiveId,\n        streamId,\n        metrics,\n        dominantFrequency: dominantFreq\n      });\n\n      // Continue monitoring\n      requestAnimationFrame(monitor);\n    };\n\n    monitor();\n  }\n\n  private calculateNoiseLevel(frequencyData: Float32Array): number {\n    // Calculate noise level in lower frequencies (below 300Hz)\n    const noiseRange = Math.floor((300 / this.audioContext!.sampleRate) * frequencyData.length * 2);\n    let noiseSum = 0;\n    \n    for (let i = 0; i < Math.min(noiseRange, frequencyData.length); i++) {\n      noiseSum += Math.pow(10, frequencyData[i] / 20);\n    }\n    \n    return noiseSum / noiseRange;\n  }\n\n  private calculateClarity(frequencyData: Float32Array): number {\n    // Calculate clarity based on voice frequency range (300Hz - 3400Hz)\n    const voiceStart = Math.floor((300 / this.audioContext!.sampleRate) * frequencyData.length * 2);\n    const voiceEnd = Math.floor((3400 / this.audioContext!.sampleRate) * frequencyData.length * 2);\n    \n    let voiceSum = 0;\n    let totalSum = 0;\n    \n    for (let i = 0; i < frequencyData.length; i++) {\n      const power = Math.pow(10, frequencyData[i] / 20);\n      totalSum += power;\n      \n      if (i >= voiceStart && i <= voiceEnd) {\n        voiceSum += power;\n      }\n    }\n    \n    return totalSum > 0 ? voiceSum / totalSum : 0;\n  }\n\n  public updateExecutivePosition(executiveId: string, x: number, y: number, z: number): void {\n    for (const [streamId, panner] of this.spatialNodes.entries()) {\n      if (streamId.includes(executiveId)) {\n        panner.positionX.value = x;\n        panner.positionY.value = y;\n        panner.positionZ.value = z;\n        \n        this.emit('spatialUpdate', { executiveId, position: { x, y, z } });\n      }\n    }\n  }\n\n  public stopProcessing(stream: MediaStream): void {\n    const streamId = Array.from(this.activeStreams.entries())\n      .find(([_, s]) => s === stream)?.[0];\n    \n    if (streamId) {\n      // Clean up analyzers\n      this.analyzers.delete(streamId);\n      \n      // Clean up processors\n      const processor = this.processors.get(streamId);\n      if (processor) {\n        processor.disconnect();\n        this.processors.delete(streamId);\n      }\n      \n      // Clean up spatial nodes\n      const spatialNode = this.spatialNodes.get(streamId);\n      if (spatialNode) {\n        spatialNode.disconnect();\n        this.spatialNodes.delete(streamId);\n      }\n      \n      // Remove stream\n      this.activeStreams.delete(streamId);\n      \n      console.log(`Audio processing stopped for stream: ${streamId}`);\n    }\n  }\n\n  public getAudioMetrics(executiveId: string): AudioMetrics | null {\n    // This would return the latest metrics for the executive\n    // Implementation would depend on how you want to store/retrieve metrics\n    return null;\n  }\n\n  public on(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  public off(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n\n  public async destroy(): Promise<void> {\n    // Stop all processing\n    for (const stream of this.activeStreams.values()) {\n      this.stopProcessing(stream);\n    }\n    \n    // Close audio context\n    if (this.audioContext) {\n      await this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    console.log('Audio Processor destroyed');\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/voice/ExecutiveVoiceRouter.ts"],"sourcesContent":["export interface ExecutiveProfile {\n  id: string;\n  name: string;\n  role: string;\n  availability: 'available' | 'busy' | 'in-call' | 'offline';\n  priority: number;\n  specializations: string[];\n  currentLoad: number;\n  maxConcurrentCalls: number;\n  voiceModel: string;\n  color?: string; // Visual color for UI representation\n  personaType: 'executive' | 'system';\n  canInitiateCall: boolean;\n  canReceiveCall: boolean;\n  canSendEmail: boolean;\n  canReceiveEmail: boolean;\n  phoneNumber?: string;\n  emailAddress?: string;\n}\n\nexport interface CallRoutingRule {\n  id: string;\n  name: string;\n  priority: number;\n  conditions: {\n    callerPattern?: RegExp;\n    timeRange?: { start: string; end: string };\n    dayOfWeek?: number[];\n    keywords?: string[];\n    urgency?: 'low' | 'medium' | 'high' | 'critical';\n  };\n  actions: {\n    assignToExecutive?: string;\n    requireApproval?: boolean;\n    recordCall?: boolean;\n    transcribeCall?: boolean;\n    notifyOthers?: string[];\n  };\n}\n\nexport interface CallContext {\n  callerId: string;\n  callerName?: string;\n  callerCompany?: string;\n  previousInteractions: number;\n  estimatedValue?: number;\n  urgency: 'low' | 'medium' | 'high' | 'critical';\n  keywords: string[];\n  timeOfCall: Date;\n}\n\nexport class ExecutiveVoiceRouter {\n  private executives: Map<string, ExecutiveProfile> = new Map();\n  private routingRules: CallRoutingRule[] = [];\n  private callHistory: Map<string, CallContext[]> = new Map();\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  constructor() {\n    this.initializeExecutives();\n    this.initializeRoutingRules();\n    this.initializeEventListeners();\n  }\n\n  private initializeExecutives(): void {\n    const executiveProfiles: ExecutiveProfile[] = [\n      {\n        id: 'sovren-ai',\n        name: 'SOVREN AI Core System',\n        role: 'NEURAL OS',\n        availability: 'available',\n        priority: 11, // Highest priority - core system\n        specializations: ['system-control', 'neural-processing', 'decision-making', 'orchestration', 'intelligence', 'omniscience'],\n        currentLoad: 0,\n        maxConcurrentCalls: 10, // Can handle multiple simultaneous conversations\n        voiceModel: 'sovren-ai-neural',\n        color: '#ff0000', // Red for synthetic intelligence\n        personaType: 'system',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'ceo',\n        name: 'Chief Executive Officer',\n        role: 'CEO',\n        availability: 'available',\n        priority: 10,\n        specializations: ['strategy', 'vision', 'leadership', 'board', 'investors'],\n        currentLoad: 0,\n        maxConcurrentCalls: 2,\n        voiceModel: 'ceo-authoritative',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'cfo',\n        name: 'Chief Financial Officer',\n        role: 'CFO',\n        availability: 'available',\n        priority: 9,\n        specializations: ['finance', 'budget', 'accounting', 'investors', 'funding'],\n        currentLoad: 0,\n        maxConcurrentCalls: 3,\n        voiceModel: 'cfo-analytical',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'cto',\n        name: 'Chief Technology Officer',\n        role: 'CTO',\n        availability: 'available',\n        priority: 8,\n        specializations: ['technology', 'development', 'infrastructure', 'security', 'innovation'],\n        currentLoad: 0,\n        maxConcurrentCalls: 3,\n        voiceModel: 'cto-technical',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'cmo',\n        name: 'Chief Marketing Officer',\n        role: 'CMO',\n        availability: 'available',\n        priority: 7,\n        specializations: ['marketing', 'branding', 'campaigns', 'customers', 'growth'],\n        currentLoad: 0,\n        maxConcurrentCalls: 4,\n        voiceModel: 'cmo-persuasive',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'coo',\n        name: 'Chief Operating Officer',\n        role: 'COO',\n        availability: 'available',\n        priority: 8,\n        specializations: ['operations', 'processes', 'efficiency', 'logistics', 'management'],\n        currentLoad: 0,\n        maxConcurrentCalls: 3,\n        voiceModel: 'coo-operational',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'chro',\n        name: 'Chief Human Resources Officer',\n        role: 'CHRO',\n        availability: 'available',\n        priority: 6,\n        specializations: ['hr', 'hiring', 'culture', 'employees', 'benefits'],\n        currentLoad: 0,\n        maxConcurrentCalls: 4,\n        voiceModel: 'chro-empathetic',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'clo',\n        name: 'Chief Legal Officer',\n        role: 'CLO',\n        availability: 'available',\n        priority: 7,\n        specializations: ['legal', 'compliance', 'contracts', 'risk', 'governance'],\n        currentLoad: 0,\n        maxConcurrentCalls: 2,\n        voiceModel: 'clo-precise',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      },\n      {\n        id: 'cso',\n        name: 'Chief Strategy Officer',\n        role: 'CSO',\n        availability: 'available',\n        priority: 7,\n        specializations: ['strategy', 'planning', 'analysis', 'competition', 'growth'],\n        currentLoad: 0,\n        maxConcurrentCalls: 3,\n        voiceModel: 'cso-strategic',\n        personaType: 'executive',\n        canInitiateCall: true,\n        canReceiveCall: true,\n        canSendEmail: true,\n        canReceiveEmail: true\n      }\n    ];\n\n    executiveProfiles.forEach(profile => {\n      this.executives.set(profile.id, profile);\n    });\n  }\n\n  private initializeRoutingRules(): void {\n    this.routingRules = [\n      {\n        id: 'system-control',\n        name: 'SOVREN AI System Control',\n        priority: 11,\n        conditions: {\n          keywords: ['sovren', 'system', 'neural', 'ai', 'core', 'control', 'override', 'emergency'],\n          urgency: 'critical'\n        },\n        actions: {\n          assignToExecutive: 'sovren-ai',\n          recordCall: true,\n          transcribeCall: true,\n          notifyOthers: ['ceo', 'cto']\n        }\n      },\n      {\n        id: 'investor-calls',\n        name: 'Investor Relations',\n        priority: 10,\n        conditions: {\n          keywords: ['investor', 'funding', 'investment', 'venture', 'capital'],\n          urgency: 'high'\n        },\n        actions: {\n          assignToExecutive: 'ceo',\n          recordCall: true,\n          transcribeCall: true,\n          notifyOthers: ['cfo', 'sovren-ai']\n        }\n      },\n      {\n        id: 'financial-matters',\n        name: 'Financial Discussions',\n        priority: 9,\n        conditions: {\n          keywords: ['budget', 'finance', 'accounting', 'revenue', 'cost']\n        },\n        actions: {\n          assignToExecutive: 'cfo',\n          recordCall: true,\n          transcribeCall: true\n        }\n      },\n      {\n        id: 'technical-support',\n        name: 'Technical Issues',\n        priority: 8,\n        conditions: {\n          keywords: ['technical', 'bug', 'system', 'server', 'api', 'integration']\n        },\n        actions: {\n          assignToExecutive: 'cto',\n          recordCall: true,\n          transcribeCall: true\n        }\n      },\n      {\n        id: 'marketing-campaigns',\n        name: 'Marketing & Sales',\n        priority: 7,\n        conditions: {\n          keywords: ['marketing', 'campaign', 'sales', 'customer', 'lead']\n        },\n        actions: {\n          assignToExecutive: 'cmo',\n          recordCall: true,\n          transcribeCall: true\n        }\n      },\n      {\n        id: 'hr-matters',\n        name: 'Human Resources',\n        priority: 6,\n        conditions: {\n          keywords: ['hr', 'hiring', 'employee', 'culture', 'benefits']\n        },\n        actions: {\n          assignToExecutive: 'chro',\n          recordCall: true,\n          transcribeCall: true\n        }\n      },\n      {\n        id: 'legal-compliance',\n        name: 'Legal & Compliance',\n        priority: 8,\n        conditions: {\n          keywords: ['legal', 'contract', 'compliance', 'risk', 'lawsuit']\n        },\n        actions: {\n          assignToExecutive: 'clo',\n          recordCall: true,\n          transcribeCall: true,\n          requireApproval: true\n        }\n      },\n      {\n        id: 'operations',\n        name: 'Operations & Processes',\n        priority: 7,\n        conditions: {\n          keywords: ['operations', 'process', 'efficiency', 'logistics']\n        },\n        actions: {\n          assignToExecutive: 'coo',\n          recordCall: true,\n          transcribeCall: true\n        }\n      },\n      {\n        id: 'strategy-planning',\n        name: 'Strategic Planning',\n        priority: 8,\n        conditions: {\n          keywords: ['strategy', 'planning', 'roadmap', 'competition', 'market']\n        },\n        actions: {\n          assignToExecutive: 'cso',\n          recordCall: true,\n          transcribeCall: true\n        }\n      },\n      {\n        id: 'vip-callers',\n        name: 'VIP Caller Routing',\n        priority: 10,\n        conditions: {\n          callerPattern: /\\+1(555|800|888|877|866|855|844|833|822)/,\n          urgency: 'critical'\n        },\n        actions: {\n          assignToExecutive: 'ceo',\n          recordCall: true,\n          transcribeCall: true,\n          notifyOthers: ['cfo', 'coo']\n        }\n      },\n      {\n        id: 'after-hours',\n        name: 'After Hours Routing',\n        priority: 5,\n        conditions: {\n          timeRange: { start: '18:00', end: '08:00' }\n        },\n        actions: {\n          assignToExecutive: 'coo',\n          recordCall: true,\n          transcribeCall: true,\n          requireApproval: true\n        }\n      }\n    ];\n  }\n\n  private initializeEventListeners(): void {\n    this.eventListeners.set('executiveAssigned', []);\n    this.eventListeners.set('routingFailed', []);\n    this.eventListeners.set('loadBalanced', []);\n    this.eventListeners.set('availabilityChanged', []);\n  }\n\n  public async assignExecutive(callerUri: string, context?: Partial<CallContext>): Promise<string> {\n    try {\n      // Build call context\n      const callContext = await this.buildCallContext(callerUri, context);\n      \n      // Find matching routing rules\n      const matchingRules = this.findMatchingRules(callContext);\n      \n      // Get executive assignment from rules\n      let assignedExecutive = this.getExecutiveFromRules(matchingRules);\n      \n      // If no rule-based assignment, use load balancing\n      if (!assignedExecutive) {\n        assignedExecutive = this.loadBalanceExecutives(callContext);\n      }\n      \n      // Validate executive availability\n      const executive = this.executives.get(assignedExecutive);\n      if (!executive || !this.isExecutiveAvailable(executive)) {\n        assignedExecutive = this.findAlternativeExecutive(assignedExecutive, callContext);\n      }\n      \n      // Update executive load\n      this.updateExecutiveLoad(assignedExecutive, 1);\n      \n      // Store call context\n      this.storeCallContext(callerUri, callContext);\n      \n      console.log(`Call from ${callerUri} assigned to ${assignedExecutive}`);\n      this.emit('executiveAssigned', { callerUri, executive: assignedExecutive, context: callContext });\n      \n      return assignedExecutive;\n      \n    } catch (error) {\n      console.error('Failed to assign executive:', error);\n      this.emit('routingFailed', { callerUri, error });\n      \n      // Fallback to CEO\n      return 'ceo';\n    }\n  }\n\n  private async buildCallContext(callerUri: string, context?: Partial<CallContext>): Promise<CallContext> {\n    const previousInteractions = this.callHistory.get(callerUri)?.length || 0;\n    \n    return {\n      callerId: callerUri,\n      callerName: context?.callerName,\n      callerCompany: context?.callerCompany,\n      previousInteractions,\n      estimatedValue: context?.estimatedValue,\n      urgency: context?.urgency || 'medium',\n      keywords: context?.keywords || [],\n      timeOfCall: new Date()\n    };\n  }\n\n  private findMatchingRules(context: CallContext): CallRoutingRule[] {\n    return this.routingRules\n      .filter(rule => this.ruleMatches(rule, context))\n      .sort((a, b) => b.priority - a.priority);\n  }\n\n  private ruleMatches(rule: CallRoutingRule, context: CallContext): boolean {\n    const conditions = rule.conditions;\n    \n    // Check caller pattern\n    if (conditions.callerPattern && !conditions.callerPattern.test(context.callerId)) {\n      return false;\n    }\n    \n    // Check time range\n    if (conditions.timeRange) {\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      if (currentTime < conditions.timeRange.start || currentTime > conditions.timeRange.end) {\n        return false;\n      }\n    }\n    \n    // Check day of week\n    if (conditions.dayOfWeek && !conditions.dayOfWeek.includes(context.timeOfCall.getDay())) {\n      return false;\n    }\n    \n    // Check keywords\n    if (conditions.keywords) {\n      const hasKeyword = conditions.keywords.some(keyword =>\n        context.keywords.some(contextKeyword =>\n          contextKeyword.toLowerCase().includes(keyword.toLowerCase())\n        )\n      );\n      if (!hasKeyword) {\n        return false;\n      }\n    }\n    \n    // Check urgency\n    if (conditions.urgency && context.urgency !== conditions.urgency) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  private getExecutiveFromRules(rules: CallRoutingRule[]): string | null {\n    for (const rule of rules) {\n      if (rule.actions.assignToExecutive) {\n        const executive = this.executives.get(rule.actions.assignToExecutive);\n        if (executive && this.isExecutiveAvailable(executive)) {\n          return rule.actions.assignToExecutive;\n        }\n      }\n    }\n    return null;\n  }\n\n  private loadBalanceExecutives(context: CallContext): string {\n    const availableExecutives = Array.from(this.executives.values())\n      .filter(exec => this.isExecutiveAvailable(exec))\n      .sort((a, b) => {\n        // Sort by load (ascending) then by priority (descending)\n        if (a.currentLoad !== b.currentLoad) {\n          return a.currentLoad - b.currentLoad;\n        }\n        return b.priority - a.priority;\n      });\n    \n    if (availableExecutives.length === 0) {\n      return 'ceo'; // Fallback\n    }\n    \n    return availableExecutives[0].id;\n  }\n\n  private isExecutiveAvailable(executive: ExecutiveProfile): boolean {\n    return executive.availability === 'available' && \n           executive.currentLoad < executive.maxConcurrentCalls;\n  }\n\n  private findAlternativeExecutive(originalExecutive: string, context: CallContext): string {\n    // Find executives with similar specializations\n    const original = this.executives.get(originalExecutive);\n    if (!original) return 'ceo';\n    \n    const alternatives = Array.from(this.executives.values())\n      .filter(exec => \n        exec.id !== originalExecutive &&\n        this.isExecutiveAvailable(exec) &&\n        exec.specializations.some(spec => original.specializations.includes(spec))\n      )\n      .sort((a, b) => b.priority - a.priority);\n    \n    return alternatives.length > 0 ? alternatives[0].id : 'ceo';\n  }\n\n  private updateExecutiveLoad(executiveId: string, delta: number): void {\n    const executive = this.executives.get(executiveId);\n    if (executive) {\n      executive.currentLoad = Math.max(0, executive.currentLoad + delta);\n      this.emit('loadBalanced', { executiveId, newLoad: executive.currentLoad });\n    }\n  }\n\n  private storeCallContext(callerUri: string, context: CallContext): void {\n    if (!this.callHistory.has(callerUri)) {\n      this.callHistory.set(callerUri, []);\n    }\n    this.callHistory.get(callerUri)!.push(context);\n    \n    // Keep only last 10 interactions\n    const history = this.callHistory.get(callerUri)!;\n    if (history.length > 10) {\n      history.splice(0, history.length - 10);\n    }\n  }\n\n  public releaseExecutive(executiveId: string): void {\n    this.updateExecutiveLoad(executiveId, -1);\n  }\n\n  public setExecutiveAvailability(executiveId: string, availability: ExecutiveProfile['availability']): void {\n    const executive = this.executives.get(executiveId);\n    if (executive) {\n      executive.availability = availability;\n      this.emit('availabilityChanged', { executiveId, availability });\n    }\n  }\n\n  public getExecutiveProfile(executiveId: string): ExecutiveProfile | undefined {\n    return this.executives.get(executiveId);\n  }\n\n  public getAllExecutives(): ExecutiveProfile[] {\n    return Array.from(this.executives.values());\n  }\n\n  public getAvailableExecutives(): ExecutiveProfile[] {\n    return Array.from(this.executives.values()).filter(exec => this.isExecutiveAvailable(exec));\n  }\n\n  public addRoutingRule(rule: CallRoutingRule): void {\n    this.routingRules.push(rule);\n    this.routingRules.sort((a, b) => b.priority - a.priority);\n  }\n\n  public removeRoutingRule(ruleId: string): void {\n    this.routingRules = this.routingRules.filter(rule => rule.id !== ruleId);\n  }\n\n  public on(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  public off(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAmDO,MAAM;IACH,aAA4C,IAAI,MAAM;IACtD,eAAkC,EAAE,CAAC;IACrC,cAA0C,IAAI,MAAM;IACpD,iBAA0C,IAAI,MAAM;IAE5D,aAAc;QACZ,IAAI,CAAC,oBAAoB;QACzB,IAAI,CAAC,sBAAsB;QAC3B,IAAI,CAAC,wBAAwB;IAC/B;IAEQ,uBAA6B;QACnC,MAAM,oBAAwC;YAC5C;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAkB;oBAAqB;oBAAmB;oBAAiB;oBAAgB;iBAAc;gBAC3H,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,OAAO;gBACP,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAY;oBAAU;oBAAc;oBAAS;iBAAY;gBAC3E,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAW;oBAAU;oBAAc;oBAAa;iBAAU;gBAC5E,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAc;oBAAe;oBAAkB;oBAAY;iBAAa;gBAC1F,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAa;oBAAY;oBAAa;oBAAa;iBAAS;gBAC9E,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAc;oBAAa;oBAAc;oBAAa;iBAAa;gBACrF,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAM;oBAAU;oBAAW;oBAAa;iBAAW;gBACrE,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAS;oBAAc;oBAAa;oBAAQ;iBAAa;gBAC3E,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,iBAAiB;oBAAC;oBAAY;oBAAY;oBAAY;oBAAe;iBAAS;gBAC9E,aAAa;gBACb,oBAAoB;gBACpB,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,gBAAgB;gBAChB,cAAc;gBACd,iBAAiB;YACnB;SACD;QAED,kBAAkB,OAAO,CAAC,CAAA;YACxB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE;QAClC;IACF;IAEQ,yBAA+B;QACrC,IAAI,CAAC,YAAY,GAAG;YAClB;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAU;wBAAU;wBAAU;wBAAM;wBAAQ;wBAAW;wBAAY;qBAAY;oBAC1F,SAAS;gBACX;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;oBAChB,cAAc;wBAAC;wBAAO;qBAAM;gBAC9B;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAY;wBAAW;wBAAc;wBAAW;qBAAU;oBACrE,SAAS;gBACX;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;oBAChB,cAAc;wBAAC;wBAAO;qBAAY;gBACpC;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAU;wBAAW;wBAAc;wBAAW;qBAAO;gBAClE;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;gBAClB;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAa;wBAAO;wBAAU;wBAAU;wBAAO;qBAAc;gBAC1E;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;gBAClB;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAa;wBAAY;wBAAS;wBAAY;qBAAO;gBAClE;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;gBAClB;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAM;wBAAU;wBAAY;wBAAW;qBAAW;gBAC/D;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;gBAClB;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAS;wBAAY;wBAAc;wBAAQ;qBAAU;gBAClE;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;oBAChB,iBAAiB;gBACnB;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAc;wBAAW;wBAAc;qBAAY;gBAChE;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;gBAClB;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,UAAU;wBAAC;wBAAY;wBAAY;wBAAW;wBAAe;qBAAS;gBACxE;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;gBAClB;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,eAAe;oBACf,SAAS;gBACX;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;oBAChB,cAAc;wBAAC;wBAAO;qBAAM;gBAC9B;YACF;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,YAAY;oBACV,WAAW;wBAAE,OAAO;wBAAS,KAAK;oBAAQ;gBAC5C;gBACA,SAAS;oBACP,mBAAmB;oBACnB,YAAY;oBACZ,gBAAgB;oBAChB,iBAAiB;gBACnB;YACF;SACD;IACH;IAEQ,2BAAiC;QACvC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,qBAAqB,EAAE;QAC/C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,iBAAiB,EAAE;QAC3C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,gBAAgB,EAAE;QAC1C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,uBAAuB,EAAE;IACnD;IAEA,MAAa,gBAAgB,SAAiB,EAAE,OAA8B,EAAmB;QAC/F,IAAI;YACF,qBAAqB;YACrB,MAAM,cAAc,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW;YAE3D,8BAA8B;YAC9B,MAAM,gBAAgB,IAAI,CAAC,iBAAiB,CAAC;YAE7C,sCAAsC;YACtC,IAAI,oBAAoB,IAAI,CAAC,qBAAqB,CAAC;YAEnD,kDAAkD;YAClD,IAAI,CAAC,mBAAmB;gBACtB,oBAAoB,IAAI,CAAC,qBAAqB,CAAC;YACjD;YAEA,kCAAkC;YAClC,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;YACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY;gBACvD,oBAAoB,IAAI,CAAC,wBAAwB,CAAC,mBAAmB;YACvE;YAEA,wBAAwB;YACxB,IAAI,CAAC,mBAAmB,CAAC,mBAAmB;YAE5C,qBAAqB;YACrB,IAAI,CAAC,gBAAgB,CAAC,WAAW;YAEjC,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,UAAU,aAAa,EAAE,kBAAkB,CAAC;YACrE,IAAI,CAAC,IAAI,CAAC,qBAAqB;gBAAE;gBAAW,WAAW;gBAAmB,SAAS;YAAY;YAE/F,OAAO;QAET,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,IAAI,CAAC,IAAI,CAAC,iBAAiB;gBAAE;gBAAW;YAAM;YAE9C,kBAAkB;YAClB,OAAO;QACT;IACF;IAEA,MAAc,iBAAiB,SAAiB,EAAE,OAA8B,EAAwB;QACtG,MAAM,uBAAuB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,UAAU;QAExE,OAAO;YACL,UAAU;YACV,YAAY,SAAS;YACrB,eAAe,SAAS;YACxB;YACA,gBAAgB,SAAS;YACzB,SAAS,SAAS,WAAW;YAC7B,UAAU,SAAS,YAAY,EAAE;YACjC,YAAY,IAAI;QAClB;IACF;IAEQ,kBAAkB,OAAoB,EAAqB;QACjE,OAAO,IAAI,CAAC,YAAY,CACrB,MAAM,CAAC,CAAA,OAAQ,IAAI,CAAC,WAAW,CAAC,MAAM,UACtC,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,QAAQ,GAAG,EAAE,QAAQ;IAC3C;IAEQ,YAAY,IAAqB,EAAE,OAAoB,EAAW;QACxE,MAAM,aAAa,KAAK,UAAU;QAElC,uBAAuB;QACvB,IAAI,WAAW,aAAa,IAAI,CAAC,WAAW,aAAa,CAAC,IAAI,CAAC,QAAQ,QAAQ,GAAG;YAChF,OAAO;QACT;QAEA,mBAAmB;QACnB,IAAI,WAAW,SAAS,EAAE;YACxB,MAAM,MAAM,IAAI;YAChB,MAAM,cAAc,CAAC,EAAE,IAAI,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAE,IAAI,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC;YACnH,IAAI,cAAc,WAAW,SAAS,CAAC,KAAK,IAAI,cAAc,WAAW,SAAS,CAAC,GAAG,EAAE;gBACtF,OAAO;YACT;QACF;QAEA,oBAAoB;QACpB,IAAI,WAAW,SAAS,IAAI,CAAC,WAAW,SAAS,CAAC,QAAQ,CAAC,QAAQ,UAAU,CAAC,MAAM,KAAK;YACvF,OAAO;QACT;QAEA,iBAAiB;QACjB,IAAI,WAAW,QAAQ,EAAE;YACvB,MAAM,aAAa,WAAW,QAAQ,CAAC,IAAI,CAAC,CAAA,UAC1C,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAA,iBACpB,eAAe,WAAW,GAAG,QAAQ,CAAC,QAAQ,WAAW;YAG7D,IAAI,CAAC,YAAY;gBACf,OAAO;YACT;QACF;QAEA,gBAAgB;QAChB,IAAI,WAAW,OAAO,IAAI,QAAQ,OAAO,KAAK,WAAW,OAAO,EAAE;YAChE,OAAO;QACT;QAEA,OAAO;IACT;IAEQ,sBAAsB,KAAwB,EAAiB;QACrE,KAAK,MAAM,QAAQ,MAAO;YACxB,IAAI,KAAK,OAAO,CAAC,iBAAiB,EAAE;gBAClC,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,iBAAiB;gBACpE,IAAI,aAAa,IAAI,CAAC,oBAAoB,CAAC,YAAY;oBACrD,OAAO,KAAK,OAAO,CAAC,iBAAiB;gBACvC;YACF;QACF;QACA,OAAO;IACT;IAEQ,sBAAsB,OAAoB,EAAU;QAC1D,MAAM,sBAAsB,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAC1D,MAAM,CAAC,CAAA,OAAQ,IAAI,CAAC,oBAAoB,CAAC,OACzC,IAAI,CAAC,CAAC,GAAG;YACR,yDAAyD;YACzD,IAAI,EAAE,WAAW,KAAK,EAAE,WAAW,EAAE;gBACnC,OAAO,EAAE,WAAW,GAAG,EAAE,WAAW;YACtC;YACA,OAAO,EAAE,QAAQ,GAAG,EAAE,QAAQ;QAChC;QAEF,IAAI,oBAAoB,MAAM,KAAK,GAAG;YACpC,OAAO,OAAO,WAAW;QAC3B;QAEA,OAAO,mBAAmB,CAAC,EAAE,CAAC,EAAE;IAClC;IAEQ,qBAAqB,SAA2B,EAAW;QACjE,OAAO,UAAU,YAAY,KAAK,eAC3B,UAAU,WAAW,GAAG,UAAU,kBAAkB;IAC7D;IAEQ,yBAAyB,iBAAyB,EAAE,OAAoB,EAAU;QACxF,+CAA+C;QAC/C,MAAM,WAAW,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QACrC,IAAI,CAAC,UAAU,OAAO;QAEtB,MAAM,eAAe,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IACnD,MAAM,CAAC,CAAA,OACN,KAAK,EAAE,KAAK,qBACZ,IAAI,CAAC,oBAAoB,CAAC,SAC1B,KAAK,eAAe,CAAC,IAAI,CAAC,CAAA,OAAQ,SAAS,eAAe,CAAC,QAAQ,CAAC,QAErE,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,QAAQ,GAAG,EAAE,QAAQ;QAEzC,OAAO,aAAa,MAAM,GAAG,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE,GAAG;IACxD;IAEQ,oBAAoB,WAAmB,EAAE,KAAa,EAAQ;QACpE,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QACtC,IAAI,WAAW;YACb,UAAU,WAAW,GAAG,KAAK,GAAG,CAAC,GAAG,UAAU,WAAW,GAAG;YAC5D,IAAI,CAAC,IAAI,CAAC,gBAAgB;gBAAE;gBAAa,SAAS,UAAU,WAAW;YAAC;QAC1E;IACF;IAEQ,iBAAiB,SAAiB,EAAE,OAAoB,EAAQ;QACtE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY;YACpC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE;QACpC;QACA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAY,IAAI,CAAC;QAEtC,iCAAiC;QACjC,MAAM,UAAU,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;QACrC,IAAI,QAAQ,MAAM,GAAG,IAAI;YACvB,QAAQ,MAAM,CAAC,GAAG,QAAQ,MAAM,GAAG;QACrC;IACF;IAEO,iBAAiB,WAAmB,EAAQ;QACjD,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC;IACzC;IAEO,yBAAyB,WAAmB,EAAE,YAA8C,EAAQ;QACzG,MAAM,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QACtC,IAAI,WAAW;YACb,UAAU,YAAY,GAAG;YACzB,IAAI,CAAC,IAAI,CAAC,uBAAuB;gBAAE;gBAAa;YAAa;QAC/D;IACF;IAEO,oBAAoB,WAAmB,EAAgC;QAC5E,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;IAC7B;IAEO,mBAAuC;QAC5C,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM;IAC1C;IAEO,yBAA6C;QAClD,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,MAAM,CAAC,CAAA,OAAQ,IAAI,CAAC,oBAAoB,CAAC;IACvF;IAEO,eAAe,IAAqB,EAAQ;QACjD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,QAAQ,GAAG,EAAE,QAAQ;IAC1D;IAEO,kBAAkB,MAAc,EAAQ;QAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IACnE;IAEO,GAAG,KAAa,EAAE,QAAkB,EAAQ;QACjD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ;YACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE;QACnC;QACA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAQ,IAAI,CAAC;IACvC;IAEO,IAAI,KAAa,EAAE,QAAkB,EAAQ;QAClD,MAAM,YAAY,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;QAC1C,IAAI,WAAW;YACb,MAAM,QAAQ,UAAU,OAAO,CAAC;YAChC,IAAI,QAAQ,CAAC,GAAG;gBACd,UAAU,MAAM,CAAC,OAAO;YAC1B;QACF;IACF;IAEQ,KAAK,KAAa,EAAE,IAAU,EAAQ;QAC5C,MAAM,YAAY,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;QAC1C,IAAI,WAAW;YACb,UAAU,OAAO,CAAC,CAAA,WAAY,SAAS;QACzC;IACF;AACF"}},
    {"offset": {"line": 1010, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1015, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/voice/SIPClient.ts"],"sourcesContent":["import { UserAgent, Inviter, Invitation, SessionState } from 'sip.js';\nimport { AudioProcessor } from './AudioProcessor';\nimport { ExecutiveVoiceRouter } from './ExecutiveVoiceRouter';\n\nexport interface SIPConfig {\n  uri: string;\n  transportOptions: {\n    server: string;\n    connectionTimeout?: number;\n    maxReconnectionAttempts?: number;\n    reconnectionTimeout?: number;\n  };\n  authorizationUsername?: string;\n  authorizationPassword?: string;\n  displayName?: string;\n}\n\nexport interface CallSession {\n  id: string;\n  executive: string;\n  remoteUri: string;\n  state: SessionState;\n  startTime: Date;\n  duration: number;\n  isInbound: boolean;\n  audioStream?: MediaStream;\n}\n\nexport class SIPClient {\n  private ua: UserAgent | null = null;\n  private audioProcessor: AudioProcessor;\n  private voiceRouter: ExecutiveVoiceRouter;\n  private activeSessions: Map<string, CallSession> = new Map();\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  constructor(\n    private config: SIPConfig,\n    audioProcessor?: AudioProcessor,\n    voiceRouter?: ExecutiveVoiceRouter\n  ) {\n    this.audioProcessor = audioProcessor || new AudioProcessor();\n    this.voiceRouter = voiceRouter || new ExecutiveVoiceRouter();\n    this.initializeEventListeners();\n  }\n\n  private initializeEventListeners(): void {\n    this.eventListeners.set('registered', []);\n    this.eventListeners.set('unregistered', []);\n    this.eventListeners.set('registrationFailed', []);\n    this.eventListeners.set('invite', []);\n    this.eventListeners.set('connected', []);\n    this.eventListeners.set('disconnected', []);\n    this.eventListeners.set('failed', []);\n    this.eventListeners.set('bye', []);\n  }\n\n  public async initialize(): Promise<void> {\n    try {\n      // Create User Agent\n      const uri = UserAgent.makeURI(this.config.uri);\n      if (!uri) {\n        throw new Error(`Failed to create valid URI from ${this.config.uri}`);\n      }\n\n      this.ua = new UserAgent({\n        uri: uri,\n        transportOptions: this.config.transportOptions,\n        authorizationUsername: this.config.authorizationUsername,\n        authorizationPassword: this.config.authorizationPassword,\n        displayName: this.config.displayName,\n        delegate: {\n          onInvite: this.handleIncomingCall.bind(this),\n          onConnect: () => this.emit('connected'),\n          onDisconnect: () => this.emit('disconnected'),\n        },\n        allowLegacyNotifications: true,\n        contactName: this.config.displayName,\n        contactParams: {},\n        forceRport: false,\n        logLevel: 'warn',\n        noAnswerTimeout: 60,\n        sessionDescriptionHandlerFactoryOptions: {\n          constraints: {\n            audio: true,\n            video: false\n          },\n          peerConnectionConfiguration: {\n            iceServers: [\n              { urls: 'stun:stun.l.google.com:19302' },\n              { urls: 'stun:stun1.l.google.com:19302' }\n            ]\n          }\n        },\n        userAgentString: 'SOVREN AI Executive Command Center v1.0'\n      });\n\n      // Set up event handlers\n      this.ua.delegate = {\n        onInvite: this.handleIncomingCall.bind(this),\n        onConnect: () => this.emit('connected'),\n        onDisconnect: () => this.emit('disconnected'),\n      };\n\n      // Start the User Agent\n      await this.ua.start();\n      \n      console.log('SIP Client initialized successfully');\n      this.emit('registered');\n      \n    } catch (error) {\n      console.error('Failed to initialize SIP Client:', error);\n      this.emit('registrationFailed', error);\n      throw error;\n    }\n  }\n\n  public async makeCall(targetUri: string, executiveId: string): Promise<string> {\n    if (!this.ua) {\n      throw new Error('SIP Client not initialized');\n    }\n\n    try {\n      const target = UserAgent.makeURI(targetUri);\n      if (!target) {\n        throw new Error(`Failed to create valid URI from ${targetUri}`);\n      }\n\n      const inviter = new Inviter(this.ua, target, {\n        sessionDescriptionHandlerOptions: {\n          constraints: {\n            audio: true,\n            video: false\n          }\n        }\n      });\n\n      const sessionId = this.generateSessionId();\n      const callSession: CallSession = {\n        id: sessionId,\n        executive: executiveId,\n        remoteUri: targetUri,\n        state: SessionState.Initial,\n        startTime: new Date(),\n        duration: 0,\n        isInbound: false\n      };\n\n      this.activeSessions.set(sessionId, callSession);\n\n      // Set up session event handlers\n      inviter.delegate = {\n        onBye: () => this.handleCallEnd(sessionId),\n        onSessionDescriptionHandler: (sdh) => {\n          if (sdh && (sdh as any).peerConnection) {\n            callSession.audioStream = (sdh as any).peerConnection?.getLocalStreams()?.[0];\n            if (callSession.audioStream) {\n              this.audioProcessor.processOutboundAudio(callSession.audioStream, executiveId);\n            }\n          }\n        }\n      };\n\n      // Send the INVITE\n      await inviter.invite();\n      \n      console.log(`Outbound call initiated: ${sessionId} for executive ${executiveId}`);\n      this.emit('invite', callSession);\n      \n      return sessionId;\n      \n    } catch (error) {\n      console.error('Failed to make call:', error);\n      throw error;\n    }\n  }\n\n  private async handleIncomingCall(invitation: Invitation): Promise<void> {\n    const sessionId = this.generateSessionId();\n    const assignedExecutive = await this.voiceRouter.assignExecutive(invitation.remoteIdentity.uri.toString());\n    \n    const callSession: CallSession = {\n      id: sessionId,\n      executive: assignedExecutive,\n      remoteUri: invitation.remoteIdentity.uri.toString(),\n      state: invitation.state,\n      startTime: new Date(),\n      duration: 0,\n      isInbound: true\n    };\n\n    this.activeSessions.set(sessionId, callSession);\n\n    // Set up invitation event handlers\n    invitation.delegate = {\n      onBye: () => this.handleCallEnd(sessionId),\n      onSessionDescriptionHandler: (sdh) => {\n        if (sdh && (sdh as any).peerConnection) {\n          callSession.audioStream = (sdh as any).peerConnection?.getRemoteStreams()?.[0];\n          if (callSession.audioStream) {\n            this.audioProcessor.processInboundAudio(callSession.audioStream, assignedExecutive);\n          }\n        }\n      }\n    };\n\n    console.log(`Incoming call received: ${sessionId} assigned to ${assignedExecutive}`);\n    this.emit('invite', callSession);\n\n    // Auto-accept for now (in production, this would be configurable)\n    try {\n      await invitation.accept();\n      callSession.state = SessionState.Established;\n      this.emit('connected', callSession);\n    } catch (error) {\n      console.error('Failed to accept incoming call:', error);\n      this.handleCallEnd(sessionId);\n    }\n  }\n\n  private handleCallEnd(sessionId: string): void {\n    const session = this.activeSessions.get(sessionId);\n    if (session) {\n      session.duration = Date.now() - session.startTime.getTime();\n      console.log(`Call ended: ${sessionId}, duration: ${session.duration}ms`);\n      \n      // Clean up audio processing\n      if (session.audioStream) {\n        this.audioProcessor.stopProcessing(session.audioStream);\n      }\n      \n      this.activeSessions.delete(sessionId);\n      this.emit('bye', session);\n    }\n  }\n\n  public async endCall(sessionId: string): Promise<void> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`Session not found: ${sessionId}`);\n    }\n\n    // Implementation would depend on whether it's an Inviter or Invitation\n    // For now, we'll simulate ending the call\n    this.handleCallEnd(sessionId);\n  }\n\n  public getActiveSessions(): CallSession[] {\n    return Array.from(this.activeSessions.values());\n  }\n\n  public getSessionById(sessionId: string): CallSession | undefined {\n    return this.activeSessions.get(sessionId);\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n  }\n\n  public on(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  public off(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    if (this.ua) {\n      // End all active sessions\n      for (const sessionId of this.activeSessions.keys()) {\n        await this.endCall(sessionId);\n      }\n      \n      // Stop the User Agent\n      await this.ua.stop();\n      this.ua = null;\n      \n      console.log('SIP Client disconnected');\n      this.emit('disconnected');\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1264, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1269, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/voice/StyleTTS2Engine.ts"],"sourcesContent":["// VoiceModel import removed as it's not used\n\nexport interface StyleTTS2Config {\n  modelPath: string;\n  vocoder: 'hifigan' | 'melgan' | 'waveglow';\n  device: 'cpu' | 'gpu' | 'webgpu';\n  batchSize: number;\n  maxLength: number;\n  temperature: number;\n  lengthScale: number;\n  noiseScale: number;\n  enableWebAssembly: boolean;\n}\n\nexport interface StyleTTS2Model {\n  id: string;\n  name: string;\n  modelData: ArrayBuffer;\n  vocoderData: ArrayBuffer;\n  configData: any;\n  isLoaded: boolean;\n  loadTime: number;\n  memoryUsage: number;\n}\n\nexport interface SynthesisParameters {\n  text: string;\n  voiceId: string;\n  speed: number;\n  pitch: number;\n  energy: number;\n  emotion: 'neutral' | 'happy' | 'serious' | 'concerned' | 'excited' | 'authoritative';\n  style: number[];\n  prosody: {\n    rate: number;\n    volume: number;\n    emphasis: number[];\n  };\n}\n\nexport class StyleTTS2Engine {\n  private config: StyleTTS2Config;\n  private models: Map<string, StyleTTS2Model> = new Map();\n  private wasmModule: any = null;\n  private isInitialized: boolean = false;\n  private webGPUDevice: any | null = null;\n  private audioContext: AudioContext | null = null;\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  constructor(config: StyleTTS2Config) {\n    this.config = config;\n    this.initializeEventListeners();\n  }\n\n  private initializeEventListeners(): void {\n    this.eventListeners.set('engineReady', []);\n    this.eventListeners.set('modelLoaded', []);\n    this.eventListeners.set('synthesisProgress', []);\n    this.eventListeners.set('synthesisComplete', []);\n    this.eventListeners.set('error', []);\n  }\n\n  public async initialize(): Promise<void> {\n    try {\n      console.log('Initializing StyleTTS2 Neural Voice Engine...');\n\n      // Initialize WebAssembly if enabled\n      if (this.config.enableWebAssembly) {\n        await this.initializeWebAssembly();\n      }\n\n      // Initialize WebGPU if available\n      if (this.config.device === 'webgpu') {\n        await this.initializeWebGPU();\n      }\n\n      // Initialize Audio Context\n      this.audioContext = new AudioContext({\n        sampleRate: 22050,\n        latencyHint: 'interactive'\n      });\n\n      // Load executive voice models\n      await this.loadExecutiveModels();\n\n      this.isInitialized = true;\n      console.log('✓ StyleTTS2 Engine initialized successfully');\n      this.emit('engineReady');\n\n    } catch (error) {\n      console.error('Failed to initialize StyleTTS2 Engine:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  private async initializeWebAssembly(): Promise<void> {\n    try {\n      console.log('Loading StyleTTS2 WebAssembly module...');\n      \n      // In a real implementation, this would load the actual WASM module\n      // For now, we'll simulate the loading process\n      const wasmResponse = await fetch('/wasm/styletts2.wasm');\n      await wasmResponse.arrayBuffer(); // Load but don't store unused bytes\n\n      // Simulate WASM compilation and instantiation\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      this.wasmModule = {\n        synthesize: this.wasmSynthesize.bind(this),\n        loadModel: this.wasmLoadModel.bind(this),\n        setParameters: this.wasmSetParameters.bind(this)\n      };\n      \n      console.log('✓ WebAssembly module loaded');\n      \n    } catch (error) {\n      console.warn('WebAssembly not available, falling back to JavaScript implementation');\n      this.config.enableWebAssembly = false;\n    }\n  }\n\n  private async initializeWebGPU(): Promise<void> {\n    try {\n      if (!(navigator as any).gpu) {\n        throw new Error('WebGPU not supported');\n      }\n\n      const adapter = await (navigator as any).gpu.requestAdapter();\n      if (!adapter) {\n        throw new Error('No WebGPU adapter found');\n      }\n\n      this.webGPUDevice = await adapter.requestDevice();\n      console.log('✓ WebGPU device initialized');\n\n    } catch (error) {\n      console.warn('WebGPU not available, falling back to CPU processing');\n      this.config.device = 'cpu';\n    }\n  }\n\n  private async loadExecutiveModels(): Promise<void> {\n    const executiveModels = [\n      {\n        id: 'sovren-ai-neural',\n        name: 'SOVREN AI Neural Core Voice',\n        modelPath: '/models/sovren-ai-neural.onnx',\n        vocoderPath: '/models/hifigan-sovren.onnx',\n        configPath: '/models/sovren-config.json'\n      },\n      {\n        id: 'ceo-authoritative',\n        name: 'CEO Executive Voice',\n        modelPath: '/models/ceo-authoritative.onnx',\n        vocoderPath: '/models/hifigan-ceo.onnx',\n        configPath: '/models/ceo-config.json'\n      },\n      {\n        id: 'cfo-analytical',\n        name: 'CFO Analytical Voice',\n        modelPath: '/models/cfo-analytical.onnx',\n        vocoderPath: '/models/hifigan-cfo.onnx',\n        configPath: '/models/cfo-config.json'\n      },\n      {\n        id: 'cto-technical',\n        name: 'CTO Technical Voice',\n        modelPath: '/models/cto-technical.onnx',\n        vocoderPath: '/models/hifigan-cto.onnx',\n        configPath: '/models/cto-config.json'\n      },\n      {\n        id: 'cmo-persuasive',\n        name: 'CMO Persuasive Voice',\n        modelPath: '/models/cmo-persuasive.onnx',\n        vocoderPath: '/models/hifigan-cmo.onnx',\n        configPath: '/models/cmo-config.json'\n      },\n      {\n        id: 'coo-operational',\n        name: 'COO Operational Voice',\n        modelPath: '/models/coo-operational.onnx',\n        vocoderPath: '/models/hifigan-coo.onnx',\n        configPath: '/models/coo-config.json'\n      },\n      {\n        id: 'chro-empathetic',\n        name: 'CHRO Empathetic Voice',\n        modelPath: '/models/chro-empathetic.onnx',\n        vocoderPath: '/models/hifigan-chro.onnx',\n        configPath: '/models/chro-config.json'\n      },\n      {\n        id: 'clo-precise',\n        name: 'CLO Precise Voice',\n        modelPath: '/models/clo-precise.onnx',\n        vocoderPath: '/models/hifigan-clo.onnx',\n        configPath: '/models/clo-config.json'\n      },\n      {\n        id: 'cso-strategic',\n        name: 'CSO Strategic Voice',\n        modelPath: '/models/cso-strategic.onnx',\n        vocoderPath: '/models/hifigan-cso.onnx',\n        configPath: '/models/cso-config.json'\n      }\n    ];\n\n    // Load models in parallel for faster initialization\n    const loadPromises = executiveModels.map(model => this.loadModel(model));\n    await Promise.all(loadPromises);\n  }\n\n  private async loadModel(modelInfo: any): Promise<void> {\n    try {\n      console.log(`Loading StyleTTS2 model: ${modelInfo.name}`);\n      \n      // Simulate model loading (in real implementation, would load actual ONNX models)\n      const [modelData, vocoderData, configData] = await Promise.all([\n        this.loadModelData(modelInfo.modelPath),\n        this.loadModelData(modelInfo.vocoderPath),\n        this.loadConfigData(modelInfo.configPath)\n      ]);\n\n      const model: StyleTTS2Model = {\n        id: modelInfo.id,\n        name: modelInfo.name,\n        modelData,\n        vocoderData,\n        configData,\n        isLoaded: true,\n        loadTime: Date.now(),\n        memoryUsage: modelData.byteLength + vocoderData.byteLength\n      };\n\n      this.models.set(modelInfo.id, model);\n      \n      console.log(`✓ Model loaded: ${modelInfo.name} (${(model.memoryUsage / 1024 / 1024).toFixed(1)}MB)`);\n      this.emit('modelLoaded', { modelId: modelInfo.id, model });\n\n    } catch (error) {\n      console.error(`Failed to load model ${modelInfo.id}:`, error);\n      this.emit('error', { modelId: modelInfo.id, error });\n    }\n  }\n\n  private async loadModelData(_path: string): Promise<ArrayBuffer> {\n    // Simulate model data loading\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Create mock model data\n    const size = 50 * 1024 * 1024; // 50MB mock model\n    return new ArrayBuffer(size);\n  }\n\n  /**\n   * Call backend TTS service for heavy processing\n   */\n  private async callBackendTTSService(parameters: SynthesisParameters): Promise<ArrayBuffer | null> {\n    try {\n      const response = await fetch('/api/tts/synthesize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text: parameters.text,\n          voiceId: parameters.voiceId,\n          priority: 'high',\n          format: 'wav',\n          sampleRate: 22050\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Backend TTS service error: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(`TTS synthesis failed: ${result.error}`);\n      }\n\n      // Convert base64 audio data to ArrayBuffer\n      const audioBuffer = this.base64ToArrayBuffer(result.audioData);\n\n      console.log(`✅ Backend TTS completed: ${audioBuffer.byteLength} bytes in ${result.processingTime}ms`);\n      return audioBuffer;\n\n    } catch (error) {\n      console.warn('Backend TTS service call failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Convert base64 string to ArrayBuffer\n   */\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  private async loadConfigData(_path: string): Promise<any> {\n    // Simulate config loading\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    return {\n      sample_rate: 22050,\n      hop_length: 256,\n      win_length: 1024,\n      n_mel: 80,\n      n_fft: 1024,\n      f_min: 0,\n      f_max: 11025,\n      max_wav_value: 32768.0\n    };\n  }\n\n  public async synthesize(parameters: SynthesisParameters): Promise<ArrayBuffer> {\n    if (!this.isInitialized) {\n      throw new Error('StyleTTS2 Engine not initialized');\n    }\n\n    const model = this.models.get(parameters.voiceId);\n    if (!model) {\n      throw new Error(`Voice model not found: ${parameters.voiceId}`);\n    }\n\n    try {\n      console.log(`🎤 Using TTS Backend Service: \"${parameters.text}\" with ${model.name}`);\n\n      // Try backend service first\n      try {\n        const backendResult = await this.callBackendTTSService(parameters);\n        if (backendResult) {\n          this.emit('synthesisProgress', { stage: 'complete', progress: 1.0 });\n          return backendResult;\n        }\n      } catch (backendError) {\n        console.warn('Backend TTS service unavailable, using local processing:', backendError);\n      }\n\n      // Fallback to local processing\n      console.log(`🔄 Fallback: Local StyleTTS2 processing for \"${parameters.text}\"`);\n\n      // Preprocess text\n      const processedText = this.preprocessText(parameters.text);\n\n      // Generate mel-spectrogram\n      this.emit('synthesisProgress', { stage: 'mel_generation', progress: 0.2 });\n      const melSpectrogram = await this.generateMelSpectrogram(processedText, model, parameters);\n\n      // Generate audio with vocoder\n      this.emit('synthesisProgress', { stage: 'vocoding', progress: 0.6 });\n      const audioBuffer = await this.vocode(melSpectrogram, model, parameters);\n\n      // Post-process audio\n      this.emit('synthesisProgress', { stage: 'post_processing', progress: 0.9 });\n      const finalAudio = await this.postProcessAudio(audioBuffer, parameters);\n\n      this.emit('synthesisProgress', { stage: 'complete', progress: 1.0 });\n      this.emit('synthesisComplete', { voiceId: parameters.voiceId, audioBuffer: finalAudio });\n      \n      return finalAudio;\n\n    } catch (error) {\n      console.error('StyleTTS2 synthesis failed:', error);\n      this.emit('error', { voiceId: parameters.voiceId, error });\n      throw error;\n    }\n  }\n\n  private preprocessText(text: string): string {\n    // Text normalization and phoneme conversion\n    return text\n      .toLowerCase()\n      .replace(/[^\\w\\s.,!?-]/g, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  private async generateMelSpectrogram(text: string, model: StyleTTS2Model, params: SynthesisParameters): Promise<Float32Array> {\n    if (this.config.enableWebAssembly && this.wasmModule) {\n      return await this.wasmModule.synthesize(text, model, params);\n    } else {\n      return await this.jsSynthesize(text, model, params);\n    }\n  }\n\n  private async jsSynthesize(text: string, model: StyleTTS2Model, params: SynthesisParameters): Promise<Float32Array> {\n    // JavaScript fallback implementation\n    const duration = text.length * 0.1; // Estimate duration\n    const melFrames = Math.floor(duration * 22050 / 256); // Hop length = 256\n    const melChannels = 80;\n    \n    // Simulate mel-spectrogram generation\n    await new Promise(resolve => setTimeout(resolve, text.length * 10));\n    \n    const melSpectrogram = new Float32Array(melFrames * melChannels);\n    \n    // Generate synthetic mel-spectrogram based on voice characteristics\n    for (let frame = 0; frame < melFrames; frame++) {\n      for (let mel = 0; mel < melChannels; mel++) {\n        const freq = mel * 11025 / melChannels;\n        const time = frame * 256 / 22050;\n        \n        // Simulate formant structure\n        let energy = 0;\n        const formants = [800, 1200, 2400]; // Basic formants\n        \n        for (const formant of formants) {\n          const distance = Math.abs(freq - formant);\n          energy += Math.exp(-distance / 200) * (1 + Math.sin(time * 2 * Math.PI * 150));\n        }\n        \n        // Apply voice-specific modifications\n        energy *= this.getVoiceCharacteristics(params.voiceId, freq);\n        \n        melSpectrogram[frame * melChannels + mel] = energy;\n      }\n    }\n    \n    return melSpectrogram;\n  }\n\n  private getVoiceCharacteristics(voiceId: string, frequency: number): number {\n    const characteristics = {\n      'ceo-authoritative': { low: 1.2, mid: 1.0, high: 0.8 },\n      'cfo-analytical': { low: 0.9, mid: 1.1, high: 1.0 },\n      'cto-technical': { low: 1.0, mid: 1.0, high: 1.1 },\n      'cmo-persuasive': { low: 1.1, mid: 1.2, high: 1.0 },\n      'coo-operational': { low: 1.0, mid: 1.0, high: 0.9 },\n      'chro-empathetic': { low: 1.1, mid: 1.1, high: 0.9 },\n      'clo-precise': { low: 0.8, mid: 1.0, high: 1.0 },\n      'cso-strategic': { low: 1.0, mid: 1.1, high: 1.0 }\n    };\n    \n    const char = characteristics[voiceId as keyof typeof characteristics] || { low: 1.0, mid: 1.0, high: 1.0 };\n    \n    if (frequency < 500) return char.low;\n    if (frequency < 2000) return char.mid;\n    return char.high;\n  }\n\n  private async vocode(melSpectrogram: Float32Array, model: StyleTTS2Model, params: SynthesisParameters): Promise<ArrayBuffer> {\n    // Simulate HiFi-GAN vocoding\n    const melFrames = melSpectrogram.length / 80;\n    const audioSamples = melFrames * 256; // Hop length\n    \n    await new Promise(resolve => setTimeout(resolve, melFrames * 2));\n    \n    const audioBuffer = new ArrayBuffer(audioSamples * 2); // 16-bit audio\n    const audioView = new Int16Array(audioBuffer);\n    \n    // Generate audio from mel-spectrogram\n    for (let i = 0; i < audioSamples; i++) {\n      const melFrame = Math.floor(i / 256);\n      const melIndex = melFrame * 80;\n      \n      let sample = 0;\n      for (let mel = 0; mel < 80; mel++) {\n        const melValue = melSpectrogram[melIndex + mel] || 0;\n        const freq = mel * 11025 / 80;\n        const phase = (i / 22050) * 2 * Math.PI * freq;\n        sample += melValue * Math.sin(phase) * 0.01;\n      }\n      \n      // Apply prosody modifications\n      sample *= params.prosody.volume;\n      sample = Math.tanh(sample); // Soft clipping\n      \n      audioView[i] = Math.max(-32768, Math.min(32767, sample * 16384));\n    }\n    \n    return audioBuffer;\n  }\n\n  private async postProcessAudio(audioBuffer: ArrayBuffer, params: SynthesisParameters): Promise<ArrayBuffer> {\n    // Apply final processing (normalization, filtering, etc.)\n    const audioView = new Int16Array(audioBuffer);\n    \n    // Normalize audio\n    let maxAmplitude = 0;\n    for (let i = 0; i < audioView.length; i++) {\n      maxAmplitude = Math.max(maxAmplitude, Math.abs(audioView[i]));\n    }\n    \n    if (maxAmplitude > 0) {\n      const normalizationFactor = 16384 / maxAmplitude;\n      for (let i = 0; i < audioView.length; i++) {\n        audioView[i] *= normalizationFactor;\n      }\n    }\n    \n    return audioBuffer;\n  }\n\n  // WebAssembly implementations (stubs for now)\n  private async wasmSynthesize(text: string, model: StyleTTS2Model, params: SynthesisParameters): Promise<Float32Array> {\n    // Would call actual WASM function\n    return this.jsSynthesize(text, model, params);\n  }\n\n  private wasmLoadModel(modelData: ArrayBuffer): boolean {\n    // Would load model into WASM memory\n    return true;\n  }\n\n  private wasmSetParameters(params: any): void {\n    // Would set WASM parameters\n  }\n\n  public getLoadedModels(): StyleTTS2Model[] {\n    return Array.from(this.models.values());\n  }\n\n  public getModelById(modelId: string): StyleTTS2Model | undefined {\n    return this.models.get(modelId);\n  }\n\n  public getMemoryUsage(): number {\n    return Array.from(this.models.values()).reduce((total, model) => total + model.memoryUsage, 0);\n  }\n\n  public on(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  public off(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('Shutting down StyleTTS2 Engine...');\n    \n    // Clear models\n    this.models.clear();\n    \n    // Close audio context\n    if (this.audioContext) {\n      await this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    // Clean up WebGPU\n    if (this.webGPUDevice) {\n      this.webGPUDevice.destroy();\n      this.webGPUDevice = null;\n    }\n    \n    this.isInitialized = false;\n    console.log('✓ StyleTTS2 Engine shutdown complete');\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1780, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1785, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/voice/VoiceSynthesizer.ts"],"sourcesContent":["import { StyleTTS2Engine, StyleTTS2Config, SynthesisParameters } from './StyleTTS2Engine';\n\nexport interface VoiceModel {\n  id: string;\n  name: string;\n  language: string;\n  gender: 'male' | 'female' | 'neutral';\n  characteristics: {\n    pitch: number;\n    speed: number;\n    tone: 'authoritative' | 'analytical' | 'technical' | 'persuasive' | 'operational' | 'empathetic' | 'precise' | 'strategic';\n    accent: string;\n  };\n  modelPath: string;\n  isLoaded: boolean;\n}\n\nexport interface SynthesisRequest {\n  id: string;\n  text: string;\n  voiceModel: string;\n  priority: 'low' | 'normal' | 'high';\n  timestamp: Date;\n  options?: {\n    speed?: number;\n    pitch?: number;\n    volume?: number;\n    emotion?: 'neutral' | 'happy' | 'serious' | 'concerned' | 'excited';\n  };\n}\n\nexport interface SynthesisResult {\n  requestId: string;\n  audioBuffer: ArrayBuffer;\n  duration: number;\n  format: 'wav' | 'mp3' | 'ogg';\n  sampleRate: number;\n}\n\nexport class VoiceSynthesizer {\n  private voiceModels: Map<string, VoiceModel> = new Map();\n  private synthesisQueue: SynthesisRequest[] = [];\n  private isProcessing: boolean = false;\n  private audioContext: AudioContext | null = null;\n  private cache: Map<string, SynthesisResult> = new Map();\n  private eventListeners: Map<string, Function[]> = new Map();\n  private workerPool: Worker[] = [];\n  private maxWorkers: number = 4;\n  private styleTTS2Engine: StyleTTS2Engine | null = null;\n\n  constructor(private config: {\n    enabled: boolean;\n    modelsPath: string;\n    cacheSize: number;\n  }) {\n    this.initializeEventListeners();\n    this.initializeVoiceModels();\n  }\n\n  private initializeEventListeners(): void {\n    this.eventListeners.set('ready', []);\n    this.eventListeners.set('synthesisComplete', []);\n    this.eventListeners.set('synthesisError', []);\n    this.eventListeners.set('modelLoaded', []);\n    this.eventListeners.set('queueUpdated', []);\n    this.eventListeners.set('error', []);\n  }\n\n  private initializeVoiceModels(): void {\n    const models: VoiceModel[] = [\n      {\n        id: 'sovren-ai-neural',\n        name: 'SOVREN AI Neural Core Voice',\n        language: 'en-US',\n        gender: 'neutral',\n        characteristics: {\n          pitch: 1.0,\n          speed: 1.1,\n          tone: 'authoritative',\n          accent: 'neural-synthetic'\n        },\n        modelPath: `${this.config.modelsPath}/sovren-ai-neural.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'ceo-authoritative',\n        name: 'CEO Executive Voice',\n        language: 'en-US',\n        gender: 'male',\n        characteristics: {\n          pitch: 0.8,\n          speed: 0.9,\n          tone: 'authoritative',\n          accent: 'american-executive'\n        },\n        modelPath: `${this.config.modelsPath}/ceo-authoritative.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'cfo-analytical',\n        name: 'CFO Analytical Voice',\n        language: 'en-US',\n        gender: 'female',\n        characteristics: {\n          pitch: 0.9,\n          speed: 0.95,\n          tone: 'analytical',\n          accent: 'professional-precise'\n        },\n        modelPath: `${this.config.modelsPath}/cfo-analytical.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'cmo-charismatic',\n        name: 'CMO Charismatic Voice',\n        language: 'en-US',\n        gender: 'male',\n        characteristics: {\n          pitch: 0.85,\n          speed: 1.05,\n          tone: 'charismatic',\n          accent: 'engaging-persuasive'\n        },\n        modelPath: `${this.config.modelsPath}/cmo-charismatic.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'cto-technical',\n        name: 'CTO Technical Voice',\n        language: 'en-US',\n        gender: 'neutral',\n        characteristics: {\n          pitch: 0.9,\n          speed: 1.0,\n          tone: 'technical',\n          accent: 'clear-methodical'\n        },\n        modelPath: `${this.config.modelsPath}/cto-technical.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'legal-authoritative',\n        name: 'Legal Counsel Voice',\n        language: 'en-US',\n        gender: 'female',\n        characteristics: {\n          pitch: 0.85,\n          speed: 0.9,\n          tone: 'formal',\n          accent: 'legal-precise'\n        },\n        modelPath: `${this.config.modelsPath}/legal-authoritative.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'coo-efficient',\n        name: 'COO Efficient Voice',\n        language: 'en-US',\n        gender: 'male',\n        characteristics: {\n          pitch: 0.88,\n          speed: 1.1,\n          tone: 'efficient',\n          accent: 'results-focused'\n        },\n        modelPath: `${this.config.modelsPath}/coo-efficient.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'chro-empathetic',\n        name: 'CHRO Empathetic Voice',\n        language: 'en-US',\n        gender: 'female',\n        characteristics: {\n          pitch: 0.95,\n          speed: 0.95,\n          tone: 'empathetic',\n          accent: 'warm-professional'\n        },\n        modelPath: `${this.config.modelsPath}/chro-empathetic.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'cfo-analytical',\n        name: 'CFO Analytical Voice',\n        language: 'en-US',\n        gender: 'female',\n        characteristics: {\n          pitch: 1.1,\n          speed: 0.95,\n          tone: 'analytical',\n          accent: 'american-professional'\n        },\n        modelPath: `${this.config.modelsPath}/cfo-analytical.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'cto-technical',\n        name: 'CTO Technical Voice',\n        language: 'en-US',\n        gender: 'male',\n        characteristics: {\n          pitch: 0.9,\n          speed: 1.0,\n          tone: 'technical',\n          accent: 'american-tech'\n        },\n        modelPath: `${this.config.modelsPath}/cto-technical.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'cmo-persuasive',\n        name: 'CMO Persuasive Voice',\n        language: 'en-US',\n        gender: 'female',\n        characteristics: {\n          pitch: 1.2,\n          speed: 1.05,\n          tone: 'persuasive',\n          accent: 'american-marketing'\n        },\n        modelPath: `${this.config.modelsPath}/cmo-persuasive.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'coo-operational',\n        name: 'COO Operational Voice',\n        language: 'en-US',\n        gender: 'male',\n        characteristics: {\n          pitch: 0.85,\n          speed: 0.98,\n          tone: 'operational',\n          accent: 'american-business'\n        },\n        modelPath: `${this.config.modelsPath}/coo-operational.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'chro-empathetic',\n        name: 'CHRO Empathetic Voice',\n        language: 'en-US',\n        gender: 'female',\n        characteristics: {\n          pitch: 1.15,\n          speed: 0.92,\n          tone: 'empathetic',\n          accent: 'american-caring'\n        },\n        modelPath: `${this.config.modelsPath}/chro-empathetic.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'clo-precise',\n        name: 'CLO Precise Voice',\n        language: 'en-US',\n        gender: 'male',\n        characteristics: {\n          pitch: 0.88,\n          speed: 0.88,\n          tone: 'precise',\n          accent: 'american-legal'\n        },\n        modelPath: `${this.config.modelsPath}/clo-precise.onnx`,\n        isLoaded: false\n      },\n      {\n        id: 'cso-strategic',\n        name: 'CSO Strategic Voice',\n        language: 'en-US',\n        gender: 'female',\n        characteristics: {\n          pitch: 1.05,\n          speed: 0.93,\n          tone: 'strategic',\n          accent: 'american-strategic'\n        },\n        modelPath: `${this.config.modelsPath}/cso-strategic.onnx`,\n        isLoaded: false\n      }\n    ];\n\n    models.forEach(model => {\n      this.voiceModels.set(model.id, model);\n    });\n  }\n\n  public async initialize(): Promise<void> {\n    if (!this.config.enabled) {\n      console.log('Voice synthesis is disabled');\n      return;\n    }\n\n    try {\n      // Initialize audio context\n      this.audioContext = new AudioContext({\n        sampleRate: 22050, // Optimal for voice synthesis\n        latencyHint: 'interactive'\n      });\n\n      // Initialize StyleTTS2 Engine\n      const styleTTS2Config: StyleTTS2Config = {\n        modelPath: this.config.modelsPath,\n        vocoder: 'hifigan',\n        device: 'cpu', // Start with CPU, upgrade to WebGPU if available\n        batchSize: 1,\n        maxLength: 1000,\n        temperature: 0.7,\n        lengthScale: 1.0,\n        noiseScale: 0.667,\n        enableWebAssembly: true\n      };\n\n      this.styleTTS2Engine = new StyleTTS2Engine(styleTTS2Config);\n\n      // Set up StyleTTS2 event handlers\n      this.styleTTS2Engine.on('engineReady', () => {\n        console.log('✓ StyleTTS2 Engine ready');\n      });\n\n      this.styleTTS2Engine.on('modelLoaded', (data: any) => {\n        console.log(`✓ StyleTTS2 model loaded: ${data.modelId}`);\n        this.emit('modelLoaded', data);\n      });\n\n      this.styleTTS2Engine.on('synthesisProgress', (data: any) => {\n        this.emit('synthesisProgress', data);\n      });\n\n      this.styleTTS2Engine.on('error', (error: any) => {\n        console.error('StyleTTS2 Engine error:', error);\n        this.emit('error', error);\n      });\n\n      // Initialize StyleTTS2 Engine\n      await this.styleTTS2Engine.initialize();\n\n      // Initialize worker pool for fallback processing\n      await this.initializeWorkerPool();\n\n      // Load critical voice models (SOVREN AI, CEO, CFO, CTO first)\n      const criticalModels = ['sovren-ai-neural', 'ceo-authoritative', 'cfo-analytical', 'cto-technical'];\n      await Promise.all(criticalModels.map(modelId => this.loadVoiceModel(modelId)));\n\n      console.log('Voice Synthesizer with StyleTTS2 initialized successfully');\n      this.emit('ready');\n\n    } catch (error) {\n      console.error('Failed to initialize Voice Synthesizer:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check browser compatibility for voice synthesis\n   */\n  private async checkBrowserCompatibility(): Promise<void> {\n    if (!window.AudioContext && !(window as any).webkitAudioContext) {\n      throw new Error('Web Audio API not supported');\n    }\n\n    if (!window.Worker) {\n      throw new Error('Web Workers not supported');\n    }\n\n    console.log('✅ Browser compatibility check passed');\n  }\n\n  /**\n   * Detect optimal device for synthesis (CPU/GPU)\n   */\n  private async detectOptimalDevice(): Promise<string> {\n    try {\n      // Check for WebGPU support\n      if ((navigator as any).gpu) {\n        const adapter = await (navigator as any).gpu.requestAdapter();\n        if (adapter) {\n          console.log('🚀 WebGPU detected, using GPU acceleration');\n          return 'gpu';\n        }\n      }\n    } catch (error) {\n      console.log('WebGPU not available, falling back to CPU');\n    }\n\n    return 'cpu';\n  }\n\n  /**\n   * Setup comprehensive StyleTTS2 event handlers\n   */\n  private setupStyleTTS2EventHandlers(): void {\n    this.styleTTS2Engine.on('engineReady', () => {\n      console.log('✓ StyleTTS2 Engine ready');\n    });\n\n    this.styleTTS2Engine.on('modelLoaded', (data: any) => {\n      console.log(`✓ StyleTTS2 model loaded: ${data.modelId}`);\n      this.emit('modelLoaded', data);\n    });\n\n    this.styleTTS2Engine.on('synthesisProgress', (data: any) => {\n      this.emit('synthesisProgress', data);\n    });\n\n    this.styleTTS2Engine.on('synthesisComplete', (result: any) => {\n      this.emit('synthesisComplete', result);\n    });\n\n    this.styleTTS2Engine.on('error', (error: any) => {\n      console.error('StyleTTS2 Engine error:', error);\n      this.emit('error', error);\n    });\n  }\n\n  /**\n   * Load and validate voice models\n   */\n  private async loadAndValidateVoiceModels(): Promise<void> {\n    console.log('📦 Loading and validating voice models...');\n\n    // Load critical models first\n    const criticalModels = ['sovren-ai-neural', 'ceo-authoritative', 'cfo-analytical', 'cto-technical'];\n\n    for (const modelId of criticalModels) {\n      try {\n        await this.loadVoiceModel(modelId);\n        console.log(`✅ Critical model loaded: ${modelId}`);\n      } catch (error) {\n        console.warn(`⚠️ Failed to load critical model ${modelId}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Perform system health check\n   */\n  private async performHealthCheck(): Promise<void> {\n    console.log('🏥 Performing voice synthesis health check...');\n\n    try {\n      // Test synthesis with a simple phrase\n      const testResult = await this.synthesize('System health check', 'sovren-ai-neural', 'high');\n\n      if (testResult.audioBuffer && testResult.audioBuffer.byteLength > 0) {\n        console.log('✅ Voice synthesis health check passed');\n      } else {\n        throw new Error('Health check produced empty audio');\n      }\n    } catch (error) {\n      console.warn('⚠️ Voice synthesis health check failed:', error);\n      // Don't throw - allow system to continue with degraded functionality\n    }\n  }\n\n  private async initializeWorkerPool(): Promise<void> {\n    for (let i = 0; i < this.maxWorkers; i++) {\n      try {\n        const worker = new Worker('/workers/voice-synthesis-worker.js');\n        worker.onmessage = this.handleWorkerMessage.bind(this);\n        worker.onerror = this.handleWorkerError.bind(this);\n        this.workerPool.push(worker);\n      } catch (error) {\n        console.warn(`Failed to create synthesis worker ${i}:`, error);\n      }\n    }\n\n    if (this.workerPool.length === 0) {\n      console.warn('No synthesis workers available, falling back to main thread processing');\n    }\n  }\n\n  private handleWorkerMessage(event: MessageEvent): void {\n    const { type, requestId, result, error } = event.data;\n\n    switch (type) {\n      case 'synthesis-complete':\n        this.handleSynthesisComplete(requestId, result);\n        break;\n      case 'synthesis-error':\n        this.handleSynthesisError(requestId, error);\n        break;\n      case 'model-loaded':\n        this.handleModelLoaded(result.modelId);\n        break;\n    }\n  }\n\n  private handleWorkerError(error: ErrorEvent): void {\n    console.error('Synthesis worker error:', error);\n    this.emit('error', error);\n  }\n\n  private async loadVoiceModel(modelId: string): Promise<void> {\n    const model = this.voiceModels.get(modelId);\n    if (!model || model.isLoaded) {\n      return;\n    }\n\n    try {\n      // In a real implementation, this would load the actual model\n      // For now, we'll simulate loading\n      console.log(`Loading voice model: ${model.name}`);\n      \n      // Simulate loading time\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      model.isLoaded = true;\n      console.log(`✓ Voice model loaded: ${model.name}`);\n      this.emit('modelLoaded', { modelId, model });\n\n    } catch (error) {\n      console.error(`Failed to load voice model ${modelId}:`, error);\n      this.emit('error', { modelId, error });\n      throw error;\n    }\n  }\n\n  public async synthesize(\n    text: string, \n    voiceModelId: string, \n    priority: 'low' | 'normal' | 'high' = 'normal',\n    options?: SynthesisRequest['options']\n  ): Promise<string> {\n    if (!this.config.enabled) {\n      throw new Error('Voice synthesis is disabled');\n    }\n\n    // Check if model exists and load if necessary\n    const model = this.voiceModels.get(voiceModelId);\n    if (!model) {\n      throw new Error(`Voice model not found: ${voiceModelId}`);\n    }\n\n    if (!model.isLoaded) {\n      await this.loadVoiceModel(voiceModelId);\n    }\n\n    // Create synthesis request\n    const request: SynthesisRequest = {\n      id: this.generateRequestId(),\n      text,\n      voiceModel: voiceModelId,\n      priority,\n      timestamp: new Date(),\n      options\n    };\n\n    // Check cache first\n    const cacheKey = this.generateCacheKey(request);\n    if (this.cache.has(cacheKey)) {\n      const cachedResult = this.cache.get(cacheKey)!;\n      this.emit('synthesisComplete', { requestId: request.id, result: cachedResult, fromCache: true });\n      return request.id;\n    }\n\n    // Add to queue\n    this.addToQueue(request);\n\n    // Process queue if not already processing\n    if (!this.isProcessing) {\n      this.processQueue();\n    }\n\n    return request.id;\n  }\n\n  private addToQueue(request: SynthesisRequest): void {\n    // Insert based on priority\n    const priorityOrder = { high: 0, normal: 1, low: 2 };\n    const insertIndex = this.synthesisQueue.findIndex(\n      req => priorityOrder[req.priority] > priorityOrder[request.priority]\n    );\n\n    if (insertIndex === -1) {\n      this.synthesisQueue.push(request);\n    } else {\n      this.synthesisQueue.splice(insertIndex, 0, request);\n    }\n\n    this.emit('queueUpdated', { queueLength: this.synthesisQueue.length });\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.isProcessing || this.synthesisQueue.length === 0) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    while (this.synthesisQueue.length > 0) {\n      const request = this.synthesisQueue.shift()!;\n      \n      try {\n        await this.processSynthesisRequest(request);\n      } catch (error) {\n        console.error(`Synthesis failed for request ${request.id}:`, error);\n        this.emit('synthesisError', { requestId: request.id, error });\n      }\n    }\n\n    this.isProcessing = false;\n  }\n\n  private async processSynthesisRequest(request: SynthesisRequest): Promise<void> {\n    const model = this.voiceModels.get(request.voiceModel)!;\n\n    // Get available worker or process in main thread\n    const worker = this.getAvailableWorker();\n    \n    if (worker) {\n      // Process with worker\n      worker.postMessage({\n        type: 'synthesize',\n        request,\n        model\n      });\n    } else {\n      // Process in main thread (fallback)\n      await this.synthesizeInMainThread(request, model);\n    }\n  }\n\n  private getAvailableWorker(): Worker | null {\n    // In a real implementation, you'd track worker availability\n    return this.workerPool.length > 0 ? this.workerPool[0] : null;\n  }\n\n  private async synthesizeInMainThread(request: SynthesisRequest, model: VoiceModel): Promise<void> {\n    try {\n      console.log(`Synthesizing with StyleTTS2: \"${request.text}\" using ${model.name}`);\n\n      if (this.styleTTS2Engine) {\n        // Use StyleTTS2 for high-quality synthesis\n        const synthesisParams: SynthesisParameters = {\n          text: request.text,\n          voiceId: request.voiceModel,\n          speed: request.options?.speed || model.characteristics.speed,\n          pitch: request.options?.pitch || model.characteristics.pitch,\n          energy: 1.0,\n          emotion: request.options?.emotion || 'neutral',\n          style: [], // Style vector for voice cloning\n          prosody: {\n            rate: request.options?.speed || 1.0,\n            volume: request.options?.volume || 1.0,\n            emphasis: [] // Emphasis points\n          }\n        };\n\n        const audioBuffer = await this.styleTTS2Engine.synthesize(synthesisParams);\n        const duration = (audioBuffer.byteLength / 2) / 22050 * 1000; // Convert to milliseconds\n\n        const result: SynthesisResult = {\n          requestId: request.id,\n          audioBuffer,\n          duration,\n          format: 'wav',\n          sampleRate: 22050\n        };\n\n        this.handleSynthesisComplete(request.id, result);\n\n      } else {\n        // Fallback to basic synthesis\n        console.log(`Fallback synthesis: \"${request.text}\" with ${model.name}`);\n\n        const duration = request.text.length * 50; // Simulate duration\n        await new Promise(resolve => setTimeout(resolve, duration));\n\n        // Create mock audio buffer\n        const sampleRate = 22050;\n        const samples = Math.floor(duration * sampleRate / 1000);\n        const audioBuffer = new ArrayBuffer(samples * 2); // 16-bit audio\n\n        const result: SynthesisResult = {\n          requestId: request.id,\n          audioBuffer,\n          duration,\n          format: 'wav',\n          sampleRate\n        };\n\n        this.handleSynthesisComplete(request.id, result);\n      }\n\n    } catch (error) {\n      console.error('Synthesis failed, falling back to basic synthesis:', error);\n      this.handleSynthesisError(request.id, error);\n    }\n  }\n\n  private handleSynthesisComplete(requestId: string, result: SynthesisResult): void {\n    // Cache the result\n    const request = this.synthesisQueue.find(req => req.id === requestId);\n    if (request) {\n      const cacheKey = this.generateCacheKey(request);\n      this.addToCache(cacheKey, result);\n    }\n\n    console.log(`Synthesis complete for request: ${requestId}`);\n    this.emit('synthesisComplete', { requestId, result });\n  }\n\n  private handleSynthesisError(requestId: string, error: any): void {\n    console.error(`Synthesis error for request ${requestId}:`, error);\n    this.emit('synthesisError', { requestId, error });\n  }\n\n  private handleModelLoaded(modelId: string): void {\n    const model = this.voiceModels.get(modelId);\n    if (model) {\n      model.isLoaded = true;\n      this.emit('modelLoaded', { modelId, model });\n    }\n  }\n\n  private generateRequestId(): string {\n    return `synthesis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateCacheKey(request: SynthesisRequest): string {\n    const optionsStr = JSON.stringify(request.options || {});\n    return `${request.voiceModel}_${request.text}_${optionsStr}`;\n  }\n\n  private addToCache(key: string, result: SynthesisResult): void {\n    // Implement LRU cache\n    if (this.cache.size >= this.config.cacheSize) {\n      const firstKey = this.cache.keys().next().value;\n      if (firstKey !== undefined) {\n        this.cache.delete(firstKey);\n      }\n    }\n    this.cache.set(key, result);\n  }\n\n  public getVoiceModels(): VoiceModel[] {\n    return Array.from(this.voiceModels.values());\n  }\n\n  public getLoadedModels(): VoiceModel[] {\n    return Array.from(this.voiceModels.values()).filter(model => model.isLoaded);\n  }\n\n  public getQueueLength(): number {\n    return this.synthesisQueue.length;\n  }\n\n  public clearQueue(): void {\n    this.synthesisQueue = [];\n    this.emit('queueUpdated', { queueLength: 0 });\n  }\n\n  public on(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  public off(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n\n  public getStyleTTS2Status(): any {\n    if (!this.styleTTS2Engine) {\n      return { status: 'not_initialized' };\n    }\n\n    return {\n      status: 'ready',\n      loadedModels: this.styleTTS2Engine.getLoadedModels().length,\n      memoryUsage: this.styleTTS2Engine.getMemoryUsage()\n    };\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('Shutting down Voice Synthesizer...');\n\n    // Clear queue\n    this.clearQueue();\n\n    // Terminate workers\n    this.workerPool.forEach(worker => worker.terminate());\n    this.workerPool = [];\n\n    // Shutdown StyleTTS2 Engine\n    if (this.styleTTS2Engine) {\n      await this.styleTTS2Engine.shutdown();\n      this.styleTTS2Engine = null;\n    }\n\n    // Close audio context\n    if (this.audioContext) {\n      await this.audioContext.close();\n      this.audioContext = null;\n    }\n\n    // Clear cache\n    this.cache.clear();\n\n    console.log('✓ Voice Synthesizer shutdown complete');\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2515, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/voice/VoiceSystemManager.ts"],"sourcesContent":["import { SIPClient, SIPConfig, CallSession } from './SIPClient';\nimport { AudioProcessor, AudioProcessingConfig } from './AudioProcessor';\nimport { ExecutiveVoiceRouter, ExecutiveProfile } from './ExecutiveVoiceRouter';\nimport { VoiceSynthesizer } from './VoiceSynthesizer';\n\nexport interface VoiceSystemConfig {\n  sip: SIPConfig;\n  audio: AudioProcessingConfig;\n  synthesis: {\n    enabled: boolean;\n    modelsPath: string;\n    cacheSize: number;\n  };\n  recording: {\n    enabled: boolean;\n    format: 'wav' | 'mp3' | 'ogg';\n    quality: 'low' | 'medium' | 'high';\n  };\n  transcription: {\n    enabled: boolean;\n    language: string;\n    realTime: boolean;\n  };\n}\n\nexport interface VoiceSystemStatus {\n  isInitialized: boolean;\n  sipStatus: 'disconnected' | 'connecting' | 'connected' | 'error';\n  audioStatus: 'inactive' | 'active' | 'error';\n  synthesisStatus: 'disabled' | 'loading' | 'ready' | 'error';\n  activeCalls: number;\n  availableExecutives: number;\n  systemLoad: number;\n}\n\nexport class VoiceSystemManager {\n  private sipClient: SIPClient;\n  private audioProcessor: AudioProcessor;\n  private voiceRouter: ExecutiveVoiceRouter;\n  private voiceSynthesizer: VoiceSynthesizer;\n  private isInitialized: boolean = false;\n  private eventListeners: Map<string, Function[]> = new Map();\n  private systemStatus: VoiceSystemStatus;\n\n  constructor(private config: VoiceSystemConfig) {\n    // Initialize components\n    this.audioProcessor = new AudioProcessor(config.audio);\n    this.voiceRouter = new ExecutiveVoiceRouter();\n    this.voiceSynthesizer = new VoiceSynthesizer(config.synthesis);\n    this.sipClient = new SIPClient(config.sip, this.audioProcessor, this.voiceRouter);\n\n    // Initialize system status\n    this.systemStatus = {\n      isInitialized: false,\n      sipStatus: 'disconnected',\n      audioStatus: 'inactive',\n      synthesisStatus: config.synthesis.enabled ? 'loading' : 'disabled',\n      activeCalls: 0,\n      availableExecutives: 8,\n      systemLoad: 0\n    };\n\n    this.initializeEventListeners();\n    this.setupComponentEventHandlers();\n  }\n\n  private initializeEventListeners(): void {\n    this.eventListeners.set('systemReady', []);\n    this.eventListeners.set('callStarted', []);\n    this.eventListeners.set('callEnded', []);\n    this.eventListeners.set('executiveAssigned', []);\n    this.eventListeners.set('audioActivity', []);\n    this.eventListeners.set('synthesisComplete', []);\n    this.eventListeners.set('error', []);\n    this.eventListeners.set('statusChanged', []);\n  }\n\n  private setupComponentEventHandlers(): void {\n    // SIP Client events\n    this.sipClient.on('registered', () => {\n      this.systemStatus.sipStatus = 'connected';\n      this.emit('statusChanged', this.systemStatus);\n    });\n\n    this.sipClient.on('registrationFailed', (error: any) => {\n      this.systemStatus.sipStatus = 'error';\n      this.emit('error', { component: 'sip', error });\n      this.emit('statusChanged', this.systemStatus);\n    });\n\n    this.sipClient.on('invite', (session: CallSession) => {\n      this.systemStatus.activeCalls++;\n      this.emit('callStarted', session);\n      this.emit('statusChanged', this.systemStatus);\n    });\n\n    this.sipClient.on('bye', (session: CallSession) => {\n      this.systemStatus.activeCalls--;\n      this.voiceRouter.releaseExecutive(session.executive);\n      this.emit('callEnded', session);\n      this.emit('statusChanged', this.systemStatus);\n    });\n\n    // Audio Processor events\n    this.audioProcessor.on('audioActivity', (data: any) => {\n      this.emit('audioActivity', data);\n    });\n\n    // Voice Router events\n    this.voiceRouter.on('executiveAssigned', (data: any) => {\n      this.emit('executiveAssigned', data);\n    });\n\n    this.voiceRouter.on('availabilityChanged', () => {\n      this.systemStatus.availableExecutives = this.voiceRouter.getAvailableExecutives().length;\n      this.emit('statusChanged', this.systemStatus);\n    });\n\n    // Voice Synthesizer events\n    this.voiceSynthesizer.on('ready', () => {\n      this.systemStatus.synthesisStatus = 'ready';\n      this.emit('statusChanged', this.systemStatus);\n    });\n\n    this.voiceSynthesizer.on('error', (error: any) => {\n      this.systemStatus.synthesisStatus = 'error';\n      this.emit('error', { component: 'synthesis', error });\n      this.emit('statusChanged', this.systemStatus);\n    });\n\n    this.voiceSynthesizer.on('synthesisComplete', (data: any) => {\n      this.emit('synthesisComplete', data);\n    });\n  }\n\n  public async initialize(): Promise<void> {\n    try {\n      console.log('Initializing SOVREN AI Voice System...');\n\n      // Initialize audio processor first\n      this.systemStatus.audioStatus = 'active';\n      await this.audioProcessor.initialize();\n      console.log('✓ Audio Processor initialized');\n\n      // Initialize voice synthesizer if enabled\n      if (this.config.synthesis.enabled) {\n        await this.voiceSynthesizer.initialize();\n        console.log('✓ Voice Synthesizer initialized');\n      }\n\n      // Initialize SIP client\n      this.systemStatus.sipStatus = 'connecting';\n      await this.sipClient.initialize();\n      console.log('✓ SIP Client initialized');\n\n      // System is ready\n      this.isInitialized = true;\n      this.systemStatus.isInitialized = true;\n      this.systemStatus.availableExecutives = this.voiceRouter.getAvailableExecutives().length;\n\n      console.log('🎉 SOVREN AI Voice System initialized successfully');\n      this.emit('systemReady', this.systemStatus);\n      this.emit('statusChanged', this.systemStatus);\n\n    } catch (error) {\n      console.error('Failed to initialize Voice System:', error);\n      this.emit('error', { component: 'system', error });\n      throw error;\n    }\n  }\n\n  public async makeCall(targetUri: string, executiveId: string, message?: string): Promise<string> {\n    if (!this.isInitialized) {\n      throw new Error('Voice System not initialized');\n    }\n\n    try {\n      // Validate executive availability\n      const executive = this.voiceRouter.getExecutiveProfile(executiveId);\n      if (!executive) {\n        throw new Error(`Executive not found: ${executiveId}`);\n      }\n\n      // Make the call\n      const sessionId = await this.sipClient.makeCall(targetUri, executiveId);\n\n      // If message provided, synthesize and play it\n      if (message && this.config.synthesis.enabled) {\n        await this.speakAsExecutive(executiveId, message);\n      }\n\n      return sessionId;\n\n    } catch (error) {\n      console.error('Failed to make call:', error);\n      this.emit('error', { component: 'calling', error });\n      throw error;\n    }\n  }\n\n  public async endCall(sessionId: string): Promise<void> {\n    if (!this.isInitialized) {\n      throw new Error('Voice System not initialized');\n    }\n\n    try {\n      await this.sipClient.endCall(sessionId);\n    } catch (error) {\n      console.error('Failed to end call:', error);\n      this.emit('error', { component: 'calling', error });\n      throw error;\n    }\n  }\n\n  public async speakAsExecutive(executiveId: string, text: string, priority: 'low' | 'normal' | 'high' = 'normal'): Promise<void> {\n    if (!this.config.synthesis.enabled) {\n      console.warn('Voice synthesis is disabled');\n      return;\n    }\n\n    try {\n      const executive = this.voiceRouter.getExecutiveProfile(executiveId);\n      if (!executive) {\n        throw new Error(`Executive not found: ${executiveId}`);\n      }\n\n      await this.voiceSynthesizer.synthesize(text, executive.voiceModel, priority);\n\n    } catch (error) {\n      console.error('Failed to synthesize speech:', error);\n      this.emit('error', { component: 'synthesis', error });\n      throw error;\n    }\n  }\n\n  public getActiveCalls(): CallSession[] {\n    return this.sipClient.getActiveSessions();\n  }\n\n  public getCallById(sessionId: string): CallSession | undefined {\n    return this.sipClient.getSessionById(sessionId);\n  }\n\n  public getExecutiveProfiles(): ExecutiveProfile[] {\n    return this.voiceRouter.getAllExecutives();\n  }\n\n  public getAvailableExecutives(): ExecutiveProfile[] {\n    return this.voiceRouter.getAvailableExecutives();\n  }\n\n  public setExecutiveAvailability(executiveId: string, availability: ExecutiveProfile['availability']): void {\n    this.voiceRouter.setExecutiveAvailability(executiveId, availability);\n  }\n\n  public updateExecutivePosition(executiveId: string, x: number, y: number, z: number): void {\n    this.audioProcessor.updateExecutivePosition(executiveId, x, y, z);\n  }\n\n  public getSystemStatus(): VoiceSystemStatus {\n    // Update system load\n    const activeCalls = this.sipClient.getActiveSessions().length;\n    const maxCalls = this.voiceRouter.getAllExecutives().reduce((sum, exec) => sum + exec.maxConcurrentCalls, 0);\n    this.systemStatus.systemLoad = maxCalls > 0 ? (activeCalls / maxCalls) * 100 : 0;\n    this.systemStatus.activeCalls = activeCalls;\n\n    return { ...this.systemStatus };\n  }\n\n  public async startRecording(sessionId: string): Promise<void> {\n    if (!this.config.recording.enabled) {\n      console.warn('Call recording is disabled');\n      return;\n    }\n\n    // Implementation would depend on your recording backend\n    console.log(`Starting recording for session: ${sessionId}`);\n  }\n\n  public async stopRecording(sessionId: string): Promise<string> {\n    if (!this.config.recording.enabled) {\n      throw new Error('Call recording is disabled');\n    }\n\n    // Implementation would return the recording file path/URL\n    console.log(`Stopping recording for session: ${sessionId}`);\n    return `/recordings/${sessionId}.${this.config.recording.format}`;\n  }\n\n  public async startTranscription(sessionId: string): Promise<void> {\n    if (!this.config.transcription.enabled) {\n      console.warn('Call transcription is disabled');\n      return;\n    }\n\n    // Implementation would start real-time transcription\n    console.log(`Starting transcription for session: ${sessionId}`);\n  }\n\n  public async getTranscript(sessionId: string): Promise<string> {\n    if (!this.config.transcription.enabled) {\n      throw new Error('Call transcription is disabled');\n    }\n\n    // Implementation would return the transcript\n    console.log(`Getting transcript for session: ${sessionId}`);\n    return `Transcript for session ${sessionId}`;\n  }\n\n  public on(event: string, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  public off(event: string, callback: Function): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('Shutting down SOVREN AI Voice System...');\n\n    try {\n      // Disconnect SIP client\n      await this.sipClient.disconnect();\n      \n      // Destroy audio processor\n      await this.audioProcessor.destroy();\n      \n      // Shutdown voice synthesizer\n      if (this.config.synthesis.enabled) {\n        await this.voiceSynthesizer.shutdown();\n      }\n\n      this.isInitialized = false;\n      this.systemStatus.isInitialized = false;\n      this.systemStatus.sipStatus = 'disconnected';\n      this.systemStatus.audioStatus = 'inactive';\n\n      console.log('✓ Voice System shutdown complete');\n      this.emit('statusChanged', this.systemStatus);\n\n    } catch (error) {\n      console.error('Error during Voice System shutdown:', error);\n      this.emit('error', { component: 'shutdown', error });\n      throw error;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2828, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/hooks/useVoiceSystem.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { VoiceSystemManager, VoiceSystemConfig, VoiceSystemStatus } from '@/lib/voice/VoiceSystemManager';\nimport { CallSession } from '@/lib/voice/SIPClient';\nimport { ExecutiveProfile } from '@/lib/voice/ExecutiveVoiceRouter';\n\nexport interface UseVoiceSystemOptions {\n  autoInitialize?: boolean;\n  config?: Partial<VoiceSystemConfig>;\n}\n\nexport interface VoiceSystemHook {\n  // System state\n  isInitialized: boolean;\n  status: VoiceSystemStatus;\n  error: string | null;\n  \n  // Call management\n  activeCalls: CallSession[];\n  makeCall: (targetUri: string, executiveId: string, message?: string) => Promise<string>;\n  endCall: (sessionId: string) => Promise<void>;\n  \n  // Executive management\n  executives: ExecutiveProfile[];\n  availableExecutives: ExecutiveProfile[];\n  setExecutiveAvailability: (executiveId: string, availability: ExecutiveProfile['availability']) => void;\n  updateExecutivePosition: (executiveId: string, x: number, y: number, z: number) => void;\n  \n  // Voice synthesis\n  speakAsExecutive: (executiveId: string, text: string, priority?: 'low' | 'normal' | 'high') => Promise<void>;\n  \n  // System control\n  initialize: () => Promise<void>;\n  shutdown: () => Promise<void>;\n  \n  // Event handlers\n  onCallStarted: (callback: (session: CallSession) => void) => void;\n  onCallEnded: (callback: (session: CallSession) => void) => void;\n  onExecutiveAssigned: (callback: (data: any) => void) => void;\n  onAudioActivity: (callback: (data: any) => void) => void;\n}\n\nconst defaultConfig: VoiceSystemConfig = {\n  sip: {\n    uri: 'sip:sovren@localhost',\n    transportOptions: {\n      server: 'wss://localhost:8089/ws',\n      connectionTimeout: 30000,\n      maxReconnectionAttempts: 5,\n      reconnectionTimeout: 10000\n    },\n    authorizationUsername: 'sovren',\n    authorizationPassword: 'neural-war-terminal',\n    displayName: 'SOVREN AI Executive Command Center'\n  },\n  audio: {\n    sampleRate: 48000,\n    bufferSize: 4096,\n    enableNoiseReduction: true,\n    enableEchoCancellation: true,\n    enableAutoGainControl: true,\n    spatialAudioEnabled: true\n  },\n  synthesis: {\n    enabled: true,\n    modelsPath: '/voice-models',\n    cacheSize: 100\n  },\n  recording: {\n    enabled: true,\n    format: 'wav',\n    quality: 'high'\n  },\n  transcription: {\n    enabled: true,\n    language: 'en-US',\n    realTime: true\n  }\n};\n\nexport function useVoiceSystem(options: UseVoiceSystemOptions = {}): VoiceSystemHook {\n  const { autoInitialize = false, config: userConfig = {} } = options;\n  \n  // Merge user config with defaults\n  const config = { ...defaultConfig, ...userConfig };\n  \n  // State\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [status, setStatus] = useState<VoiceSystemStatus>({\n    isInitialized: false,\n    sipStatus: 'disconnected',\n    audioStatus: 'inactive',\n    synthesisStatus: 'disabled',\n    activeCalls: 0,\n    availableExecutives: 8,\n    systemLoad: 0\n  });\n  const [error, setError] = useState<string | null>(null);\n  const [activeCalls, setActiveCalls] = useState<CallSession[]>([]);\n  const [executives, setExecutives] = useState<ExecutiveProfile[]>([]);\n  const [availableExecutives, setAvailableExecutives] = useState<ExecutiveProfile[]>([]);\n  \n  // Voice system manager instance\n  const voiceSystemRef = useRef<VoiceSystemManager | null>(null);\n  const eventCallbacksRef = useRef<Map<string, Function[]>>(new Map());\n\n  // Initialize voice system\n  const initialize = useCallback(async () => {\n    if (voiceSystemRef.current || isInitialized) {\n      return;\n    }\n\n    try {\n      setError(null);\n      \n      // Create voice system manager\n      const voiceSystem = new VoiceSystemManager(config);\n      voiceSystemRef.current = voiceSystem;\n\n      // Set up event listeners\n      voiceSystem.on('systemReady', (systemStatus: VoiceSystemStatus) => {\n        setIsInitialized(true);\n        setStatus(systemStatus);\n        setExecutives(voiceSystem.getExecutiveProfiles());\n        setAvailableExecutives(voiceSystem.getAvailableExecutives());\n      });\n\n      voiceSystem.on('statusChanged', (systemStatus: VoiceSystemStatus) => {\n        setStatus(systemStatus);\n        setActiveCalls(voiceSystem.getActiveCalls());\n        setAvailableExecutives(voiceSystem.getAvailableExecutives());\n      });\n\n      voiceSystem.on('callStarted', (session: CallSession) => {\n        setActiveCalls(voiceSystem.getActiveCalls());\n        // Trigger user callbacks\n        const callbacks = eventCallbacksRef.current.get('callStarted') || [];\n        callbacks.forEach(callback => callback(session));\n      });\n\n      voiceSystem.on('callEnded', (session: CallSession) => {\n        setActiveCalls(voiceSystem.getActiveCalls());\n        // Trigger user callbacks\n        const callbacks = eventCallbacksRef.current.get('callEnded') || [];\n        callbacks.forEach(callback => callback(session));\n      });\n\n      voiceSystem.on('executiveAssigned', (data: any) => {\n        setAvailableExecutives(voiceSystem.getAvailableExecutives());\n        // Trigger user callbacks\n        const callbacks = eventCallbacksRef.current.get('executiveAssigned') || [];\n        callbacks.forEach(callback => callback(data));\n      });\n\n      voiceSystem.on('audioActivity', (data: any) => {\n        // Trigger user callbacks\n        const callbacks = eventCallbacksRef.current.get('audioActivity') || [];\n        callbacks.forEach(callback => callback(data));\n      });\n\n      voiceSystem.on('error', (errorData: any) => {\n        console.error('Voice System Error:', errorData);\n        setError(`${errorData.component}: ${errorData.error.message || errorData.error}`);\n      });\n\n      // Initialize the system\n      await voiceSystem.initialize();\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      console.error('Failed to initialize voice system:', err);\n    }\n  }, [config, isInitialized]);\n\n  // Shutdown voice system\n  const shutdown = useCallback(async () => {\n    if (!voiceSystemRef.current) {\n      return;\n    }\n\n    try {\n      await voiceSystemRef.current.shutdown();\n      voiceSystemRef.current = null;\n      setIsInitialized(false);\n      setActiveCalls([]);\n      setError(null);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      console.error('Failed to shutdown voice system:', err);\n    }\n  }, []);\n\n  // Make a call\n  const makeCall = useCallback(async (targetUri: string, executiveId: string, message?: string): Promise<string> => {\n    if (!voiceSystemRef.current) {\n      throw new Error('Voice system not initialized');\n    }\n    return await voiceSystemRef.current.makeCall(targetUri, executiveId, message);\n  }, []);\n\n  // End a call\n  const endCall = useCallback(async (sessionId: string): Promise<void> => {\n    if (!voiceSystemRef.current) {\n      throw new Error('Voice system not initialized');\n    }\n    await voiceSystemRef.current.endCall(sessionId);\n  }, []);\n\n  // Set executive availability\n  const setExecutiveAvailability = useCallback((executiveId: string, availability: ExecutiveProfile['availability']) => {\n    if (!voiceSystemRef.current) {\n      return;\n    }\n    voiceSystemRef.current.setExecutiveAvailability(executiveId, availability);\n  }, []);\n\n  // Update executive position for spatial audio\n  const updateExecutivePosition = useCallback((executiveId: string, x: number, y: number, z: number) => {\n    if (!voiceSystemRef.current) {\n      return;\n    }\n    voiceSystemRef.current.updateExecutivePosition(executiveId, x, y, z);\n  }, []);\n\n  // Speak as executive\n  const speakAsExecutive = useCallback(async (executiveId: string, text: string, priority: 'low' | 'normal' | 'high' = 'normal'): Promise<void> => {\n    if (!voiceSystemRef.current) {\n      throw new Error('Voice system not initialized');\n    }\n    await voiceSystemRef.current.speakAsExecutive(executiveId, text, priority);\n  }, []);\n\n  // Event handler registration\n  const onCallStarted = useCallback((callback: (session: CallSession) => void) => {\n    if (!eventCallbacksRef.current.has('callStarted')) {\n      eventCallbacksRef.current.set('callStarted', []);\n    }\n    eventCallbacksRef.current.get('callStarted')!.push(callback);\n  }, []);\n\n  const onCallEnded = useCallback((callback: (session: CallSession) => void) => {\n    if (!eventCallbacksRef.current.has('callEnded')) {\n      eventCallbacksRef.current.set('callEnded', []);\n    }\n    eventCallbacksRef.current.get('callEnded')!.push(callback);\n  }, []);\n\n  const onExecutiveAssigned = useCallback((callback: (data: any) => void) => {\n    if (!eventCallbacksRef.current.has('executiveAssigned')) {\n      eventCallbacksRef.current.set('executiveAssigned', []);\n    }\n    eventCallbacksRef.current.get('executiveAssigned')!.push(callback);\n  }, []);\n\n  const onAudioActivity = useCallback((callback: (data: any) => void) => {\n    if (!eventCallbacksRef.current.has('audioActivity')) {\n      eventCallbacksRef.current.set('audioActivity', []);\n    }\n    eventCallbacksRef.current.get('audioActivity')!.push(callback);\n  }, []);\n\n  // Auto-initialize if requested\n  useEffect(() => {\n    if (autoInitialize && !isInitialized && !voiceSystemRef.current) {\n      initialize();\n    }\n  }, [autoInitialize, isInitialized, initialize]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (voiceSystemRef.current) {\n        voiceSystemRef.current.shutdown().catch(console.error);\n      }\n    };\n  }, []);\n\n  return {\n    // System state\n    isInitialized,\n    status,\n    error,\n    \n    // Call management\n    activeCalls,\n    makeCall,\n    endCall,\n    \n    // Executive management\n    executives,\n    availableExecutives,\n    setExecutiveAvailability,\n    updateExecutivePosition,\n    \n    // Voice synthesis\n    speakAsExecutive,\n    \n    // System control\n    initialize,\n    shutdown,\n    \n    // Event handlers\n    onCallStarted,\n    onCallEnded,\n    onExecutiveAssigned,\n    onAudioActivity\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3080, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3085, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/providers/Providers.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext } from 'react';\nimport { useVoiceSystem, VoiceSystemHook } from '@/hooks/useVoiceSystem';\n\ninterface ProvidersProps {\n  children: React.ReactNode;\n}\n\n// Voice System Context\nconst VoiceSystemContext = createContext<VoiceSystemHook | null>(null);\n\nexport function useVoiceSystemContext(): VoiceSystemHook {\n  const context = useContext(VoiceSystemContext);\n  if (!context) {\n    throw new Error('useVoiceSystemContext must be used within VoiceSystemProvider');\n  }\n  return context;\n}\n\nfunction VoiceSystemProvider({ children }: { children: React.ReactNode }) {\n  const voiceSystem = useVoiceSystem({\n    autoInitialize: true,\n    config: {\n      // Override default config if needed\n      synthesis: {\n        enabled: true,\n        modelsPath: '/voice-models',\n        cacheSize: 50\n      }\n    }\n  });\n\n  return (\n    <VoiceSystemContext.Provider value={voiceSystem}>\n      {children}\n    </VoiceSystemContext.Provider>\n  );\n}\n\nexport function Providers({ children }: ProvidersProps) {\n  return (\n    <VoiceSystemProvider>\n      {children}\n    </VoiceSystemProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;AASA,uBAAuB;AACvB,MAAM,mCAAqB,CAAA,GAAA,+MAAA,CAAA,gBAAa,AAAD,EAA0B;AAE1D,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,+MAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEA,SAAS,oBAAoB,EAAE,QAAQ,EAAiC;IACtE,MAAM,cAAc,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAE;QACjC,gBAAgB;QAChB,QAAQ;YACN,oCAAoC;YACpC,WAAW;gBACT,SAAS;gBACT,YAAY;gBACZ,WAAW;YACb;QACF;IACF;IAEA,qBACE,wPAAC,mBAAmB,QAAQ;QAAC,OAAO;kBACjC;;;;;;AAGP;AAEO,SAAS,UAAU,EAAE,QAAQ,EAAkB;IACpD,qBACE,wPAAC;kBACE;;;;;;AAGP"}},
    {"offset": {"line": 3136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}